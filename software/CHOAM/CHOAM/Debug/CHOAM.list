
CHOAM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002800  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800290c  0800290c  0000390c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002930  08002930  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002930  08002930  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002930  08002930  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002930  08002930  00003930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002934  08002934  00003934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002938  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  2000000c  08002944  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08002944  00004134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ddf  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018ba  00000000  00000000  0000ce14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  0000e6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000081c  00000000  00000000  0000f150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001526  00000000  00000000  0000f96c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b718  00000000  00000000  00010e92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008956b  00000000  00000000  0001c5aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a5b15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b40  00000000  00000000  000a5b58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  000a8698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080028f4 	.word	0x080028f4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080028f4 	.word	0x080028f4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fc39 	bl	80009c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f835 	bl	80001c4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_GPIO_Init();
 800015a:	f000 f9f5 	bl	8000548 <MX_GPIO_Init>
  MX_TIM2_Init();
 800015e:	f000 f8cb 	bl	80002f8 <MX_TIM2_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000162:	f000 f9f1 	bl	8000548 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000166:	f000 f8c7 	bl	80002f8 <MX_TIM2_Init>
  MX_ADC1_Init();
 800016a:	f000 f887 	bl	800027c <MX_ADC1_Init>
  MX_TIM3_Init();
 800016e:	f000 f943 	bl	80003f8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000172:	f000 f995 	bl	80004a0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */


  TIM2->CCR4 = 1023;
 8000176:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800017a:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800017e:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM2->CCR3 = 1023;
 8000180:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000184:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000188:	63da      	str	r2, [r3, #60]	@ 0x3c

  int i = 0;
 800018a:	2300      	movs	r3, #0
 800018c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //dis_FR = measure_dist(DIST_FR);
	  //dis_FL = measure_dist(DIST_FL);
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800018e:	2201      	movs	r2, #1
 8000190:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000194:	480a      	ldr	r0, [pc, #40]	@ (80001c0 <main+0x74>)
 8000196:	f001 f917 	bl	80013c8 <HAL_GPIO_WritePin>
	  i++;
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	3301      	adds	r3, #1
 800019e:	607b      	str	r3, [r7, #4]
	  HAL_Delay(500);
 80001a0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80001a4:	f000 fc72 	bl	8000a8c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80001a8:	2200      	movs	r2, #0
 80001aa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001ae:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <main+0x74>)
 80001b0:	f001 f90a 	bl	80013c8 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80001b4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80001b8:	f000 fc68 	bl	8000a8c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80001bc:	bf00      	nop
 80001be:	e7e6      	b.n	800018e <main+0x42>
 80001c0:	40011000 	.word	0x40011000

080001c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b094      	sub	sp, #80	@ 0x50
 80001c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001ce:	2228      	movs	r2, #40	@ 0x28
 80001d0:	2100      	movs	r1, #0
 80001d2:	4618      	mov	r0, r3
 80001d4:	f002 fb62 	bl	800289c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d8:	f107 0314 	add.w	r3, r7, #20
 80001dc:	2200      	movs	r2, #0
 80001de:	601a      	str	r2, [r3, #0]
 80001e0:	605a      	str	r2, [r3, #4]
 80001e2:	609a      	str	r2, [r3, #8]
 80001e4:	60da      	str	r2, [r3, #12]
 80001e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	2200      	movs	r2, #0
 80001ec:	601a      	str	r2, [r3, #0]
 80001ee:	605a      	str	r2, [r3, #4]
 80001f0:	609a      	str	r2, [r3, #8]
 80001f2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001f4:	2301      	movs	r3, #1
 80001f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001fe:	2300      	movs	r3, #0
 8000200:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000202:	2301      	movs	r3, #1
 8000204:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000206:	2302      	movs	r3, #2
 8000208:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800020a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800020e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000210:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000214:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000216:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800021a:	4618      	mov	r0, r3
 800021c:	f001 f8ec 	bl	80013f8 <HAL_RCC_OscConfig>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000226:	f000 fa33 	bl	8000690 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800022a:	230f      	movs	r3, #15
 800022c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800022e:	2302      	movs	r3, #2
 8000230:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000232:	2300      	movs	r3, #0
 8000234:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000236:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800023a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800023c:	2300      	movs	r3, #0
 800023e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000240:	f107 0314 	add.w	r3, r7, #20
 8000244:	2102      	movs	r1, #2
 8000246:	4618      	mov	r0, r3
 8000248:	f001 fb58 	bl	80018fc <HAL_RCC_ClockConfig>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000252:	f000 fa1d 	bl	8000690 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000256:	2302      	movs	r3, #2
 8000258:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800025a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800025e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000260:	1d3b      	adds	r3, r7, #4
 8000262:	4618      	mov	r0, r3
 8000264:	f001 fca6 	bl	8001bb4 <HAL_RCCEx_PeriphCLKConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800026e:	f000 fa0f 	bl	8000690 <Error_Handler>
  }
}
 8000272:	bf00      	nop
 8000274:	3750      	adds	r7, #80	@ 0x50
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
	...

0800027c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b084      	sub	sp, #16
 8000280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000282:	1d3b      	adds	r3, r7, #4
 8000284:	2200      	movs	r2, #0
 8000286:	601a      	str	r2, [r3, #0]
 8000288:	605a      	str	r2, [r3, #4]
 800028a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800028c:	4b18      	ldr	r3, [pc, #96]	@ (80002f0 <MX_ADC1_Init+0x74>)
 800028e:	4a19      	ldr	r2, [pc, #100]	@ (80002f4 <MX_ADC1_Init+0x78>)
 8000290:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000292:	4b17      	ldr	r3, [pc, #92]	@ (80002f0 <MX_ADC1_Init+0x74>)
 8000294:	2200      	movs	r2, #0
 8000296:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000298:	4b15      	ldr	r3, [pc, #84]	@ (80002f0 <MX_ADC1_Init+0x74>)
 800029a:	2200      	movs	r2, #0
 800029c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800029e:	4b14      	ldr	r3, [pc, #80]	@ (80002f0 <MX_ADC1_Init+0x74>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002a4:	4b12      	ldr	r3, [pc, #72]	@ (80002f0 <MX_ADC1_Init+0x74>)
 80002a6:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80002aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002ac:	4b10      	ldr	r3, [pc, #64]	@ (80002f0 <MX_ADC1_Init+0x74>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002b2:	4b0f      	ldr	r3, [pc, #60]	@ (80002f0 <MX_ADC1_Init+0x74>)
 80002b4:	2201      	movs	r2, #1
 80002b6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002b8:	480d      	ldr	r0, [pc, #52]	@ (80002f0 <MX_ADC1_Init+0x74>)
 80002ba:	f000 fc0b 	bl	8000ad4 <HAL_ADC_Init>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002c4:	f000 f9e4 	bl	8000690 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80002c8:	2301      	movs	r3, #1
 80002ca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002cc:	2301      	movs	r3, #1
 80002ce:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002d0:	2300      	movs	r3, #0
 80002d2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	4619      	mov	r1, r3
 80002d8:	4805      	ldr	r0, [pc, #20]	@ (80002f0 <MX_ADC1_Init+0x74>)
 80002da:	f000 fcd3 	bl	8000c84 <HAL_ADC_ConfigChannel>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002e4:	f000 f9d4 	bl	8000690 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002e8:	bf00      	nop
 80002ea:	3710      	adds	r7, #16
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000028 	.word	0x20000028
 80002f4:	40012400 	.word	0x40012400

080002f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b08e      	sub	sp, #56	@ 0x38
 80002fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	605a      	str	r2, [r3, #4]
 8000308:	609a      	str	r2, [r3, #8]
 800030a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800030c:	f107 0320 	add.w	r3, r7, #32
 8000310:	2200      	movs	r2, #0
 8000312:	601a      	str	r2, [r3, #0]
 8000314:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	2200      	movs	r2, #0
 800031a:	601a      	str	r2, [r3, #0]
 800031c:	605a      	str	r2, [r3, #4]
 800031e:	609a      	str	r2, [r3, #8]
 8000320:	60da      	str	r2, [r3, #12]
 8000322:	611a      	str	r2, [r3, #16]
 8000324:	615a      	str	r2, [r3, #20]
 8000326:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000328:	4b32      	ldr	r3, [pc, #200]	@ (80003f4 <MX_TIM2_Init+0xfc>)
 800032a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800032e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000330:	4b30      	ldr	r3, [pc, #192]	@ (80003f4 <MX_TIM2_Init+0xfc>)
 8000332:	2200      	movs	r2, #0
 8000334:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000336:	4b2f      	ldr	r3, [pc, #188]	@ (80003f4 <MX_TIM2_Init+0xfc>)
 8000338:	2200      	movs	r2, #0
 800033a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2047;
 800033c:	4b2d      	ldr	r3, [pc, #180]	@ (80003f4 <MX_TIM2_Init+0xfc>)
 800033e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000342:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000344:	4b2b      	ldr	r3, [pc, #172]	@ (80003f4 <MX_TIM2_Init+0xfc>)
 8000346:	2200      	movs	r2, #0
 8000348:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800034a:	4b2a      	ldr	r3, [pc, #168]	@ (80003f4 <MX_TIM2_Init+0xfc>)
 800034c:	2280      	movs	r2, #128	@ 0x80
 800034e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000350:	4828      	ldr	r0, [pc, #160]	@ (80003f4 <MX_TIM2_Init+0xfc>)
 8000352:	f001 fce5 	bl	8001d20 <HAL_TIM_Base_Init>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800035c:	f000 f998 	bl	8000690 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000360:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000364:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000366:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800036a:	4619      	mov	r1, r3
 800036c:	4821      	ldr	r0, [pc, #132]	@ (80003f4 <MX_TIM2_Init+0xfc>)
 800036e:	f001 fee3 	bl	8002138 <HAL_TIM_ConfigClockSource>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000378:	f000 f98a 	bl	8000690 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800037c:	481d      	ldr	r0, [pc, #116]	@ (80003f4 <MX_TIM2_Init+0xfc>)
 800037e:	f001 fd1e 	bl	8001dbe <HAL_TIM_PWM_Init>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000388:	f000 f982 	bl	8000690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800038c:	2300      	movs	r3, #0
 800038e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000390:	2300      	movs	r3, #0
 8000392:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000394:	f107 0320 	add.w	r3, r7, #32
 8000398:	4619      	mov	r1, r3
 800039a:	4816      	ldr	r0, [pc, #88]	@ (80003f4 <MX_TIM2_Init+0xfc>)
 800039c:	f002 fa20 	bl	80027e0 <HAL_TIMEx_MasterConfigSynchronization>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80003a6:	f000 f973 	bl	8000690 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003aa:	2360      	movs	r3, #96	@ 0x60
 80003ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80003ae:	2300      	movs	r3, #0
 80003b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003b2:	2300      	movs	r3, #0
 80003b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003b6:	2300      	movs	r3, #0
 80003b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	2208      	movs	r2, #8
 80003be:	4619      	mov	r1, r3
 80003c0:	480c      	ldr	r0, [pc, #48]	@ (80003f4 <MX_TIM2_Init+0xfc>)
 80003c2:	f001 fdf7 	bl	8001fb4 <HAL_TIM_PWM_ConfigChannel>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80003cc:	f000 f960 	bl	8000690 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80003d0:	1d3b      	adds	r3, r7, #4
 80003d2:	220c      	movs	r2, #12
 80003d4:	4619      	mov	r1, r3
 80003d6:	4807      	ldr	r0, [pc, #28]	@ (80003f4 <MX_TIM2_Init+0xfc>)
 80003d8:	f001 fdec 	bl	8001fb4 <HAL_TIM_PWM_ConfigChannel>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80003e2:	f000 f955 	bl	8000690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80003e6:	4803      	ldr	r0, [pc, #12]	@ (80003f4 <MX_TIM2_Init+0xfc>)
 80003e8:	f000 fa66 	bl	80008b8 <HAL_TIM_MspPostInit>

}
 80003ec:	bf00      	nop
 80003ee:	3738      	adds	r7, #56	@ 0x38
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	20000058 	.word	0x20000058

080003f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b08c      	sub	sp, #48	@ 0x30
 80003fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80003fe:	f107 030c 	add.w	r3, r7, #12
 8000402:	2224      	movs	r2, #36	@ 0x24
 8000404:	2100      	movs	r1, #0
 8000406:	4618      	mov	r0, r3
 8000408:	f002 fa48 	bl	800289c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800040c:	1d3b      	adds	r3, r7, #4
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000414:	4b20      	ldr	r3, [pc, #128]	@ (8000498 <MX_TIM3_Init+0xa0>)
 8000416:	4a21      	ldr	r2, [pc, #132]	@ (800049c <MX_TIM3_Init+0xa4>)
 8000418:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800041a:	4b1f      	ldr	r3, [pc, #124]	@ (8000498 <MX_TIM3_Init+0xa0>)
 800041c:	2200      	movs	r2, #0
 800041e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000420:	4b1d      	ldr	r3, [pc, #116]	@ (8000498 <MX_TIM3_Init+0xa0>)
 8000422:	2200      	movs	r2, #0
 8000424:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000426:	4b1c      	ldr	r3, [pc, #112]	@ (8000498 <MX_TIM3_Init+0xa0>)
 8000428:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800042c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800042e:	4b1a      	ldr	r3, [pc, #104]	@ (8000498 <MX_TIM3_Init+0xa0>)
 8000430:	2200      	movs	r2, #0
 8000432:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000434:	4b18      	ldr	r3, [pc, #96]	@ (8000498 <MX_TIM3_Init+0xa0>)
 8000436:	2200      	movs	r2, #0
 8000438:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800043a:	2301      	movs	r3, #1
 800043c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800043e:	2300      	movs	r3, #0
 8000440:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000442:	2301      	movs	r3, #1
 8000444:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000446:	2300      	movs	r3, #0
 8000448:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800044a:	2300      	movs	r3, #0
 800044c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800044e:	2300      	movs	r3, #0
 8000450:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000452:	2301      	movs	r3, #1
 8000454:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000456:	2300      	movs	r3, #0
 8000458:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800045a:	2300      	movs	r3, #0
 800045c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800045e:	f107 030c 	add.w	r3, r7, #12
 8000462:	4619      	mov	r1, r3
 8000464:	480c      	ldr	r0, [pc, #48]	@ (8000498 <MX_TIM3_Init+0xa0>)
 8000466:	f001 fd02 	bl	8001e6e <HAL_TIM_Encoder_Init>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000470:	f000 f90e 	bl	8000690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000474:	2300      	movs	r3, #0
 8000476:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000478:	2300      	movs	r3, #0
 800047a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800047c:	1d3b      	adds	r3, r7, #4
 800047e:	4619      	mov	r1, r3
 8000480:	4805      	ldr	r0, [pc, #20]	@ (8000498 <MX_TIM3_Init+0xa0>)
 8000482:	f002 f9ad 	bl	80027e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800048c:	f000 f900 	bl	8000690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000490:	bf00      	nop
 8000492:	3730      	adds	r7, #48	@ 0x30
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	200000a0 	.word	0x200000a0
 800049c:	40000400 	.word	0x40000400

080004a0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b08c      	sub	sp, #48	@ 0x30
 80004a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80004a6:	f107 030c 	add.w	r3, r7, #12
 80004aa:	2224      	movs	r2, #36	@ 0x24
 80004ac:	2100      	movs	r1, #0
 80004ae:	4618      	mov	r0, r3
 80004b0:	f002 f9f4 	bl	800289c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
 80004ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80004bc:	4b20      	ldr	r3, [pc, #128]	@ (8000540 <MX_TIM4_Init+0xa0>)
 80004be:	4a21      	ldr	r2, [pc, #132]	@ (8000544 <MX_TIM4_Init+0xa4>)
 80004c0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80004c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000540 <MX_TIM4_Init+0xa0>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004c8:	4b1d      	ldr	r3, [pc, #116]	@ (8000540 <MX_TIM4_Init+0xa0>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80004ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000540 <MX_TIM4_Init+0xa0>)
 80004d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80004d4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000540 <MX_TIM4_Init+0xa0>)
 80004d8:	2200      	movs	r2, #0
 80004da:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004dc:	4b18      	ldr	r3, [pc, #96]	@ (8000540 <MX_TIM4_Init+0xa0>)
 80004de:	2200      	movs	r2, #0
 80004e0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80004e2:	2301      	movs	r3, #1
 80004e4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80004e6:	2300      	movs	r3, #0
 80004e8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80004ea:	2301      	movs	r3, #1
 80004ec:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80004ee:	2300      	movs	r3, #0
 80004f0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80004f2:	2300      	movs	r3, #0
 80004f4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80004f6:	2300      	movs	r3, #0
 80004f8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80004fa:	2301      	movs	r3, #1
 80004fc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80004fe:	2300      	movs	r3, #0
 8000500:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000502:	2300      	movs	r3, #0
 8000504:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000506:	f107 030c 	add.w	r3, r7, #12
 800050a:	4619      	mov	r1, r3
 800050c:	480c      	ldr	r0, [pc, #48]	@ (8000540 <MX_TIM4_Init+0xa0>)
 800050e:	f001 fcae 	bl	8001e6e <HAL_TIM_Encoder_Init>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000518:	f000 f8ba 	bl	8000690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800051c:	2300      	movs	r3, #0
 800051e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000520:	2300      	movs	r3, #0
 8000522:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000524:	1d3b      	adds	r3, r7, #4
 8000526:	4619      	mov	r1, r3
 8000528:	4805      	ldr	r0, [pc, #20]	@ (8000540 <MX_TIM4_Init+0xa0>)
 800052a:	f002 f959 	bl	80027e0 <HAL_TIMEx_MasterConfigSynchronization>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000534:	f000 f8ac 	bl	8000690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000538:	bf00      	nop
 800053a:	3730      	adds	r7, #48	@ 0x30
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	200000e8 	.word	0x200000e8
 8000544:	40000800 	.word	0x40000800

08000548 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b088      	sub	sp, #32
 800054c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054e:	f107 0310 	add.w	r3, r7, #16
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
 800055a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800055c:	4b48      	ldr	r3, [pc, #288]	@ (8000680 <MX_GPIO_Init+0x138>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	4a47      	ldr	r2, [pc, #284]	@ (8000680 <MX_GPIO_Init+0x138>)
 8000562:	f043 0310 	orr.w	r3, r3, #16
 8000566:	6193      	str	r3, [r2, #24]
 8000568:	4b45      	ldr	r3, [pc, #276]	@ (8000680 <MX_GPIO_Init+0x138>)
 800056a:	699b      	ldr	r3, [r3, #24]
 800056c:	f003 0310 	and.w	r3, r3, #16
 8000570:	60fb      	str	r3, [r7, #12]
 8000572:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000574:	4b42      	ldr	r3, [pc, #264]	@ (8000680 <MX_GPIO_Init+0x138>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	4a41      	ldr	r2, [pc, #260]	@ (8000680 <MX_GPIO_Init+0x138>)
 800057a:	f043 0320 	orr.w	r3, r3, #32
 800057e:	6193      	str	r3, [r2, #24]
 8000580:	4b3f      	ldr	r3, [pc, #252]	@ (8000680 <MX_GPIO_Init+0x138>)
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	f003 0320 	and.w	r3, r3, #32
 8000588:	60bb      	str	r3, [r7, #8]
 800058a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800058c:	4b3c      	ldr	r3, [pc, #240]	@ (8000680 <MX_GPIO_Init+0x138>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	4a3b      	ldr	r2, [pc, #236]	@ (8000680 <MX_GPIO_Init+0x138>)
 8000592:	f043 0304 	orr.w	r3, r3, #4
 8000596:	6193      	str	r3, [r2, #24]
 8000598:	4b39      	ldr	r3, [pc, #228]	@ (8000680 <MX_GPIO_Init+0x138>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	f003 0304 	and.w	r3, r3, #4
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a4:	4b36      	ldr	r3, [pc, #216]	@ (8000680 <MX_GPIO_Init+0x138>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	4a35      	ldr	r2, [pc, #212]	@ (8000680 <MX_GPIO_Init+0x138>)
 80005aa:	f043 0308 	orr.w	r3, r3, #8
 80005ae:	6193      	str	r3, [r2, #24]
 80005b0:	4b33      	ldr	r3, [pc, #204]	@ (8000680 <MX_GPIO_Init+0x138>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	f003 0308 	and.w	r3, r3, #8
 80005b8:	603b      	str	r3, [r7, #0]
 80005ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BLE_STATE_Pin|ML_FWD_Pin|LED_RED_Pin|LED_BLUE_Pin
 80005bc:	2200      	movs	r2, #0
 80005be:	f649 1101 	movw	r1, #39169	@ 0x9901
 80005c2:	4830      	ldr	r0, [pc, #192]	@ (8000684 <MX_GPIO_Init+0x13c>)
 80005c4:	f000 ff00 	bl	80013c8 <HAL_GPIO_WritePin>
                          |LED_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EMIT_SR_Pin|EMIT_FL_Pin|EMIT_SL_Pin|MR_FWD_Pin
 80005c8:	2200      	movs	r2, #0
 80005ca:	f64f 5128 	movw	r1, #64808	@ 0xfd28
 80005ce:	482e      	ldr	r0, [pc, #184]	@ (8000688 <MX_GPIO_Init+0x140>)
 80005d0:	f000 fefa 	bl	80013c8 <HAL_GPIO_WritePin>
                          |ML_BWD_Pin|MR_BWD_Pin|SWO_Pin|EMIT_FR_Pin
                          |BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80005d4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80005d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005e2:	f107 0310 	add.w	r3, r7, #16
 80005e6:	4619      	mov	r1, r3
 80005e8:	4828      	ldr	r0, [pc, #160]	@ (800068c <MX_GPIO_Init+0x144>)
 80005ea:	f000 fd69 	bl	80010c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLE_STATE_Pin ML_FWD_Pin LED_RED_Pin LED_BLUE_Pin
                           LED_GREEN_Pin */
  GPIO_InitStruct.Pin = BLE_STATE_Pin|ML_FWD_Pin|LED_RED_Pin|LED_BLUE_Pin
 80005ee:	f649 1301 	movw	r3, #39169	@ 0x9901
 80005f2:	613b      	str	r3, [r7, #16]
                          |LED_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f4:	2301      	movs	r3, #1
 80005f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fc:	2302      	movs	r3, #2
 80005fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000600:	f107 0310 	add.w	r3, r7, #16
 8000604:	4619      	mov	r1, r3
 8000606:	481f      	ldr	r0, [pc, #124]	@ (8000684 <MX_GPIO_Init+0x13c>)
 8000608:	f000 fd5a 	bl	80010c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : EMIT_SR_Pin EMIT_FL_Pin EMIT_SL_Pin MR_FWD_Pin
                           ML_BWD_Pin MR_BWD_Pin SWO_Pin EMIT_FR_Pin
                           BUZZER_Pin */
  GPIO_InitStruct.Pin = EMIT_SR_Pin|EMIT_FL_Pin|EMIT_SL_Pin|MR_FWD_Pin
 800060c:	f64f 5328 	movw	r3, #64808	@ 0xfd28
 8000610:	613b      	str	r3, [r7, #16]
                          |ML_BWD_Pin|MR_BWD_Pin|SWO_Pin|EMIT_FR_Pin
                          |BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000612:	2301      	movs	r3, #1
 8000614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061a:	2302      	movs	r3, #2
 800061c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800061e:	f107 0310 	add.w	r3, r7, #16
 8000622:	4619      	mov	r1, r3
 8000624:	4818      	ldr	r0, [pc, #96]	@ (8000688 <MX_GPIO_Init+0x140>)
 8000626:	f000 fd4b 	bl	80010c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800062a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800062e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000630:	2302      	movs	r3, #2
 8000632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000634:	2303      	movs	r3, #3
 8000636:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000638:	f107 0310 	add.w	r3, r7, #16
 800063c:	4619      	mov	r1, r3
 800063e:	4811      	ldr	r0, [pc, #68]	@ (8000684 <MX_GPIO_Init+0x13c>)
 8000640:	f000 fd3e 	bl	80010c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000644:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000648:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064e:	2300      	movs	r3, #0
 8000650:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000652:	f107 0310 	add.w	r3, r7, #16
 8000656:	4619      	mov	r1, r3
 8000658:	480a      	ldr	r0, [pc, #40]	@ (8000684 <MX_GPIO_Init+0x13c>)
 800065a:	f000 fd31 	bl	80010c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800065e:	2310      	movs	r3, #16
 8000660:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000662:	2300      	movs	r3, #0
 8000664:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800066a:	f107 0310 	add.w	r3, r7, #16
 800066e:	4619      	mov	r1, r3
 8000670:	4805      	ldr	r0, [pc, #20]	@ (8000688 <MX_GPIO_Init+0x140>)
 8000672:	f000 fd25 	bl	80010c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000676:	bf00      	nop
 8000678:	3720      	adds	r7, #32
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40021000 	.word	0x40021000
 8000684:	40010800 	.word	0x40010800
 8000688:	40010c00 	.word	0x40010c00
 800068c:	40011000 	.word	0x40011000

08000690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000694:	b672      	cpsid	i
}
 8000696:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000698:	bf00      	nop
 800069a:	e7fd      	b.n	8000698 <Error_Handler+0x8>

0800069c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006a2:	4b15      	ldr	r3, [pc, #84]	@ (80006f8 <HAL_MspInit+0x5c>)
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	4a14      	ldr	r2, [pc, #80]	@ (80006f8 <HAL_MspInit+0x5c>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	6193      	str	r3, [r2, #24]
 80006ae:	4b12      	ldr	r3, [pc, #72]	@ (80006f8 <HAL_MspInit+0x5c>)
 80006b0:	699b      	ldr	r3, [r3, #24]
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ba:	4b0f      	ldr	r3, [pc, #60]	@ (80006f8 <HAL_MspInit+0x5c>)
 80006bc:	69db      	ldr	r3, [r3, #28]
 80006be:	4a0e      	ldr	r2, [pc, #56]	@ (80006f8 <HAL_MspInit+0x5c>)
 80006c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006c4:	61d3      	str	r3, [r2, #28]
 80006c6:	4b0c      	ldr	r3, [pc, #48]	@ (80006f8 <HAL_MspInit+0x5c>)
 80006c8:	69db      	ldr	r3, [r3, #28]
 80006ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006d2:	4b0a      	ldr	r3, [pc, #40]	@ (80006fc <HAL_MspInit+0x60>)
 80006d4:	685b      	ldr	r3, [r3, #4]
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	4a04      	ldr	r2, [pc, #16]	@ (80006fc <HAL_MspInit+0x60>)
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ee:	bf00      	nop
 80006f0:	3714      	adds	r7, #20
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr
 80006f8:	40021000 	.word	0x40021000
 80006fc:	40010000 	.word	0x40010000

08000700 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08a      	sub	sp, #40	@ 0x28
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000708:	f107 0318 	add.w	r3, r7, #24
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a1f      	ldr	r2, [pc, #124]	@ (8000798 <HAL_ADC_MspInit+0x98>)
 800071c:	4293      	cmp	r3, r2
 800071e:	d137      	bne.n	8000790 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000720:	4b1e      	ldr	r3, [pc, #120]	@ (800079c <HAL_ADC_MspInit+0x9c>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	4a1d      	ldr	r2, [pc, #116]	@ (800079c <HAL_ADC_MspInit+0x9c>)
 8000726:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800072a:	6193      	str	r3, [r2, #24]
 800072c:	4b1b      	ldr	r3, [pc, #108]	@ (800079c <HAL_ADC_MspInit+0x9c>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000734:	617b      	str	r3, [r7, #20]
 8000736:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000738:	4b18      	ldr	r3, [pc, #96]	@ (800079c <HAL_ADC_MspInit+0x9c>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	4a17      	ldr	r2, [pc, #92]	@ (800079c <HAL_ADC_MspInit+0x9c>)
 800073e:	f043 0304 	orr.w	r3, r3, #4
 8000742:	6193      	str	r3, [r2, #24]
 8000744:	4b15      	ldr	r3, [pc, #84]	@ (800079c <HAL_ADC_MspInit+0x9c>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	f003 0304 	and.w	r3, r3, #4
 800074c:	613b      	str	r3, [r7, #16]
 800074e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000750:	4b12      	ldr	r3, [pc, #72]	@ (800079c <HAL_ADC_MspInit+0x9c>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	4a11      	ldr	r2, [pc, #68]	@ (800079c <HAL_ADC_MspInit+0x9c>)
 8000756:	f043 0308 	orr.w	r3, r3, #8
 800075a:	6193      	str	r3, [r2, #24]
 800075c:	4b0f      	ldr	r3, [pc, #60]	@ (800079c <HAL_ADC_MspInit+0x9c>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	f003 0308 	and.w	r3, r3, #8
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|REC_FR_Pin|REC_SR_Pin;
 8000768:	2332      	movs	r3, #50	@ 0x32
 800076a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800076c:	2303      	movs	r3, #3
 800076e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000770:	f107 0318 	add.w	r3, r7, #24
 8000774:	4619      	mov	r1, r3
 8000776:	480a      	ldr	r0, [pc, #40]	@ (80007a0 <HAL_ADC_MspInit+0xa0>)
 8000778:	f000 fca2 	bl	80010c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = REC_FL_Pin|REC_SL_Pin;
 800077c:	2303      	movs	r3, #3
 800077e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000780:	2303      	movs	r3, #3
 8000782:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000784:	f107 0318 	add.w	r3, r7, #24
 8000788:	4619      	mov	r1, r3
 800078a:	4806      	ldr	r0, [pc, #24]	@ (80007a4 <HAL_ADC_MspInit+0xa4>)
 800078c:	f000 fc98 	bl	80010c0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000790:	bf00      	nop
 8000792:	3728      	adds	r7, #40	@ 0x28
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40012400 	.word	0x40012400
 800079c:	40021000 	.word	0x40021000
 80007a0:	40010800 	.word	0x40010800
 80007a4:	40010c00 	.word	0x40010c00

080007a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80007b8:	d10b      	bne.n	80007d2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007ba:	4b08      	ldr	r3, [pc, #32]	@ (80007dc <HAL_TIM_Base_MspInit+0x34>)
 80007bc:	69db      	ldr	r3, [r3, #28]
 80007be:	4a07      	ldr	r2, [pc, #28]	@ (80007dc <HAL_TIM_Base_MspInit+0x34>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	61d3      	str	r3, [r2, #28]
 80007c6:	4b05      	ldr	r3, [pc, #20]	@ (80007dc <HAL_TIM_Base_MspInit+0x34>)
 80007c8:	69db      	ldr	r3, [r3, #28]
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80007d2:	bf00      	nop
 80007d4:	3714      	adds	r7, #20
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr
 80007dc:	40021000 	.word	0x40021000

080007e0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	@ 0x28
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e8:	f107 0318 	add.w	r3, r7, #24
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a2a      	ldr	r2, [pc, #168]	@ (80008a4 <HAL_TIM_Encoder_MspInit+0xc4>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d124      	bne.n	800084a <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000800:	4b29      	ldr	r3, [pc, #164]	@ (80008a8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000802:	69db      	ldr	r3, [r3, #28]
 8000804:	4a28      	ldr	r2, [pc, #160]	@ (80008a8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000806:	f043 0302 	orr.w	r3, r3, #2
 800080a:	61d3      	str	r3, [r2, #28]
 800080c:	4b26      	ldr	r3, [pc, #152]	@ (80008a8 <HAL_TIM_Encoder_MspInit+0xc8>)
 800080e:	69db      	ldr	r3, [r3, #28]
 8000810:	f003 0302 	and.w	r3, r3, #2
 8000814:	617b      	str	r3, [r7, #20]
 8000816:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000818:	4b23      	ldr	r3, [pc, #140]	@ (80008a8 <HAL_TIM_Encoder_MspInit+0xc8>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	4a22      	ldr	r2, [pc, #136]	@ (80008a8 <HAL_TIM_Encoder_MspInit+0xc8>)
 800081e:	f043 0304 	orr.w	r3, r3, #4
 8000822:	6193      	str	r3, [r2, #24]
 8000824:	4b20      	ldr	r3, [pc, #128]	@ (80008a8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	f003 0304 	and.w	r3, r3, #4
 800082c:	613b      	str	r3, [r7, #16]
 800082e:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000830:	23c0      	movs	r3, #192	@ 0xc0
 8000832:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083c:	f107 0318 	add.w	r3, r7, #24
 8000840:	4619      	mov	r1, r3
 8000842:	481a      	ldr	r0, [pc, #104]	@ (80008ac <HAL_TIM_Encoder_MspInit+0xcc>)
 8000844:	f000 fc3c 	bl	80010c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000848:	e028      	b.n	800089c <HAL_TIM_Encoder_MspInit+0xbc>
  else if(htim_encoder->Instance==TIM4)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a18      	ldr	r2, [pc, #96]	@ (80008b0 <HAL_TIM_Encoder_MspInit+0xd0>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d123      	bne.n	800089c <HAL_TIM_Encoder_MspInit+0xbc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000854:	4b14      	ldr	r3, [pc, #80]	@ (80008a8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000856:	69db      	ldr	r3, [r3, #28]
 8000858:	4a13      	ldr	r2, [pc, #76]	@ (80008a8 <HAL_TIM_Encoder_MspInit+0xc8>)
 800085a:	f043 0304 	orr.w	r3, r3, #4
 800085e:	61d3      	str	r3, [r2, #28]
 8000860:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000862:	69db      	ldr	r3, [r3, #28]
 8000864:	f003 0304 	and.w	r3, r3, #4
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800086c:	4b0e      	ldr	r3, [pc, #56]	@ (80008a8 <HAL_TIM_Encoder_MspInit+0xc8>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	4a0d      	ldr	r2, [pc, #52]	@ (80008a8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000872:	f043 0308 	orr.w	r3, r3, #8
 8000876:	6193      	str	r3, [r2, #24]
 8000878:	4b0b      	ldr	r3, [pc, #44]	@ (80008a8 <HAL_TIM_Encoder_MspInit+0xc8>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	f003 0308 	and.w	r3, r3, #8
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000884:	23c0      	movs	r3, #192	@ 0xc0
 8000886:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000888:	2300      	movs	r3, #0
 800088a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000890:	f107 0318 	add.w	r3, r7, #24
 8000894:	4619      	mov	r1, r3
 8000896:	4807      	ldr	r0, [pc, #28]	@ (80008b4 <HAL_TIM_Encoder_MspInit+0xd4>)
 8000898:	f000 fc12 	bl	80010c0 <HAL_GPIO_Init>
}
 800089c:	bf00      	nop
 800089e:	3728      	adds	r7, #40	@ 0x28
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40000400 	.word	0x40000400
 80008a8:	40021000 	.word	0x40021000
 80008ac:	40010800 	.word	0x40010800
 80008b0:	40000800 	.word	0x40000800
 80008b4:	40010c00 	.word	0x40010c00

080008b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b088      	sub	sp, #32
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c0:	f107 0310 	add.w	r3, r7, #16
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80008d6:	d117      	bne.n	8000908 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000910 <HAL_TIM_MspPostInit+0x58>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	4a0c      	ldr	r2, [pc, #48]	@ (8000910 <HAL_TIM_MspPostInit+0x58>)
 80008de:	f043 0304 	orr.w	r3, r3, #4
 80008e2:	6193      	str	r3, [r2, #24]
 80008e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000910 <HAL_TIM_MspPostInit+0x58>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	f003 0304 	and.w	r3, r3, #4
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008f0:	230c      	movs	r3, #12
 80008f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f4:	2302      	movs	r3, #2
 80008f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2302      	movs	r3, #2
 80008fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	f107 0310 	add.w	r3, r7, #16
 8000900:	4619      	mov	r1, r3
 8000902:	4804      	ldr	r0, [pc, #16]	@ (8000914 <HAL_TIM_MspPostInit+0x5c>)
 8000904:	f000 fbdc 	bl	80010c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000908:	bf00      	nop
 800090a:	3720      	adds	r7, #32
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40021000 	.word	0x40021000
 8000914:	40010800 	.word	0x40010800

08000918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <NMI_Handler+0x4>

08000920 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000924:	bf00      	nop
 8000926:	e7fd      	b.n	8000924 <HardFault_Handler+0x4>

08000928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <MemManage_Handler+0x4>

08000930 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <BusFault_Handler+0x4>

08000938 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <UsageFault_Handler+0x4>

08000940 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr

0800094c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr

08000958 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr

08000964 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000968:	f000 f874 	bl	8000a54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}

08000970 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr

0800097c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800097c:	f7ff fff8 	bl	8000970 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000980:	480b      	ldr	r0, [pc, #44]	@ (80009b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000982:	490c      	ldr	r1, [pc, #48]	@ (80009b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000984:	4a0c      	ldr	r2, [pc, #48]	@ (80009b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000988:	e002      	b.n	8000990 <LoopCopyDataInit>

0800098a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800098c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800098e:	3304      	adds	r3, #4

08000990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000994:	d3f9      	bcc.n	800098a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000996:	4a09      	ldr	r2, [pc, #36]	@ (80009bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000998:	4c09      	ldr	r4, [pc, #36]	@ (80009c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800099a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800099c:	e001      	b.n	80009a2 <LoopFillZerobss>

0800099e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800099e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a0:	3204      	adds	r2, #4

080009a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a4:	d3fb      	bcc.n	800099e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009a6:	f001 ff81 	bl	80028ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009aa:	f7ff fbcf 	bl	800014c <main>
  bx lr
 80009ae:	4770      	bx	lr
  ldr r0, =_sdata
 80009b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009b8:	08002938 	.word	0x08002938
  ldr r2, =_sbss
 80009bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009c0:	20000134 	.word	0x20000134

080009c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009c4:	e7fe      	b.n	80009c4 <ADC1_2_IRQHandler>
	...

080009c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009cc:	4b08      	ldr	r3, [pc, #32]	@ (80009f0 <HAL_Init+0x28>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a07      	ldr	r2, [pc, #28]	@ (80009f0 <HAL_Init+0x28>)
 80009d2:	f043 0310 	orr.w	r3, r3, #16
 80009d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d8:	2003      	movs	r0, #3
 80009da:	f000 fb3d 	bl	8001058 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009de:	200f      	movs	r0, #15
 80009e0:	f000 f808 	bl	80009f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009e4:	f7ff fe5a 	bl	800069c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009e8:	2300      	movs	r3, #0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40022000 	.word	0x40022000

080009f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009fc:	4b12      	ldr	r3, [pc, #72]	@ (8000a48 <HAL_InitTick+0x54>)
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	4b12      	ldr	r3, [pc, #72]	@ (8000a4c <HAL_InitTick+0x58>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	4619      	mov	r1, r3
 8000a06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a12:	4618      	mov	r0, r3
 8000a14:	f000 fb47 	bl	80010a6 <HAL_SYSTICK_Config>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e00e      	b.n	8000a40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2b0f      	cmp	r3, #15
 8000a26:	d80a      	bhi.n	8000a3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	6879      	ldr	r1, [r7, #4]
 8000a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a30:	f000 fb1d 	bl	800106e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a34:	4a06      	ldr	r2, [pc, #24]	@ (8000a50 <HAL_InitTick+0x5c>)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	e000      	b.n	8000a40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000000 	.word	0x20000000
 8000a4c:	20000008 	.word	0x20000008
 8000a50:	20000004 	.word	0x20000004

08000a54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a58:	4b05      	ldr	r3, [pc, #20]	@ (8000a70 <HAL_IncTick+0x1c>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4b05      	ldr	r3, [pc, #20]	@ (8000a74 <HAL_IncTick+0x20>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4413      	add	r3, r2
 8000a64:	4a03      	ldr	r2, [pc, #12]	@ (8000a74 <HAL_IncTick+0x20>)
 8000a66:	6013      	str	r3, [r2, #0]
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr
 8000a70:	20000008 	.word	0x20000008
 8000a74:	20000130 	.word	0x20000130

08000a78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a7c:	4b02      	ldr	r3, [pc, #8]	@ (8000a88 <HAL_GetTick+0x10>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr
 8000a88:	20000130 	.word	0x20000130

08000a8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a94:	f7ff fff0 	bl	8000a78 <HAL_GetTick>
 8000a98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa4:	d005      	beq.n	8000ab2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad0 <HAL_Delay+0x44>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	4413      	add	r3, r2
 8000ab0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ab2:	bf00      	nop
 8000ab4:	f7ff ffe0 	bl	8000a78 <HAL_GetTick>
 8000ab8:	4602      	mov	r2, r0
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	68fa      	ldr	r2, [r7, #12]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d8f7      	bhi.n	8000ab4 <HAL_Delay+0x28>
  {
  }
}
 8000ac4:	bf00      	nop
 8000ac6:	bf00      	nop
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000008 	.word	0x20000008

08000ad4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000adc:	2300      	movs	r3, #0
 8000ade:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d101      	bne.n	8000af6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
 8000af4:	e0be      	b.n	8000c74 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	689b      	ldr	r3, [r3, #8]
 8000afa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d109      	bne.n	8000b18 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2200      	movs	r2, #0
 8000b08:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f7ff fdf4 	bl	8000700 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f000 f9ab 	bl	8000e74 <ADC_ConversionStop_Disable>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b26:	f003 0310 	and.w	r3, r3, #16
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	f040 8099 	bne.w	8000c62 <HAL_ADC_Init+0x18e>
 8000b30:	7dfb      	ldrb	r3, [r7, #23]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	f040 8095 	bne.w	8000c62 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b3c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000b40:	f023 0302 	bic.w	r3, r3, #2
 8000b44:	f043 0202 	orr.w	r2, r3, #2
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b54:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	7b1b      	ldrb	r3, [r3, #12]
 8000b5a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b5c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b5e:	68ba      	ldr	r2, [r7, #8]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000b6c:	d003      	beq.n	8000b76 <HAL_ADC_Init+0xa2>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	689b      	ldr	r3, [r3, #8]
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d102      	bne.n	8000b7c <HAL_ADC_Init+0xa8>
 8000b76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b7a:	e000      	b.n	8000b7e <HAL_ADC_Init+0xaa>
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	7d1b      	ldrb	r3, [r3, #20]
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d119      	bne.n	8000bc0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	7b1b      	ldrb	r3, [r3, #12]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d109      	bne.n	8000ba8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	035a      	lsls	r2, r3, #13
 8000b9c:	693b      	ldr	r3, [r7, #16]
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	e00b      	b.n	8000bc0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bac:	f043 0220 	orr.w	r2, r3, #32
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bb8:	f043 0201 	orr.w	r2, r3, #1
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	430a      	orrs	r2, r1
 8000bd2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	689a      	ldr	r2, [r3, #8]
 8000bda:	4b28      	ldr	r3, [pc, #160]	@ (8000c7c <HAL_ADC_Init+0x1a8>)
 8000bdc:	4013      	ands	r3, r2
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	6812      	ldr	r2, [r2, #0]
 8000be2:	68b9      	ldr	r1, [r7, #8]
 8000be4:	430b      	orrs	r3, r1
 8000be6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000bf0:	d003      	beq.n	8000bfa <HAL_ADC_Init+0x126>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	689b      	ldr	r3, [r3, #8]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d104      	bne.n	8000c04 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	691b      	ldr	r3, [r3, #16]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	051b      	lsls	r3, r3, #20
 8000c02:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c0a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	68fa      	ldr	r2, [r7, #12]
 8000c14:	430a      	orrs	r2, r1
 8000c16:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	689a      	ldr	r2, [r3, #8]
 8000c1e:	4b18      	ldr	r3, [pc, #96]	@ (8000c80 <HAL_ADC_Init+0x1ac>)
 8000c20:	4013      	ands	r3, r2
 8000c22:	68ba      	ldr	r2, [r7, #8]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d10b      	bne.n	8000c40 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c32:	f023 0303 	bic.w	r3, r3, #3
 8000c36:	f043 0201 	orr.w	r2, r3, #1
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c3e:	e018      	b.n	8000c72 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c44:	f023 0312 	bic.w	r3, r3, #18
 8000c48:	f043 0210 	orr.w	r2, r3, #16
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c54:	f043 0201 	orr.w	r2, r3, #1
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c60:	e007      	b.n	8000c72 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c66:	f043 0210 	orr.w	r2, r3, #16
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c72:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3718      	adds	r7, #24
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	ffe1f7fd 	.word	0xffe1f7fd
 8000c80:	ff1f0efe 	.word	0xff1f0efe

08000c84 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000c92:	2300      	movs	r3, #0
 8000c94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d101      	bne.n	8000ca4 <HAL_ADC_ConfigChannel+0x20>
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	e0dc      	b.n	8000e5e <HAL_ADC_ConfigChannel+0x1da>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	2b06      	cmp	r3, #6
 8000cb2:	d81c      	bhi.n	8000cee <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685a      	ldr	r2, [r3, #4]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	4413      	add	r3, r2
 8000cc4:	3b05      	subs	r3, #5
 8000cc6:	221f      	movs	r2, #31
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	4019      	ands	r1, r3
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	6818      	ldr	r0, [r3, #0]
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685a      	ldr	r2, [r3, #4]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	4413      	add	r3, r2
 8000cde:	3b05      	subs	r3, #5
 8000ce0:	fa00 f203 	lsl.w	r2, r0, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	430a      	orrs	r2, r1
 8000cea:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cec:	e03c      	b.n	8000d68 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	2b0c      	cmp	r3, #12
 8000cf4:	d81c      	bhi.n	8000d30 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685a      	ldr	r2, [r3, #4]
 8000d00:	4613      	mov	r3, r2
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	4413      	add	r3, r2
 8000d06:	3b23      	subs	r3, #35	@ 0x23
 8000d08:	221f      	movs	r2, #31
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	4019      	ands	r1, r3
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	6818      	ldr	r0, [r3, #0]
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685a      	ldr	r2, [r3, #4]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	4413      	add	r3, r2
 8000d20:	3b23      	subs	r3, #35	@ 0x23
 8000d22:	fa00 f203 	lsl.w	r2, r0, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	430a      	orrs	r2, r1
 8000d2c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d2e:	e01b      	b.n	8000d68 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685a      	ldr	r2, [r3, #4]
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	4413      	add	r3, r2
 8000d40:	3b41      	subs	r3, #65	@ 0x41
 8000d42:	221f      	movs	r2, #31
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	4019      	ands	r1, r3
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	6818      	ldr	r0, [r3, #0]
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685a      	ldr	r2, [r3, #4]
 8000d54:	4613      	mov	r3, r2
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	4413      	add	r3, r2
 8000d5a:	3b41      	subs	r3, #65	@ 0x41
 8000d5c:	fa00 f203 	lsl.w	r2, r0, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	430a      	orrs	r2, r1
 8000d66:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b09      	cmp	r3, #9
 8000d6e:	d91c      	bls.n	8000daa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	68d9      	ldr	r1, [r3, #12]
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	4413      	add	r3, r2
 8000d80:	3b1e      	subs	r3, #30
 8000d82:	2207      	movs	r2, #7
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	4019      	ands	r1, r3
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	6898      	ldr	r0, [r3, #8]
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	4613      	mov	r3, r2
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	4413      	add	r3, r2
 8000d9a:	3b1e      	subs	r3, #30
 8000d9c:	fa00 f203 	lsl.w	r2, r0, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	430a      	orrs	r2, r1
 8000da6:	60da      	str	r2, [r3, #12]
 8000da8:	e019      	b.n	8000dde <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	6919      	ldr	r1, [r3, #16]
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	4613      	mov	r3, r2
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	4413      	add	r3, r2
 8000dba:	2207      	movs	r2, #7
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	4019      	ands	r1, r3
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	6898      	ldr	r0, [r3, #8]
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4613      	mov	r3, r2
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	4413      	add	r3, r2
 8000dd2:	fa00 f203 	lsl.w	r2, r0, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2b10      	cmp	r3, #16
 8000de4:	d003      	beq.n	8000dee <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000dea:	2b11      	cmp	r3, #17
 8000dec:	d132      	bne.n	8000e54 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a1d      	ldr	r2, [pc, #116]	@ (8000e68 <HAL_ADC_ConfigChannel+0x1e4>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d125      	bne.n	8000e44 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d126      	bne.n	8000e54 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	689a      	ldr	r2, [r3, #8]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000e14:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2b10      	cmp	r3, #16
 8000e1c:	d11a      	bne.n	8000e54 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e1e:	4b13      	ldr	r3, [pc, #76]	@ (8000e6c <HAL_ADC_ConfigChannel+0x1e8>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a13      	ldr	r2, [pc, #76]	@ (8000e70 <HAL_ADC_ConfigChannel+0x1ec>)
 8000e24:	fba2 2303 	umull	r2, r3, r2, r3
 8000e28:	0c9a      	lsrs	r2, r3, #18
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	4413      	add	r3, r2
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e34:	e002      	b.n	8000e3c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d1f9      	bne.n	8000e36 <HAL_ADC_ConfigChannel+0x1b2>
 8000e42:	e007      	b.n	8000e54 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e48:	f043 0220 	orr.w	r2, r3, #32
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2200      	movs	r2, #0
 8000e58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3714      	adds	r7, #20
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr
 8000e68:	40012400 	.word	0x40012400
 8000e6c:	20000000 	.word	0x20000000
 8000e70:	431bde83 	.word	0x431bde83

08000e74 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d12e      	bne.n	8000eec <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	689a      	ldr	r2, [r3, #8]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f022 0201 	bic.w	r2, r2, #1
 8000e9c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000e9e:	f7ff fdeb 	bl	8000a78 <HAL_GetTick>
 8000ea2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ea4:	e01b      	b.n	8000ede <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000ea6:	f7ff fde7 	bl	8000a78 <HAL_GetTick>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	1ad3      	subs	r3, r2, r3
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d914      	bls.n	8000ede <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d10d      	bne.n	8000ede <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ec6:	f043 0210 	orr.w	r2, r3, #16
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ed2:	f043 0201 	orr.w	r2, r3, #1
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e007      	b.n	8000eee <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	f003 0301 	and.w	r3, r3, #1
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d0dc      	beq.n	8000ea6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f08:	4b0c      	ldr	r3, [pc, #48]	@ (8000f3c <__NVIC_SetPriorityGrouping+0x44>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f14:	4013      	ands	r3, r2
 8000f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2a:	4a04      	ldr	r2, [pc, #16]	@ (8000f3c <__NVIC_SetPriorityGrouping+0x44>)
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	60d3      	str	r3, [r2, #12]
}
 8000f30:	bf00      	nop
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bc80      	pop	{r7}
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f44:	4b04      	ldr	r3, [pc, #16]	@ (8000f58 <__NVIC_GetPriorityGrouping+0x18>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	0a1b      	lsrs	r3, r3, #8
 8000f4a:	f003 0307 	and.w	r3, r3, #7
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bc80      	pop	{r7}
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	6039      	str	r1, [r7, #0]
 8000f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	db0a      	blt.n	8000f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	490c      	ldr	r1, [pc, #48]	@ (8000fa8 <__NVIC_SetPriority+0x4c>)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	0112      	lsls	r2, r2, #4
 8000f7c:	b2d2      	uxtb	r2, r2
 8000f7e:	440b      	add	r3, r1
 8000f80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f84:	e00a      	b.n	8000f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	4908      	ldr	r1, [pc, #32]	@ (8000fac <__NVIC_SetPriority+0x50>)
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	f003 030f 	and.w	r3, r3, #15
 8000f92:	3b04      	subs	r3, #4
 8000f94:	0112      	lsls	r2, r2, #4
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	440b      	add	r3, r1
 8000f9a:	761a      	strb	r2, [r3, #24]
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	e000e100 	.word	0xe000e100
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b089      	sub	sp, #36	@ 0x24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	f1c3 0307 	rsb	r3, r3, #7
 8000fca:	2b04      	cmp	r3, #4
 8000fcc:	bf28      	it	cs
 8000fce:	2304      	movcs	r3, #4
 8000fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	2b06      	cmp	r3, #6
 8000fd8:	d902      	bls.n	8000fe0 <NVIC_EncodePriority+0x30>
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3b03      	subs	r3, #3
 8000fde:	e000      	b.n	8000fe2 <NVIC_EncodePriority+0x32>
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43da      	mvns	r2, r3
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8001002:	43d9      	mvns	r1, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001008:	4313      	orrs	r3, r2
         );
}
 800100a:	4618      	mov	r0, r3
 800100c:	3724      	adds	r7, #36	@ 0x24
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr

08001014 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3b01      	subs	r3, #1
 8001020:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001024:	d301      	bcc.n	800102a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001026:	2301      	movs	r3, #1
 8001028:	e00f      	b.n	800104a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800102a:	4a0a      	ldr	r2, [pc, #40]	@ (8001054 <SysTick_Config+0x40>)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3b01      	subs	r3, #1
 8001030:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001032:	210f      	movs	r1, #15
 8001034:	f04f 30ff 	mov.w	r0, #4294967295
 8001038:	f7ff ff90 	bl	8000f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800103c:	4b05      	ldr	r3, [pc, #20]	@ (8001054 <SysTick_Config+0x40>)
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001042:	4b04      	ldr	r3, [pc, #16]	@ (8001054 <SysTick_Config+0x40>)
 8001044:	2207      	movs	r2, #7
 8001046:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	e000e010 	.word	0xe000e010

08001058 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff ff49 	bl	8000ef8 <__NVIC_SetPriorityGrouping>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800106e:	b580      	push	{r7, lr}
 8001070:	b086      	sub	sp, #24
 8001072:	af00      	add	r7, sp, #0
 8001074:	4603      	mov	r3, r0
 8001076:	60b9      	str	r1, [r7, #8]
 8001078:	607a      	str	r2, [r7, #4]
 800107a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001080:	f7ff ff5e 	bl	8000f40 <__NVIC_GetPriorityGrouping>
 8001084:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	68b9      	ldr	r1, [r7, #8]
 800108a:	6978      	ldr	r0, [r7, #20]
 800108c:	f7ff ff90 	bl	8000fb0 <NVIC_EncodePriority>
 8001090:	4602      	mov	r2, r0
 8001092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001096:	4611      	mov	r1, r2
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff5f 	bl	8000f5c <__NVIC_SetPriority>
}
 800109e:	bf00      	nop
 80010a0:	3718      	adds	r7, #24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff ffb0 	bl	8001014 <SysTick_Config>
 80010b4:	4603      	mov	r3, r0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b08b      	sub	sp, #44	@ 0x2c
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010ca:	2300      	movs	r3, #0
 80010cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010ce:	2300      	movs	r3, #0
 80010d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010d2:	e169      	b.n	80013a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010d4:	2201      	movs	r2, #1
 80010d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	69fa      	ldr	r2, [r7, #28]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	f040 8158 	bne.w	80013a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	4a9a      	ldr	r2, [pc, #616]	@ (8001360 <HAL_GPIO_Init+0x2a0>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d05e      	beq.n	80011ba <HAL_GPIO_Init+0xfa>
 80010fc:	4a98      	ldr	r2, [pc, #608]	@ (8001360 <HAL_GPIO_Init+0x2a0>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d875      	bhi.n	80011ee <HAL_GPIO_Init+0x12e>
 8001102:	4a98      	ldr	r2, [pc, #608]	@ (8001364 <HAL_GPIO_Init+0x2a4>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d058      	beq.n	80011ba <HAL_GPIO_Init+0xfa>
 8001108:	4a96      	ldr	r2, [pc, #600]	@ (8001364 <HAL_GPIO_Init+0x2a4>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d86f      	bhi.n	80011ee <HAL_GPIO_Init+0x12e>
 800110e:	4a96      	ldr	r2, [pc, #600]	@ (8001368 <HAL_GPIO_Init+0x2a8>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d052      	beq.n	80011ba <HAL_GPIO_Init+0xfa>
 8001114:	4a94      	ldr	r2, [pc, #592]	@ (8001368 <HAL_GPIO_Init+0x2a8>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d869      	bhi.n	80011ee <HAL_GPIO_Init+0x12e>
 800111a:	4a94      	ldr	r2, [pc, #592]	@ (800136c <HAL_GPIO_Init+0x2ac>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d04c      	beq.n	80011ba <HAL_GPIO_Init+0xfa>
 8001120:	4a92      	ldr	r2, [pc, #584]	@ (800136c <HAL_GPIO_Init+0x2ac>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d863      	bhi.n	80011ee <HAL_GPIO_Init+0x12e>
 8001126:	4a92      	ldr	r2, [pc, #584]	@ (8001370 <HAL_GPIO_Init+0x2b0>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d046      	beq.n	80011ba <HAL_GPIO_Init+0xfa>
 800112c:	4a90      	ldr	r2, [pc, #576]	@ (8001370 <HAL_GPIO_Init+0x2b0>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d85d      	bhi.n	80011ee <HAL_GPIO_Init+0x12e>
 8001132:	2b12      	cmp	r3, #18
 8001134:	d82a      	bhi.n	800118c <HAL_GPIO_Init+0xcc>
 8001136:	2b12      	cmp	r3, #18
 8001138:	d859      	bhi.n	80011ee <HAL_GPIO_Init+0x12e>
 800113a:	a201      	add	r2, pc, #4	@ (adr r2, 8001140 <HAL_GPIO_Init+0x80>)
 800113c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001140:	080011bb 	.word	0x080011bb
 8001144:	08001195 	.word	0x08001195
 8001148:	080011a7 	.word	0x080011a7
 800114c:	080011e9 	.word	0x080011e9
 8001150:	080011ef 	.word	0x080011ef
 8001154:	080011ef 	.word	0x080011ef
 8001158:	080011ef 	.word	0x080011ef
 800115c:	080011ef 	.word	0x080011ef
 8001160:	080011ef 	.word	0x080011ef
 8001164:	080011ef 	.word	0x080011ef
 8001168:	080011ef 	.word	0x080011ef
 800116c:	080011ef 	.word	0x080011ef
 8001170:	080011ef 	.word	0x080011ef
 8001174:	080011ef 	.word	0x080011ef
 8001178:	080011ef 	.word	0x080011ef
 800117c:	080011ef 	.word	0x080011ef
 8001180:	080011ef 	.word	0x080011ef
 8001184:	0800119d 	.word	0x0800119d
 8001188:	080011b1 	.word	0x080011b1
 800118c:	4a79      	ldr	r2, [pc, #484]	@ (8001374 <HAL_GPIO_Init+0x2b4>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d013      	beq.n	80011ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001192:	e02c      	b.n	80011ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	623b      	str	r3, [r7, #32]
          break;
 800119a:	e029      	b.n	80011f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	3304      	adds	r3, #4
 80011a2:	623b      	str	r3, [r7, #32]
          break;
 80011a4:	e024      	b.n	80011f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	3308      	adds	r3, #8
 80011ac:	623b      	str	r3, [r7, #32]
          break;
 80011ae:	e01f      	b.n	80011f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	330c      	adds	r3, #12
 80011b6:	623b      	str	r3, [r7, #32]
          break;
 80011b8:	e01a      	b.n	80011f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d102      	bne.n	80011c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011c2:	2304      	movs	r3, #4
 80011c4:	623b      	str	r3, [r7, #32]
          break;
 80011c6:	e013      	b.n	80011f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d105      	bne.n	80011dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011d0:	2308      	movs	r3, #8
 80011d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	69fa      	ldr	r2, [r7, #28]
 80011d8:	611a      	str	r2, [r3, #16]
          break;
 80011da:	e009      	b.n	80011f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011dc:	2308      	movs	r3, #8
 80011de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	69fa      	ldr	r2, [r7, #28]
 80011e4:	615a      	str	r2, [r3, #20]
          break;
 80011e6:	e003      	b.n	80011f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011e8:	2300      	movs	r3, #0
 80011ea:	623b      	str	r3, [r7, #32]
          break;
 80011ec:	e000      	b.n	80011f0 <HAL_GPIO_Init+0x130>
          break;
 80011ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	2bff      	cmp	r3, #255	@ 0xff
 80011f4:	d801      	bhi.n	80011fa <HAL_GPIO_Init+0x13a>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	e001      	b.n	80011fe <HAL_GPIO_Init+0x13e>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	3304      	adds	r3, #4
 80011fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	2bff      	cmp	r3, #255	@ 0xff
 8001204:	d802      	bhi.n	800120c <HAL_GPIO_Init+0x14c>
 8001206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	e002      	b.n	8001212 <HAL_GPIO_Init+0x152>
 800120c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800120e:	3b08      	subs	r3, #8
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	210f      	movs	r1, #15
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	fa01 f303 	lsl.w	r3, r1, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	401a      	ands	r2, r3
 8001224:	6a39      	ldr	r1, [r7, #32]
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	fa01 f303 	lsl.w	r3, r1, r3
 800122c:	431a      	orrs	r2, r3
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800123a:	2b00      	cmp	r3, #0
 800123c:	f000 80b1 	beq.w	80013a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001240:	4b4d      	ldr	r3, [pc, #308]	@ (8001378 <HAL_GPIO_Init+0x2b8>)
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	4a4c      	ldr	r2, [pc, #304]	@ (8001378 <HAL_GPIO_Init+0x2b8>)
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	6193      	str	r3, [r2, #24]
 800124c:	4b4a      	ldr	r3, [pc, #296]	@ (8001378 <HAL_GPIO_Init+0x2b8>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001258:	4a48      	ldr	r2, [pc, #288]	@ (800137c <HAL_GPIO_Init+0x2bc>)
 800125a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800125c:	089b      	lsrs	r3, r3, #2
 800125e:	3302      	adds	r3, #2
 8001260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001264:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001268:	f003 0303 	and.w	r3, r3, #3
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	220f      	movs	r2, #15
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	4013      	ands	r3, r2
 800127a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4a40      	ldr	r2, [pc, #256]	@ (8001380 <HAL_GPIO_Init+0x2c0>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d013      	beq.n	80012ac <HAL_GPIO_Init+0x1ec>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4a3f      	ldr	r2, [pc, #252]	@ (8001384 <HAL_GPIO_Init+0x2c4>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d00d      	beq.n	80012a8 <HAL_GPIO_Init+0x1e8>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a3e      	ldr	r2, [pc, #248]	@ (8001388 <HAL_GPIO_Init+0x2c8>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d007      	beq.n	80012a4 <HAL_GPIO_Init+0x1e4>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a3d      	ldr	r2, [pc, #244]	@ (800138c <HAL_GPIO_Init+0x2cc>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d101      	bne.n	80012a0 <HAL_GPIO_Init+0x1e0>
 800129c:	2303      	movs	r3, #3
 800129e:	e006      	b.n	80012ae <HAL_GPIO_Init+0x1ee>
 80012a0:	2304      	movs	r3, #4
 80012a2:	e004      	b.n	80012ae <HAL_GPIO_Init+0x1ee>
 80012a4:	2302      	movs	r3, #2
 80012a6:	e002      	b.n	80012ae <HAL_GPIO_Init+0x1ee>
 80012a8:	2301      	movs	r3, #1
 80012aa:	e000      	b.n	80012ae <HAL_GPIO_Init+0x1ee>
 80012ac:	2300      	movs	r3, #0
 80012ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012b0:	f002 0203 	and.w	r2, r2, #3
 80012b4:	0092      	lsls	r2, r2, #2
 80012b6:	4093      	lsls	r3, r2
 80012b8:	68fa      	ldr	r2, [r7, #12]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012be:	492f      	ldr	r1, [pc, #188]	@ (800137c <HAL_GPIO_Init+0x2bc>)
 80012c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c2:	089b      	lsrs	r3, r3, #2
 80012c4:	3302      	adds	r3, #2
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d006      	beq.n	80012e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001390 <HAL_GPIO_Init+0x2d0>)
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	492c      	ldr	r1, [pc, #176]	@ (8001390 <HAL_GPIO_Init+0x2d0>)
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	608b      	str	r3, [r1, #8]
 80012e4:	e006      	b.n	80012f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001390 <HAL_GPIO_Init+0x2d0>)
 80012e8:	689a      	ldr	r2, [r3, #8]
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	43db      	mvns	r3, r3
 80012ee:	4928      	ldr	r1, [pc, #160]	@ (8001390 <HAL_GPIO_Init+0x2d0>)
 80012f0:	4013      	ands	r3, r2
 80012f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d006      	beq.n	800130e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001300:	4b23      	ldr	r3, [pc, #140]	@ (8001390 <HAL_GPIO_Init+0x2d0>)
 8001302:	68da      	ldr	r2, [r3, #12]
 8001304:	4922      	ldr	r1, [pc, #136]	@ (8001390 <HAL_GPIO_Init+0x2d0>)
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	4313      	orrs	r3, r2
 800130a:	60cb      	str	r3, [r1, #12]
 800130c:	e006      	b.n	800131c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800130e:	4b20      	ldr	r3, [pc, #128]	@ (8001390 <HAL_GPIO_Init+0x2d0>)
 8001310:	68da      	ldr	r2, [r3, #12]
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	43db      	mvns	r3, r3
 8001316:	491e      	ldr	r1, [pc, #120]	@ (8001390 <HAL_GPIO_Init+0x2d0>)
 8001318:	4013      	ands	r3, r2
 800131a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d006      	beq.n	8001336 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001328:	4b19      	ldr	r3, [pc, #100]	@ (8001390 <HAL_GPIO_Init+0x2d0>)
 800132a:	685a      	ldr	r2, [r3, #4]
 800132c:	4918      	ldr	r1, [pc, #96]	@ (8001390 <HAL_GPIO_Init+0x2d0>)
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	4313      	orrs	r3, r2
 8001332:	604b      	str	r3, [r1, #4]
 8001334:	e006      	b.n	8001344 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001336:	4b16      	ldr	r3, [pc, #88]	@ (8001390 <HAL_GPIO_Init+0x2d0>)
 8001338:	685a      	ldr	r2, [r3, #4]
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	43db      	mvns	r3, r3
 800133e:	4914      	ldr	r1, [pc, #80]	@ (8001390 <HAL_GPIO_Init+0x2d0>)
 8001340:	4013      	ands	r3, r2
 8001342:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d021      	beq.n	8001394 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001350:	4b0f      	ldr	r3, [pc, #60]	@ (8001390 <HAL_GPIO_Init+0x2d0>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	490e      	ldr	r1, [pc, #56]	@ (8001390 <HAL_GPIO_Init+0x2d0>)
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	4313      	orrs	r3, r2
 800135a:	600b      	str	r3, [r1, #0]
 800135c:	e021      	b.n	80013a2 <HAL_GPIO_Init+0x2e2>
 800135e:	bf00      	nop
 8001360:	10320000 	.word	0x10320000
 8001364:	10310000 	.word	0x10310000
 8001368:	10220000 	.word	0x10220000
 800136c:	10210000 	.word	0x10210000
 8001370:	10120000 	.word	0x10120000
 8001374:	10110000 	.word	0x10110000
 8001378:	40021000 	.word	0x40021000
 800137c:	40010000 	.word	0x40010000
 8001380:	40010800 	.word	0x40010800
 8001384:	40010c00 	.word	0x40010c00
 8001388:	40011000 	.word	0x40011000
 800138c:	40011400 	.word	0x40011400
 8001390:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001394:	4b0b      	ldr	r3, [pc, #44]	@ (80013c4 <HAL_GPIO_Init+0x304>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	43db      	mvns	r3, r3
 800139c:	4909      	ldr	r1, [pc, #36]	@ (80013c4 <HAL_GPIO_Init+0x304>)
 800139e:	4013      	ands	r3, r2
 80013a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80013a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a4:	3301      	adds	r3, #1
 80013a6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ae:	fa22 f303 	lsr.w	r3, r2, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f47f ae8e 	bne.w	80010d4 <HAL_GPIO_Init+0x14>
  }
}
 80013b8:	bf00      	nop
 80013ba:	bf00      	nop
 80013bc:	372c      	adds	r7, #44	@ 0x2c
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr
 80013c4:	40010400 	.word	0x40010400

080013c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	460b      	mov	r3, r1
 80013d2:	807b      	strh	r3, [r7, #2]
 80013d4:	4613      	mov	r3, r2
 80013d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013d8:	787b      	ldrb	r3, [r7, #1]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013de:	887a      	ldrh	r2, [r7, #2]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013e4:	e003      	b.n	80013ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013e6:	887b      	ldrh	r3, [r7, #2]
 80013e8:	041a      	lsls	r2, r3, #16
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	611a      	str	r2, [r3, #16]
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr

080013f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d101      	bne.n	800140a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e272      	b.n	80018f0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	2b00      	cmp	r3, #0
 8001414:	f000 8087 	beq.w	8001526 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001418:	4b92      	ldr	r3, [pc, #584]	@ (8001664 <HAL_RCC_OscConfig+0x26c>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 030c 	and.w	r3, r3, #12
 8001420:	2b04      	cmp	r3, #4
 8001422:	d00c      	beq.n	800143e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001424:	4b8f      	ldr	r3, [pc, #572]	@ (8001664 <HAL_RCC_OscConfig+0x26c>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f003 030c 	and.w	r3, r3, #12
 800142c:	2b08      	cmp	r3, #8
 800142e:	d112      	bne.n	8001456 <HAL_RCC_OscConfig+0x5e>
 8001430:	4b8c      	ldr	r3, [pc, #560]	@ (8001664 <HAL_RCC_OscConfig+0x26c>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001438:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800143c:	d10b      	bne.n	8001456 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800143e:	4b89      	ldr	r3, [pc, #548]	@ (8001664 <HAL_RCC_OscConfig+0x26c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d06c      	beq.n	8001524 <HAL_RCC_OscConfig+0x12c>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d168      	bne.n	8001524 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e24c      	b.n	80018f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800145e:	d106      	bne.n	800146e <HAL_RCC_OscConfig+0x76>
 8001460:	4b80      	ldr	r3, [pc, #512]	@ (8001664 <HAL_RCC_OscConfig+0x26c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a7f      	ldr	r2, [pc, #508]	@ (8001664 <HAL_RCC_OscConfig+0x26c>)
 8001466:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800146a:	6013      	str	r3, [r2, #0]
 800146c:	e02e      	b.n	80014cc <HAL_RCC_OscConfig+0xd4>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d10c      	bne.n	8001490 <HAL_RCC_OscConfig+0x98>
 8001476:	4b7b      	ldr	r3, [pc, #492]	@ (8001664 <HAL_RCC_OscConfig+0x26c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a7a      	ldr	r2, [pc, #488]	@ (8001664 <HAL_RCC_OscConfig+0x26c>)
 800147c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	4b78      	ldr	r3, [pc, #480]	@ (8001664 <HAL_RCC_OscConfig+0x26c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a77      	ldr	r2, [pc, #476]	@ (8001664 <HAL_RCC_OscConfig+0x26c>)
 8001488:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	e01d      	b.n	80014cc <HAL_RCC_OscConfig+0xd4>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001498:	d10c      	bne.n	80014b4 <HAL_RCC_OscConfig+0xbc>
 800149a:	4b72      	ldr	r3, [pc, #456]	@ (8001664 <HAL_RCC_OscConfig+0x26c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a71      	ldr	r2, [pc, #452]	@ (8001664 <HAL_RCC_OscConfig+0x26c>)
 80014a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	4b6f      	ldr	r3, [pc, #444]	@ (8001664 <HAL_RCC_OscConfig+0x26c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a6e      	ldr	r2, [pc, #440]	@ (8001664 <HAL_RCC_OscConfig+0x26c>)
 80014ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	e00b      	b.n	80014cc <HAL_RCC_OscConfig+0xd4>
 80014b4:	4b6b      	ldr	r3, [pc, #428]	@ (8001664 <HAL_RCC_OscConfig+0x26c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a6a      	ldr	r2, [pc, #424]	@ (8001664 <HAL_RCC_OscConfig+0x26c>)
 80014ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014be:	6013      	str	r3, [r2, #0]
 80014c0:	4b68      	ldr	r3, [pc, #416]	@ (8001664 <HAL_RCC_OscConfig+0x26c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a67      	ldr	r2, [pc, #412]	@ (8001664 <HAL_RCC_OscConfig+0x26c>)
 80014c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d013      	beq.n	80014fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d4:	f7ff fad0 	bl	8000a78 <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014dc:	f7ff facc 	bl	8000a78 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b64      	cmp	r3, #100	@ 0x64
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e200      	b.n	80018f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ee:	4b5d      	ldr	r3, [pc, #372]	@ (8001664 <HAL_RCC_OscConfig+0x26c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d0f0      	beq.n	80014dc <HAL_RCC_OscConfig+0xe4>
 80014fa:	e014      	b.n	8001526 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fc:	f7ff fabc 	bl	8000a78 <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001504:	f7ff fab8 	bl	8000a78 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b64      	cmp	r3, #100	@ 0x64
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e1ec      	b.n	80018f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001516:	4b53      	ldr	r3, [pc, #332]	@ (8001664 <HAL_RCC_OscConfig+0x26c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f0      	bne.n	8001504 <HAL_RCC_OscConfig+0x10c>
 8001522:	e000      	b.n	8001526 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d063      	beq.n	80015fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001532:	4b4c      	ldr	r3, [pc, #304]	@ (8001664 <HAL_RCC_OscConfig+0x26c>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f003 030c 	and.w	r3, r3, #12
 800153a:	2b00      	cmp	r3, #0
 800153c:	d00b      	beq.n	8001556 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800153e:	4b49      	ldr	r3, [pc, #292]	@ (8001664 <HAL_RCC_OscConfig+0x26c>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f003 030c 	and.w	r3, r3, #12
 8001546:	2b08      	cmp	r3, #8
 8001548:	d11c      	bne.n	8001584 <HAL_RCC_OscConfig+0x18c>
 800154a:	4b46      	ldr	r3, [pc, #280]	@ (8001664 <HAL_RCC_OscConfig+0x26c>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d116      	bne.n	8001584 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001556:	4b43      	ldr	r3, [pc, #268]	@ (8001664 <HAL_RCC_OscConfig+0x26c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d005      	beq.n	800156e <HAL_RCC_OscConfig+0x176>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d001      	beq.n	800156e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e1c0      	b.n	80018f0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800156e:	4b3d      	ldr	r3, [pc, #244]	@ (8001664 <HAL_RCC_OscConfig+0x26c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	4939      	ldr	r1, [pc, #228]	@ (8001664 <HAL_RCC_OscConfig+0x26c>)
 800157e:	4313      	orrs	r3, r2
 8001580:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001582:	e03a      	b.n	80015fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	691b      	ldr	r3, [r3, #16]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d020      	beq.n	80015ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800158c:	4b36      	ldr	r3, [pc, #216]	@ (8001668 <HAL_RCC_OscConfig+0x270>)
 800158e:	2201      	movs	r2, #1
 8001590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001592:	f7ff fa71 	bl	8000a78 <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800159a:	f7ff fa6d 	bl	8000a78 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e1a1      	b.n	80018f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001664 <HAL_RCC_OscConfig+0x26c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0f0      	beq.n	800159a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001664 <HAL_RCC_OscConfig+0x26c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	695b      	ldr	r3, [r3, #20]
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	4927      	ldr	r1, [pc, #156]	@ (8001664 <HAL_RCC_OscConfig+0x26c>)
 80015c8:	4313      	orrs	r3, r2
 80015ca:	600b      	str	r3, [r1, #0]
 80015cc:	e015      	b.n	80015fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ce:	4b26      	ldr	r3, [pc, #152]	@ (8001668 <HAL_RCC_OscConfig+0x270>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d4:	f7ff fa50 	bl	8000a78 <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015dc:	f7ff fa4c 	bl	8000a78 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e180      	b.n	80018f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001664 <HAL_RCC_OscConfig+0x26c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1f0      	bne.n	80015dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0308 	and.w	r3, r3, #8
 8001602:	2b00      	cmp	r3, #0
 8001604:	d03a      	beq.n	800167c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d019      	beq.n	8001642 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800160e:	4b17      	ldr	r3, [pc, #92]	@ (800166c <HAL_RCC_OscConfig+0x274>)
 8001610:	2201      	movs	r2, #1
 8001612:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001614:	f7ff fa30 	bl	8000a78 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800161c:	f7ff fa2c 	bl	8000a78 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e160      	b.n	80018f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800162e:	4b0d      	ldr	r3, [pc, #52]	@ (8001664 <HAL_RCC_OscConfig+0x26c>)
 8001630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0f0      	beq.n	800161c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800163a:	2001      	movs	r0, #1
 800163c:	f000 fa9c 	bl	8001b78 <RCC_Delay>
 8001640:	e01c      	b.n	800167c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001642:	4b0a      	ldr	r3, [pc, #40]	@ (800166c <HAL_RCC_OscConfig+0x274>)
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001648:	f7ff fa16 	bl	8000a78 <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800164e:	e00f      	b.n	8001670 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001650:	f7ff fa12 	bl	8000a78 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d908      	bls.n	8001670 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e146      	b.n	80018f0 <HAL_RCC_OscConfig+0x4f8>
 8001662:	bf00      	nop
 8001664:	40021000 	.word	0x40021000
 8001668:	42420000 	.word	0x42420000
 800166c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001670:	4b92      	ldr	r3, [pc, #584]	@ (80018bc <HAL_RCC_OscConfig+0x4c4>)
 8001672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d1e9      	bne.n	8001650 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0304 	and.w	r3, r3, #4
 8001684:	2b00      	cmp	r3, #0
 8001686:	f000 80a6 	beq.w	80017d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800168a:	2300      	movs	r3, #0
 800168c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800168e:	4b8b      	ldr	r3, [pc, #556]	@ (80018bc <HAL_RCC_OscConfig+0x4c4>)
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d10d      	bne.n	80016b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800169a:	4b88      	ldr	r3, [pc, #544]	@ (80018bc <HAL_RCC_OscConfig+0x4c4>)
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	4a87      	ldr	r2, [pc, #540]	@ (80018bc <HAL_RCC_OscConfig+0x4c4>)
 80016a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016a4:	61d3      	str	r3, [r2, #28]
 80016a6:	4b85      	ldr	r3, [pc, #532]	@ (80018bc <HAL_RCC_OscConfig+0x4c4>)
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ae:	60bb      	str	r3, [r7, #8]
 80016b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016b2:	2301      	movs	r3, #1
 80016b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b6:	4b82      	ldr	r3, [pc, #520]	@ (80018c0 <HAL_RCC_OscConfig+0x4c8>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d118      	bne.n	80016f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016c2:	4b7f      	ldr	r3, [pc, #508]	@ (80018c0 <HAL_RCC_OscConfig+0x4c8>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a7e      	ldr	r2, [pc, #504]	@ (80018c0 <HAL_RCC_OscConfig+0x4c8>)
 80016c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ce:	f7ff f9d3 	bl	8000a78 <HAL_GetTick>
 80016d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d4:	e008      	b.n	80016e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016d6:	f7ff f9cf 	bl	8000a78 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b64      	cmp	r3, #100	@ 0x64
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e103      	b.n	80018f0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e8:	4b75      	ldr	r3, [pc, #468]	@ (80018c0 <HAL_RCC_OscConfig+0x4c8>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0f0      	beq.n	80016d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d106      	bne.n	800170a <HAL_RCC_OscConfig+0x312>
 80016fc:	4b6f      	ldr	r3, [pc, #444]	@ (80018bc <HAL_RCC_OscConfig+0x4c4>)
 80016fe:	6a1b      	ldr	r3, [r3, #32]
 8001700:	4a6e      	ldr	r2, [pc, #440]	@ (80018bc <HAL_RCC_OscConfig+0x4c4>)
 8001702:	f043 0301 	orr.w	r3, r3, #1
 8001706:	6213      	str	r3, [r2, #32]
 8001708:	e02d      	b.n	8001766 <HAL_RCC_OscConfig+0x36e>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d10c      	bne.n	800172c <HAL_RCC_OscConfig+0x334>
 8001712:	4b6a      	ldr	r3, [pc, #424]	@ (80018bc <HAL_RCC_OscConfig+0x4c4>)
 8001714:	6a1b      	ldr	r3, [r3, #32]
 8001716:	4a69      	ldr	r2, [pc, #420]	@ (80018bc <HAL_RCC_OscConfig+0x4c4>)
 8001718:	f023 0301 	bic.w	r3, r3, #1
 800171c:	6213      	str	r3, [r2, #32]
 800171e:	4b67      	ldr	r3, [pc, #412]	@ (80018bc <HAL_RCC_OscConfig+0x4c4>)
 8001720:	6a1b      	ldr	r3, [r3, #32]
 8001722:	4a66      	ldr	r2, [pc, #408]	@ (80018bc <HAL_RCC_OscConfig+0x4c4>)
 8001724:	f023 0304 	bic.w	r3, r3, #4
 8001728:	6213      	str	r3, [r2, #32]
 800172a:	e01c      	b.n	8001766 <HAL_RCC_OscConfig+0x36e>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	2b05      	cmp	r3, #5
 8001732:	d10c      	bne.n	800174e <HAL_RCC_OscConfig+0x356>
 8001734:	4b61      	ldr	r3, [pc, #388]	@ (80018bc <HAL_RCC_OscConfig+0x4c4>)
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	4a60      	ldr	r2, [pc, #384]	@ (80018bc <HAL_RCC_OscConfig+0x4c4>)
 800173a:	f043 0304 	orr.w	r3, r3, #4
 800173e:	6213      	str	r3, [r2, #32]
 8001740:	4b5e      	ldr	r3, [pc, #376]	@ (80018bc <HAL_RCC_OscConfig+0x4c4>)
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	4a5d      	ldr	r2, [pc, #372]	@ (80018bc <HAL_RCC_OscConfig+0x4c4>)
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	6213      	str	r3, [r2, #32]
 800174c:	e00b      	b.n	8001766 <HAL_RCC_OscConfig+0x36e>
 800174e:	4b5b      	ldr	r3, [pc, #364]	@ (80018bc <HAL_RCC_OscConfig+0x4c4>)
 8001750:	6a1b      	ldr	r3, [r3, #32]
 8001752:	4a5a      	ldr	r2, [pc, #360]	@ (80018bc <HAL_RCC_OscConfig+0x4c4>)
 8001754:	f023 0301 	bic.w	r3, r3, #1
 8001758:	6213      	str	r3, [r2, #32]
 800175a:	4b58      	ldr	r3, [pc, #352]	@ (80018bc <HAL_RCC_OscConfig+0x4c4>)
 800175c:	6a1b      	ldr	r3, [r3, #32]
 800175e:	4a57      	ldr	r2, [pc, #348]	@ (80018bc <HAL_RCC_OscConfig+0x4c4>)
 8001760:	f023 0304 	bic.w	r3, r3, #4
 8001764:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d015      	beq.n	800179a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800176e:	f7ff f983 	bl	8000a78 <HAL_GetTick>
 8001772:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001774:	e00a      	b.n	800178c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001776:	f7ff f97f 	bl	8000a78 <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001784:	4293      	cmp	r3, r2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e0b1      	b.n	80018f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800178c:	4b4b      	ldr	r3, [pc, #300]	@ (80018bc <HAL_RCC_OscConfig+0x4c4>)
 800178e:	6a1b      	ldr	r3, [r3, #32]
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d0ee      	beq.n	8001776 <HAL_RCC_OscConfig+0x37e>
 8001798:	e014      	b.n	80017c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800179a:	f7ff f96d 	bl	8000a78 <HAL_GetTick>
 800179e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a0:	e00a      	b.n	80017b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017a2:	f7ff f969 	bl	8000a78 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e09b      	b.n	80018f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017b8:	4b40      	ldr	r3, [pc, #256]	@ (80018bc <HAL_RCC_OscConfig+0x4c4>)
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1ee      	bne.n	80017a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017c4:	7dfb      	ldrb	r3, [r7, #23]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d105      	bne.n	80017d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ca:	4b3c      	ldr	r3, [pc, #240]	@ (80018bc <HAL_RCC_OscConfig+0x4c4>)
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	4a3b      	ldr	r2, [pc, #236]	@ (80018bc <HAL_RCC_OscConfig+0x4c4>)
 80017d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f000 8087 	beq.w	80018ee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017e0:	4b36      	ldr	r3, [pc, #216]	@ (80018bc <HAL_RCC_OscConfig+0x4c4>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 030c 	and.w	r3, r3, #12
 80017e8:	2b08      	cmp	r3, #8
 80017ea:	d061      	beq.n	80018b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	69db      	ldr	r3, [r3, #28]
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d146      	bne.n	8001882 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f4:	4b33      	ldr	r3, [pc, #204]	@ (80018c4 <HAL_RCC_OscConfig+0x4cc>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fa:	f7ff f93d 	bl	8000a78 <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001802:	f7ff f939 	bl	8000a78 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e06d      	b.n	80018f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001814:	4b29      	ldr	r3, [pc, #164]	@ (80018bc <HAL_RCC_OscConfig+0x4c4>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1f0      	bne.n	8001802 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001828:	d108      	bne.n	800183c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800182a:	4b24      	ldr	r3, [pc, #144]	@ (80018bc <HAL_RCC_OscConfig+0x4c4>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	4921      	ldr	r1, [pc, #132]	@ (80018bc <HAL_RCC_OscConfig+0x4c4>)
 8001838:	4313      	orrs	r3, r2
 800183a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800183c:	4b1f      	ldr	r3, [pc, #124]	@ (80018bc <HAL_RCC_OscConfig+0x4c4>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a19      	ldr	r1, [r3, #32]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800184c:	430b      	orrs	r3, r1
 800184e:	491b      	ldr	r1, [pc, #108]	@ (80018bc <HAL_RCC_OscConfig+0x4c4>)
 8001850:	4313      	orrs	r3, r2
 8001852:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001854:	4b1b      	ldr	r3, [pc, #108]	@ (80018c4 <HAL_RCC_OscConfig+0x4cc>)
 8001856:	2201      	movs	r2, #1
 8001858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185a:	f7ff f90d 	bl	8000a78 <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001862:	f7ff f909 	bl	8000a78 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e03d      	b.n	80018f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001874:	4b11      	ldr	r3, [pc, #68]	@ (80018bc <HAL_RCC_OscConfig+0x4c4>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d0f0      	beq.n	8001862 <HAL_RCC_OscConfig+0x46a>
 8001880:	e035      	b.n	80018ee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001882:	4b10      	ldr	r3, [pc, #64]	@ (80018c4 <HAL_RCC_OscConfig+0x4cc>)
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001888:	f7ff f8f6 	bl	8000a78 <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001890:	f7ff f8f2 	bl	8000a78 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e026      	b.n	80018f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018a2:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <HAL_RCC_OscConfig+0x4c4>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f0      	bne.n	8001890 <HAL_RCC_OscConfig+0x498>
 80018ae:	e01e      	b.n	80018ee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	69db      	ldr	r3, [r3, #28]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d107      	bne.n	80018c8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e019      	b.n	80018f0 <HAL_RCC_OscConfig+0x4f8>
 80018bc:	40021000 	.word	0x40021000
 80018c0:	40007000 	.word	0x40007000
 80018c4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018c8:	4b0b      	ldr	r3, [pc, #44]	@ (80018f8 <HAL_RCC_OscConfig+0x500>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d106      	bne.n	80018ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d001      	beq.n	80018ee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e000      	b.n	80018f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3718      	adds	r7, #24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40021000 	.word	0x40021000

080018fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d101      	bne.n	8001910 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e0d0      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001910:	4b6a      	ldr	r3, [pc, #424]	@ (8001abc <HAL_RCC_ClockConfig+0x1c0>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	429a      	cmp	r2, r3
 800191c:	d910      	bls.n	8001940 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800191e:	4b67      	ldr	r3, [pc, #412]	@ (8001abc <HAL_RCC_ClockConfig+0x1c0>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f023 0207 	bic.w	r2, r3, #7
 8001926:	4965      	ldr	r1, [pc, #404]	@ (8001abc <HAL_RCC_ClockConfig+0x1c0>)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	4313      	orrs	r3, r2
 800192c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800192e:	4b63      	ldr	r3, [pc, #396]	@ (8001abc <HAL_RCC_ClockConfig+0x1c0>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	429a      	cmp	r2, r3
 800193a:	d001      	beq.n	8001940 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e0b8      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d020      	beq.n	800198e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	2b00      	cmp	r3, #0
 8001956:	d005      	beq.n	8001964 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001958:	4b59      	ldr	r3, [pc, #356]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	4a58      	ldr	r2, [pc, #352]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 800195e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001962:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0308 	and.w	r3, r3, #8
 800196c:	2b00      	cmp	r3, #0
 800196e:	d005      	beq.n	800197c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001970:	4b53      	ldr	r3, [pc, #332]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	4a52      	ldr	r2, [pc, #328]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001976:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800197a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800197c:	4b50      	ldr	r3, [pc, #320]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	494d      	ldr	r1, [pc, #308]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 800198a:	4313      	orrs	r3, r2
 800198c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	2b00      	cmp	r3, #0
 8001998:	d040      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d107      	bne.n	80019b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a2:	4b47      	ldr	r3, [pc, #284]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d115      	bne.n	80019da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e07f      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d107      	bne.n	80019ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ba:	4b41      	ldr	r3, [pc, #260]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d109      	bne.n	80019da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e073      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ca:	4b3d      	ldr	r3, [pc, #244]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e06b      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019da:	4b39      	ldr	r3, [pc, #228]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f023 0203 	bic.w	r2, r3, #3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	4936      	ldr	r1, [pc, #216]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019ec:	f7ff f844 	bl	8000a78 <HAL_GetTick>
 80019f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f2:	e00a      	b.n	8001a0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f4:	f7ff f840 	bl	8000a78 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e053      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0a:	4b2d      	ldr	r3, [pc, #180]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f003 020c 	and.w	r2, r3, #12
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d1eb      	bne.n	80019f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a1c:	4b27      	ldr	r3, [pc, #156]	@ (8001abc <HAL_RCC_ClockConfig+0x1c0>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d210      	bcs.n	8001a4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2a:	4b24      	ldr	r3, [pc, #144]	@ (8001abc <HAL_RCC_ClockConfig+0x1c0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f023 0207 	bic.w	r2, r3, #7
 8001a32:	4922      	ldr	r1, [pc, #136]	@ (8001abc <HAL_RCC_ClockConfig+0x1c0>)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3a:	4b20      	ldr	r3, [pc, #128]	@ (8001abc <HAL_RCC_ClockConfig+0x1c0>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d001      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e032      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0304 	and.w	r3, r3, #4
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d008      	beq.n	8001a6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a58:	4b19      	ldr	r3, [pc, #100]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	4916      	ldr	r1, [pc, #88]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0308 	and.w	r3, r3, #8
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d009      	beq.n	8001a8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a76:	4b12      	ldr	r3, [pc, #72]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	490e      	ldr	r1, [pc, #56]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a8a:	f000 f821 	bl	8001ad0 <HAL_RCC_GetSysClockFreq>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	091b      	lsrs	r3, r3, #4
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	490a      	ldr	r1, [pc, #40]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a9c:	5ccb      	ldrb	r3, [r1, r3]
 8001a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa2:	4a09      	ldr	r2, [pc, #36]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1cc>)
 8001aa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001aa6:	4b09      	ldr	r3, [pc, #36]	@ (8001acc <HAL_RCC_ClockConfig+0x1d0>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7fe ffa2 	bl	80009f4 <HAL_InitTick>

  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40022000 	.word	0x40022000
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	0800290c 	.word	0x0800290c
 8001ac8:	20000000 	.word	0x20000000
 8001acc:	20000004 	.word	0x20000004

08001ad0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b087      	sub	sp, #28
 8001ad4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	2300      	movs	r3, #0
 8001adc:	60bb      	str	r3, [r7, #8]
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001aea:	4b1e      	ldr	r3, [pc, #120]	@ (8001b64 <HAL_RCC_GetSysClockFreq+0x94>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f003 030c 	and.w	r3, r3, #12
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	d002      	beq.n	8001b00 <HAL_RCC_GetSysClockFreq+0x30>
 8001afa:	2b08      	cmp	r3, #8
 8001afc:	d003      	beq.n	8001b06 <HAL_RCC_GetSysClockFreq+0x36>
 8001afe:	e027      	b.n	8001b50 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b00:	4b19      	ldr	r3, [pc, #100]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b02:	613b      	str	r3, [r7, #16]
      break;
 8001b04:	e027      	b.n	8001b56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	0c9b      	lsrs	r3, r3, #18
 8001b0a:	f003 030f 	and.w	r3, r3, #15
 8001b0e:	4a17      	ldr	r2, [pc, #92]	@ (8001b6c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b10:	5cd3      	ldrb	r3, [r2, r3]
 8001b12:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d010      	beq.n	8001b40 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b1e:	4b11      	ldr	r3, [pc, #68]	@ (8001b64 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	0c5b      	lsrs	r3, r3, #17
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	4a11      	ldr	r2, [pc, #68]	@ (8001b70 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b2a:	5cd3      	ldrb	r3, [r2, r3]
 8001b2c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a0d      	ldr	r2, [pc, #52]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b32:	fb03 f202 	mul.w	r2, r3, r2
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3c:	617b      	str	r3, [r7, #20]
 8001b3e:	e004      	b.n	8001b4a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a0c      	ldr	r2, [pc, #48]	@ (8001b74 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b44:	fb02 f303 	mul.w	r3, r2, r3
 8001b48:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	613b      	str	r3, [r7, #16]
      break;
 8001b4e:	e002      	b.n	8001b56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b50:	4b05      	ldr	r3, [pc, #20]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b52:	613b      	str	r3, [r7, #16]
      break;
 8001b54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b56:	693b      	ldr	r3, [r7, #16]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	371c      	adds	r7, #28
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bc80      	pop	{r7}
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	40021000 	.word	0x40021000
 8001b68:	007a1200 	.word	0x007a1200
 8001b6c:	0800291c 	.word	0x0800291c
 8001b70:	0800292c 	.word	0x0800292c
 8001b74:	003d0900 	.word	0x003d0900

08001b78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b80:	4b0a      	ldr	r3, [pc, #40]	@ (8001bac <RCC_Delay+0x34>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb0 <RCC_Delay+0x38>)
 8001b86:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8a:	0a5b      	lsrs	r3, r3, #9
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	fb02 f303 	mul.w	r3, r2, r3
 8001b92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b94:	bf00      	nop
  }
  while (Delay --);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	1e5a      	subs	r2, r3, #1
 8001b9a:	60fa      	str	r2, [r7, #12]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1f9      	bne.n	8001b94 <RCC_Delay+0x1c>
}
 8001ba0:	bf00      	nop
 8001ba2:	bf00      	nop
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr
 8001bac:	20000000 	.word	0x20000000
 8001bb0:	10624dd3 	.word	0x10624dd3

08001bb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	613b      	str	r3, [r7, #16]
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d07d      	beq.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bd4:	4b4f      	ldr	r3, [pc, #316]	@ (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bd6:	69db      	ldr	r3, [r3, #28]
 8001bd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d10d      	bne.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001be0:	4b4c      	ldr	r3, [pc, #304]	@ (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001be2:	69db      	ldr	r3, [r3, #28]
 8001be4:	4a4b      	ldr	r2, [pc, #300]	@ (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001be6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bea:	61d3      	str	r3, [r2, #28]
 8001bec:	4b49      	ldr	r3, [pc, #292]	@ (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bee:	69db      	ldr	r3, [r3, #28]
 8001bf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bfc:	4b46      	ldr	r3, [pc, #280]	@ (8001d18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d118      	bne.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c08:	4b43      	ldr	r3, [pc, #268]	@ (8001d18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a42      	ldr	r2, [pc, #264]	@ (8001d18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c14:	f7fe ff30 	bl	8000a78 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c1a:	e008      	b.n	8001c2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c1c:	f7fe ff2c 	bl	8000a78 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b64      	cmp	r3, #100	@ 0x64
 8001c28:	d901      	bls.n	8001c2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e06d      	b.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c2e:	4b3a      	ldr	r3, [pc, #232]	@ (8001d18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f0      	beq.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c3a:	4b36      	ldr	r3, [pc, #216]	@ (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c42:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d02e      	beq.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d027      	beq.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c58:	4b2e      	ldr	r3, [pc, #184]	@ (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c5a:	6a1b      	ldr	r3, [r3, #32]
 8001c5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c60:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c62:	4b2e      	ldr	r3, [pc, #184]	@ (8001d1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001c64:	2201      	movs	r2, #1
 8001c66:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c68:	4b2c      	ldr	r3, [pc, #176]	@ (8001d1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001c6e:	4a29      	ldr	r2, [pc, #164]	@ (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d014      	beq.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7e:	f7fe fefb 	bl	8000a78 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c84:	e00a      	b.n	8001c9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c86:	f7fe fef7 	bl	8000a78 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e036      	b.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c9c:	4b1d      	ldr	r3, [pc, #116]	@ (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d0ee      	beq.n	8001c86 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ca8:	4b1a      	ldr	r3, [pc, #104]	@ (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	4917      	ldr	r1, [pc, #92]	@ (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cba:	7dfb      	ldrb	r3, [r7, #23]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d105      	bne.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cc0:	4b14      	ldr	r3, [pc, #80]	@ (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cc2:	69db      	ldr	r3, [r3, #28]
 8001cc4:	4a13      	ldr	r2, [pc, #76]	@ (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d008      	beq.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	490b      	ldr	r1, [pc, #44]	@ (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0310 	and.w	r3, r3, #16
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d008      	beq.n	8001d08 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001cf6:	4b07      	ldr	r3, [pc, #28]	@ (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	4904      	ldr	r1, [pc, #16]	@ (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40021000 	.word	0x40021000
 8001d18:	40007000 	.word	0x40007000
 8001d1c:	42420440 	.word	0x42420440

08001d20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e041      	b.n	8001db6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d106      	bne.n	8001d4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7fe fd2e 	bl	80007a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2202      	movs	r2, #2
 8001d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3304      	adds	r3, #4
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4610      	mov	r0, r2
 8001d60:	f000 fab2 	bl	80022c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d101      	bne.n	8001dd0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e041      	b.n	8001e54 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d106      	bne.n	8001dea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 f839 	bl	8001e5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2202      	movs	r2, #2
 8001dee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	f000 fa63 	bl	80022c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bc80      	pop	{r7}
 8001e6c:	4770      	bx	lr

08001e6e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b086      	sub	sp, #24
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e093      	b.n	8001faa <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d106      	bne.n	8001e9c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7fe fca2 	bl	80007e0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	6812      	ldr	r2, [r2, #0]
 8001eae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001eb2:	f023 0307 	bic.w	r3, r3, #7
 8001eb6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3304      	adds	r3, #4
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4610      	mov	r0, r2
 8001ec4:	f000 fa00 	bl	80022c8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6a1b      	ldr	r3, [r3, #32]
 8001ede:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ef0:	f023 0303 	bic.w	r3, r3, #3
 8001ef4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	689a      	ldr	r2, [r3, #8]
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	021b      	lsls	r3, r3, #8
 8001f00:	4313      	orrs	r3, r2
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8001f0e:	f023 030c 	bic.w	r3, r3, #12
 8001f12:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001f1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	68da      	ldr	r2, [r3, #12]
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	69db      	ldr	r3, [r3, #28]
 8001f28:	021b      	lsls	r3, r3, #8
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	011a      	lsls	r2, r3, #4
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
 8001f3c:	031b      	lsls	r3, r3, #12
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8001f4c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	011b      	lsls	r3, r3, #4
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d101      	bne.n	8001fd2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001fce:	2302      	movs	r3, #2
 8001fd0:	e0ae      	b.n	8002130 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b0c      	cmp	r3, #12
 8001fde:	f200 809f 	bhi.w	8002120 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001fe2:	a201      	add	r2, pc, #4	@ (adr r2, 8001fe8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe8:	0800201d 	.word	0x0800201d
 8001fec:	08002121 	.word	0x08002121
 8001ff0:	08002121 	.word	0x08002121
 8001ff4:	08002121 	.word	0x08002121
 8001ff8:	0800205d 	.word	0x0800205d
 8001ffc:	08002121 	.word	0x08002121
 8002000:	08002121 	.word	0x08002121
 8002004:	08002121 	.word	0x08002121
 8002008:	0800209f 	.word	0x0800209f
 800200c:	08002121 	.word	0x08002121
 8002010:	08002121 	.word	0x08002121
 8002014:	08002121 	.word	0x08002121
 8002018:	080020df 	.word	0x080020df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68b9      	ldr	r1, [r7, #8]
 8002022:	4618      	mov	r0, r3
 8002024:	f000 f9be 	bl	80023a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	699a      	ldr	r2, [r3, #24]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f042 0208 	orr.w	r2, r2, #8
 8002036:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	699a      	ldr	r2, [r3, #24]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 0204 	bic.w	r2, r2, #4
 8002046:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6999      	ldr	r1, [r3, #24]
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	691a      	ldr	r2, [r3, #16]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	430a      	orrs	r2, r1
 8002058:	619a      	str	r2, [r3, #24]
      break;
 800205a:	e064      	b.n	8002126 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68b9      	ldr	r1, [r7, #8]
 8002062:	4618      	mov	r0, r3
 8002064:	f000 fa04 	bl	8002470 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	699a      	ldr	r2, [r3, #24]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002076:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	699a      	ldr	r2, [r3, #24]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002086:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6999      	ldr	r1, [r3, #24]
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	021a      	lsls	r2, r3, #8
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	430a      	orrs	r2, r1
 800209a:	619a      	str	r2, [r3, #24]
      break;
 800209c:	e043      	b.n	8002126 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68b9      	ldr	r1, [r7, #8]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f000 fa4d 	bl	8002544 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	69da      	ldr	r2, [r3, #28]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f042 0208 	orr.w	r2, r2, #8
 80020b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	69da      	ldr	r2, [r3, #28]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 0204 	bic.w	r2, r2, #4
 80020c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	69d9      	ldr	r1, [r3, #28]
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	691a      	ldr	r2, [r3, #16]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	430a      	orrs	r2, r1
 80020da:	61da      	str	r2, [r3, #28]
      break;
 80020dc:	e023      	b.n	8002126 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68b9      	ldr	r1, [r7, #8]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f000 fa97 	bl	8002618 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	69da      	ldr	r2, [r3, #28]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80020f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	69da      	ldr	r2, [r3, #28]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002108:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	69d9      	ldr	r1, [r3, #28]
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	021a      	lsls	r2, r3, #8
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	430a      	orrs	r2, r1
 800211c:	61da      	str	r2, [r3, #28]
      break;
 800211e:	e002      	b.n	8002126 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	75fb      	strb	r3, [r7, #23]
      break;
 8002124:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800212e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002142:	2300      	movs	r3, #0
 8002144:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800214c:	2b01      	cmp	r3, #1
 800214e:	d101      	bne.n	8002154 <HAL_TIM_ConfigClockSource+0x1c>
 8002150:	2302      	movs	r3, #2
 8002152:	e0b4      	b.n	80022be <HAL_TIM_ConfigClockSource+0x186>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2202      	movs	r2, #2
 8002160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002172:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800217a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68ba      	ldr	r2, [r7, #8]
 8002182:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800218c:	d03e      	beq.n	800220c <HAL_TIM_ConfigClockSource+0xd4>
 800218e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002192:	f200 8087 	bhi.w	80022a4 <HAL_TIM_ConfigClockSource+0x16c>
 8002196:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800219a:	f000 8086 	beq.w	80022aa <HAL_TIM_ConfigClockSource+0x172>
 800219e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021a2:	d87f      	bhi.n	80022a4 <HAL_TIM_ConfigClockSource+0x16c>
 80021a4:	2b70      	cmp	r3, #112	@ 0x70
 80021a6:	d01a      	beq.n	80021de <HAL_TIM_ConfigClockSource+0xa6>
 80021a8:	2b70      	cmp	r3, #112	@ 0x70
 80021aa:	d87b      	bhi.n	80022a4 <HAL_TIM_ConfigClockSource+0x16c>
 80021ac:	2b60      	cmp	r3, #96	@ 0x60
 80021ae:	d050      	beq.n	8002252 <HAL_TIM_ConfigClockSource+0x11a>
 80021b0:	2b60      	cmp	r3, #96	@ 0x60
 80021b2:	d877      	bhi.n	80022a4 <HAL_TIM_ConfigClockSource+0x16c>
 80021b4:	2b50      	cmp	r3, #80	@ 0x50
 80021b6:	d03c      	beq.n	8002232 <HAL_TIM_ConfigClockSource+0xfa>
 80021b8:	2b50      	cmp	r3, #80	@ 0x50
 80021ba:	d873      	bhi.n	80022a4 <HAL_TIM_ConfigClockSource+0x16c>
 80021bc:	2b40      	cmp	r3, #64	@ 0x40
 80021be:	d058      	beq.n	8002272 <HAL_TIM_ConfigClockSource+0x13a>
 80021c0:	2b40      	cmp	r3, #64	@ 0x40
 80021c2:	d86f      	bhi.n	80022a4 <HAL_TIM_ConfigClockSource+0x16c>
 80021c4:	2b30      	cmp	r3, #48	@ 0x30
 80021c6:	d064      	beq.n	8002292 <HAL_TIM_ConfigClockSource+0x15a>
 80021c8:	2b30      	cmp	r3, #48	@ 0x30
 80021ca:	d86b      	bhi.n	80022a4 <HAL_TIM_ConfigClockSource+0x16c>
 80021cc:	2b20      	cmp	r3, #32
 80021ce:	d060      	beq.n	8002292 <HAL_TIM_ConfigClockSource+0x15a>
 80021d0:	2b20      	cmp	r3, #32
 80021d2:	d867      	bhi.n	80022a4 <HAL_TIM_ConfigClockSource+0x16c>
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d05c      	beq.n	8002292 <HAL_TIM_ConfigClockSource+0x15a>
 80021d8:	2b10      	cmp	r3, #16
 80021da:	d05a      	beq.n	8002292 <HAL_TIM_ConfigClockSource+0x15a>
 80021dc:	e062      	b.n	80022a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80021ee:	f000 fad8 	bl	80027a2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002200:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	609a      	str	r2, [r3, #8]
      break;
 800220a:	e04f      	b.n	80022ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800221c:	f000 fac1 	bl	80027a2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800222e:	609a      	str	r2, [r3, #8]
      break;
 8002230:	e03c      	b.n	80022ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800223e:	461a      	mov	r2, r3
 8002240:	f000 fa38 	bl	80026b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2150      	movs	r1, #80	@ 0x50
 800224a:	4618      	mov	r0, r3
 800224c:	f000 fa8f 	bl	800276e <TIM_ITRx_SetConfig>
      break;
 8002250:	e02c      	b.n	80022ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800225e:	461a      	mov	r2, r3
 8002260:	f000 fa56 	bl	8002710 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2160      	movs	r1, #96	@ 0x60
 800226a:	4618      	mov	r0, r3
 800226c:	f000 fa7f 	bl	800276e <TIM_ITRx_SetConfig>
      break;
 8002270:	e01c      	b.n	80022ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800227e:	461a      	mov	r2, r3
 8002280:	f000 fa18 	bl	80026b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2140      	movs	r1, #64	@ 0x40
 800228a:	4618      	mov	r0, r3
 800228c:	f000 fa6f 	bl	800276e <TIM_ITRx_SetConfig>
      break;
 8002290:	e00c      	b.n	80022ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4619      	mov	r1, r3
 800229c:	4610      	mov	r0, r2
 800229e:	f000 fa66 	bl	800276e <TIM_ITRx_SetConfig>
      break;
 80022a2:	e003      	b.n	80022ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	73fb      	strb	r3, [r7, #15]
      break;
 80022a8:	e000      	b.n	80022ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80022aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80022bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
	...

080022c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a2f      	ldr	r2, [pc, #188]	@ (8002398 <TIM_Base_SetConfig+0xd0>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d00b      	beq.n	80022f8 <TIM_Base_SetConfig+0x30>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022e6:	d007      	beq.n	80022f8 <TIM_Base_SetConfig+0x30>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a2c      	ldr	r2, [pc, #176]	@ (800239c <TIM_Base_SetConfig+0xd4>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d003      	beq.n	80022f8 <TIM_Base_SetConfig+0x30>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a2b      	ldr	r2, [pc, #172]	@ (80023a0 <TIM_Base_SetConfig+0xd8>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d108      	bne.n	800230a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	4313      	orrs	r3, r2
 8002308:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a22      	ldr	r2, [pc, #136]	@ (8002398 <TIM_Base_SetConfig+0xd0>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d00b      	beq.n	800232a <TIM_Base_SetConfig+0x62>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002318:	d007      	beq.n	800232a <TIM_Base_SetConfig+0x62>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a1f      	ldr	r2, [pc, #124]	@ (800239c <TIM_Base_SetConfig+0xd4>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d003      	beq.n	800232a <TIM_Base_SetConfig+0x62>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a1e      	ldr	r2, [pc, #120]	@ (80023a0 <TIM_Base_SetConfig+0xd8>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d108      	bne.n	800233c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002330:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	4313      	orrs	r3, r2
 800233a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	4313      	orrs	r3, r2
 8002348:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a0d      	ldr	r2, [pc, #52]	@ (8002398 <TIM_Base_SetConfig+0xd0>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d103      	bne.n	8002370 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	691a      	ldr	r2, [r3, #16]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	d005      	beq.n	800238e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	f023 0201 	bic.w	r2, r3, #1
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	611a      	str	r2, [r3, #16]
  }
}
 800238e:	bf00      	nop
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr
 8002398:	40012c00 	.word	0x40012c00
 800239c:	40000400 	.word	0x40000400
 80023a0:	40000800 	.word	0x40000800

080023a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b087      	sub	sp, #28
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	f023 0201 	bic.w	r2, r3, #1
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f023 0303 	bic.w	r3, r3, #3
 80023da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	f023 0302 	bic.w	r3, r3, #2
 80023ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a1c      	ldr	r2, [pc, #112]	@ (800246c <TIM_OC1_SetConfig+0xc8>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d10c      	bne.n	800241a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	f023 0308 	bic.w	r3, r3, #8
 8002406:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	697a      	ldr	r2, [r7, #20]
 800240e:	4313      	orrs	r3, r2
 8002410:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	f023 0304 	bic.w	r3, r3, #4
 8002418:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a13      	ldr	r2, [pc, #76]	@ (800246c <TIM_OC1_SetConfig+0xc8>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d111      	bne.n	8002446 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002428:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002430:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	4313      	orrs	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	4313      	orrs	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	621a      	str	r2, [r3, #32]
}
 8002460:	bf00      	nop
 8002462:	371c      	adds	r7, #28
 8002464:	46bd      	mov	sp, r7
 8002466:	bc80      	pop	{r7}
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	40012c00 	.word	0x40012c00

08002470 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002470:	b480      	push	{r7}
 8002472:	b087      	sub	sp, #28
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	f023 0210 	bic.w	r2, r3, #16
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800249e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	021b      	lsls	r3, r3, #8
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	f023 0320 	bic.w	r3, r3, #32
 80024ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	011b      	lsls	r3, r3, #4
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a1d      	ldr	r2, [pc, #116]	@ (8002540 <TIM_OC2_SetConfig+0xd0>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d10d      	bne.n	80024ec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80024d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	011b      	lsls	r3, r3, #4
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80024ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a14      	ldr	r2, [pc, #80]	@ (8002540 <TIM_OC2_SetConfig+0xd0>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d113      	bne.n	800251c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80024fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002502:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	4313      	orrs	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	4313      	orrs	r3, r2
 800251a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	621a      	str	r2, [r3, #32]
}
 8002536:	bf00      	nop
 8002538:	371c      	adds	r7, #28
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr
 8002540:	40012c00 	.word	0x40012c00

08002544 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002544:	b480      	push	{r7}
 8002546:	b087      	sub	sp, #28
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f023 0303 	bic.w	r3, r3, #3
 800257a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	4313      	orrs	r3, r2
 8002584:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800258c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	021b      	lsls	r3, r3, #8
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	4313      	orrs	r3, r2
 8002598:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a1d      	ldr	r2, [pc, #116]	@ (8002614 <TIM_OC3_SetConfig+0xd0>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d10d      	bne.n	80025be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80025a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	021b      	lsls	r3, r3, #8
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80025bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a14      	ldr	r2, [pc, #80]	@ (8002614 <TIM_OC3_SetConfig+0xd0>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d113      	bne.n	80025ee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80025cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80025d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	011b      	lsls	r3, r3, #4
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	4313      	orrs	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	011b      	lsls	r3, r3, #4
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685a      	ldr	r2, [r3, #4]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	621a      	str	r2, [r3, #32]
}
 8002608:	bf00      	nop
 800260a:	371c      	adds	r7, #28
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	40012c00 	.word	0x40012c00

08002618 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002618:	b480      	push	{r7}
 800261a:	b087      	sub	sp, #28
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a1b      	ldr	r3, [r3, #32]
 800262c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002646:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800264e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	021b      	lsls	r3, r3, #8
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	4313      	orrs	r3, r2
 800265a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002662:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	031b      	lsls	r3, r3, #12
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	4313      	orrs	r3, r2
 800266e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a0f      	ldr	r2, [pc, #60]	@ (80026b0 <TIM_OC4_SetConfig+0x98>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d109      	bne.n	800268c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800267e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	019b      	lsls	r3, r3, #6
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	4313      	orrs	r3, r2
 800268a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	621a      	str	r2, [r3, #32]
}
 80026a6:	bf00      	nop
 80026a8:	371c      	adds	r7, #28
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr
 80026b0:	40012c00 	.word	0x40012c00

080026b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b087      	sub	sp, #28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	f023 0201 	bic.w	r2, r3, #1
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80026de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	011b      	lsls	r3, r3, #4
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	f023 030a 	bic.w	r3, r3, #10
 80026f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	621a      	str	r2, [r3, #32]
}
 8002706:	bf00      	nop
 8002708:	371c      	adds	r7, #28
 800270a:	46bd      	mov	sp, r7
 800270c:	bc80      	pop	{r7}
 800270e:	4770      	bx	lr

08002710 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002710:	b480      	push	{r7}
 8002712:	b087      	sub	sp, #28
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	f023 0210 	bic.w	r2, r3, #16
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800273a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	031b      	lsls	r3, r3, #12
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	4313      	orrs	r3, r2
 8002744:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800274c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	011b      	lsls	r3, r3, #4
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	4313      	orrs	r3, r2
 8002756:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	621a      	str	r2, [r3, #32]
}
 8002764:	bf00      	nop
 8002766:	371c      	adds	r7, #28
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr

0800276e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800276e:	b480      	push	{r7}
 8002770:	b085      	sub	sp, #20
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
 8002776:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002784:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	4313      	orrs	r3, r2
 800278c:	f043 0307 	orr.w	r3, r3, #7
 8002790:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	609a      	str	r2, [r3, #8]
}
 8002798:	bf00      	nop
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr

080027a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b087      	sub	sp, #28
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	60f8      	str	r0, [r7, #12]
 80027aa:	60b9      	str	r1, [r7, #8]
 80027ac:	607a      	str	r2, [r7, #4]
 80027ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80027bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	021a      	lsls	r2, r3, #8
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	431a      	orrs	r2, r3
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	609a      	str	r2, [r3, #8]
}
 80027d6:	bf00      	nop
 80027d8:	371c      	adds	r7, #28
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr

080027e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d101      	bne.n	80027f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027f4:	2302      	movs	r3, #2
 80027f6:	e046      	b.n	8002886 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2202      	movs	r2, #2
 8002804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800281e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	4313      	orrs	r3, r2
 8002828:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a16      	ldr	r2, [pc, #88]	@ (8002890 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d00e      	beq.n	800285a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002844:	d009      	beq.n	800285a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a12      	ldr	r2, [pc, #72]	@ (8002894 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d004      	beq.n	800285a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a10      	ldr	r2, [pc, #64]	@ (8002898 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d10c      	bne.n	8002874 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002860:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	4313      	orrs	r3, r2
 800286a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68ba      	ldr	r2, [r7, #8]
 8002872:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr
 8002890:	40012c00 	.word	0x40012c00
 8002894:	40000400 	.word	0x40000400
 8002898:	40000800 	.word	0x40000800

0800289c <memset>:
 800289c:	4603      	mov	r3, r0
 800289e:	4402      	add	r2, r0
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d100      	bne.n	80028a6 <memset+0xa>
 80028a4:	4770      	bx	lr
 80028a6:	f803 1b01 	strb.w	r1, [r3], #1
 80028aa:	e7f9      	b.n	80028a0 <memset+0x4>

080028ac <__libc_init_array>:
 80028ac:	b570      	push	{r4, r5, r6, lr}
 80028ae:	2600      	movs	r6, #0
 80028b0:	4d0c      	ldr	r5, [pc, #48]	@ (80028e4 <__libc_init_array+0x38>)
 80028b2:	4c0d      	ldr	r4, [pc, #52]	@ (80028e8 <__libc_init_array+0x3c>)
 80028b4:	1b64      	subs	r4, r4, r5
 80028b6:	10a4      	asrs	r4, r4, #2
 80028b8:	42a6      	cmp	r6, r4
 80028ba:	d109      	bne.n	80028d0 <__libc_init_array+0x24>
 80028bc:	f000 f81a 	bl	80028f4 <_init>
 80028c0:	2600      	movs	r6, #0
 80028c2:	4d0a      	ldr	r5, [pc, #40]	@ (80028ec <__libc_init_array+0x40>)
 80028c4:	4c0a      	ldr	r4, [pc, #40]	@ (80028f0 <__libc_init_array+0x44>)
 80028c6:	1b64      	subs	r4, r4, r5
 80028c8:	10a4      	asrs	r4, r4, #2
 80028ca:	42a6      	cmp	r6, r4
 80028cc:	d105      	bne.n	80028da <__libc_init_array+0x2e>
 80028ce:	bd70      	pop	{r4, r5, r6, pc}
 80028d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80028d4:	4798      	blx	r3
 80028d6:	3601      	adds	r6, #1
 80028d8:	e7ee      	b.n	80028b8 <__libc_init_array+0xc>
 80028da:	f855 3b04 	ldr.w	r3, [r5], #4
 80028de:	4798      	blx	r3
 80028e0:	3601      	adds	r6, #1
 80028e2:	e7f2      	b.n	80028ca <__libc_init_array+0x1e>
 80028e4:	08002930 	.word	0x08002930
 80028e8:	08002930 	.word	0x08002930
 80028ec:	08002930 	.word	0x08002930
 80028f0:	08002934 	.word	0x08002934

080028f4 <_init>:
 80028f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028f6:	bf00      	nop
 80028f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028fa:	bc08      	pop	{r3}
 80028fc:	469e      	mov	lr, r3
 80028fe:	4770      	bx	lr

08002900 <_fini>:
 8002900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002902:	bf00      	nop
 8002904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002906:	bc08      	pop	{r3}
 8002908:	469e      	mov	lr, r3
 800290a:	4770      	bx	lr
