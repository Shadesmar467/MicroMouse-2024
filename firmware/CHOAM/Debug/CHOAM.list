
CHOAM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047ec  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080048fc  080048fc  000058fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800493c  0800493c  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800493c  0800493c  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800493c  0800493c  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800493c  0800493c  0000593c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004940  08004940  00005940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004944  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  2000000c  08004950  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  08004950  00006150  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a980  00000000  00000000  00006035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000204c  00000000  00000000  000109b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b80  00000000  00000000  00012a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008d9  00000000  00000000  00013588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018360  00000000  00000000  00013e61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d823  00000000  00000000  0002c1c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d380  00000000  00000000  000399e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6d64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003130  00000000  00000000  000c6da8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000c9ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	080048e4 	.word	0x080048e4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	080048e4 	.word	0x080048e4

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	@ 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__gedf2>:
 800071c:	f04f 3cff 	mov.w	ip, #4294967295
 8000720:	e006      	b.n	8000730 <__cmpdf2+0x4>
 8000722:	bf00      	nop

08000724 <__ledf2>:
 8000724:	f04f 0c01 	mov.w	ip, #1
 8000728:	e002      	b.n	8000730 <__cmpdf2+0x4>
 800072a:	bf00      	nop

0800072c <__cmpdf2>:
 800072c:	f04f 0c01 	mov.w	ip, #1
 8000730:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000734:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000738:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800073c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000746:	d01b      	beq.n	8000780 <__cmpdf2+0x54>
 8000748:	b001      	add	sp, #4
 800074a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800074e:	bf0c      	ite	eq
 8000750:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000754:	ea91 0f03 	teqne	r1, r3
 8000758:	bf02      	ittt	eq
 800075a:	ea90 0f02 	teqeq	r0, r2
 800075e:	2000      	moveq	r0, #0
 8000760:	4770      	bxeq	lr
 8000762:	f110 0f00 	cmn.w	r0, #0
 8000766:	ea91 0f03 	teq	r1, r3
 800076a:	bf58      	it	pl
 800076c:	4299      	cmppl	r1, r3
 800076e:	bf08      	it	eq
 8000770:	4290      	cmpeq	r0, r2
 8000772:	bf2c      	ite	cs
 8000774:	17d8      	asrcs	r0, r3, #31
 8000776:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800077a:	f040 0001 	orr.w	r0, r0, #1
 800077e:	4770      	bx	lr
 8000780:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000784:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000788:	d102      	bne.n	8000790 <__cmpdf2+0x64>
 800078a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800078e:	d107      	bne.n	80007a0 <__cmpdf2+0x74>
 8000790:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000794:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000798:	d1d6      	bne.n	8000748 <__cmpdf2+0x1c>
 800079a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800079e:	d0d3      	beq.n	8000748 <__cmpdf2+0x1c>
 80007a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop

080007a8 <__aeabi_cdrcmple>:
 80007a8:	4684      	mov	ip, r0
 80007aa:	4610      	mov	r0, r2
 80007ac:	4662      	mov	r2, ip
 80007ae:	468c      	mov	ip, r1
 80007b0:	4619      	mov	r1, r3
 80007b2:	4663      	mov	r3, ip
 80007b4:	e000      	b.n	80007b8 <__aeabi_cdcmpeq>
 80007b6:	bf00      	nop

080007b8 <__aeabi_cdcmpeq>:
 80007b8:	b501      	push	{r0, lr}
 80007ba:	f7ff ffb7 	bl	800072c <__cmpdf2>
 80007be:	2800      	cmp	r0, #0
 80007c0:	bf48      	it	mi
 80007c2:	f110 0f00 	cmnmi.w	r0, #0
 80007c6:	bd01      	pop	{r0, pc}

080007c8 <__aeabi_dcmpeq>:
 80007c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007cc:	f7ff fff4 	bl	80007b8 <__aeabi_cdcmpeq>
 80007d0:	bf0c      	ite	eq
 80007d2:	2001      	moveq	r0, #1
 80007d4:	2000      	movne	r0, #0
 80007d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80007da:	bf00      	nop

080007dc <__aeabi_dcmplt>:
 80007dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007e0:	f7ff ffea 	bl	80007b8 <__aeabi_cdcmpeq>
 80007e4:	bf34      	ite	cc
 80007e6:	2001      	movcc	r0, #1
 80007e8:	2000      	movcs	r0, #0
 80007ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80007ee:	bf00      	nop

080007f0 <__aeabi_dcmple>:
 80007f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007f4:	f7ff ffe0 	bl	80007b8 <__aeabi_cdcmpeq>
 80007f8:	bf94      	ite	ls
 80007fa:	2001      	movls	r0, #1
 80007fc:	2000      	movhi	r0, #0
 80007fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000802:	bf00      	nop

08000804 <__aeabi_dcmpge>:
 8000804:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000808:	f7ff ffce 	bl	80007a8 <__aeabi_cdrcmple>
 800080c:	bf94      	ite	ls
 800080e:	2001      	movls	r0, #1
 8000810:	2000      	movhi	r0, #0
 8000812:	f85d fb08 	ldr.w	pc, [sp], #8
 8000816:	bf00      	nop

08000818 <__aeabi_dcmpgt>:
 8000818:	f84d ed08 	str.w	lr, [sp, #-8]!
 800081c:	f7ff ffc4 	bl	80007a8 <__aeabi_cdrcmple>
 8000820:	bf34      	ite	cc
 8000822:	2001      	movcc	r0, #1
 8000824:	2000      	movcs	r0, #0
 8000826:	f85d fb08 	ldr.w	pc, [sp], #8
 800082a:	bf00      	nop

0800082c <__aeabi_frsub>:
 800082c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000830:	e002      	b.n	8000838 <__addsf3>
 8000832:	bf00      	nop

08000834 <__aeabi_fsub>:
 8000834:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000838 <__addsf3>:
 8000838:	0042      	lsls	r2, r0, #1
 800083a:	bf1f      	itttt	ne
 800083c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000840:	ea92 0f03 	teqne	r2, r3
 8000844:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000848:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800084c:	d06a      	beq.n	8000924 <__addsf3+0xec>
 800084e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000852:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000856:	bfc1      	itttt	gt
 8000858:	18d2      	addgt	r2, r2, r3
 800085a:	4041      	eorgt	r1, r0
 800085c:	4048      	eorgt	r0, r1
 800085e:	4041      	eorgt	r1, r0
 8000860:	bfb8      	it	lt
 8000862:	425b      	neglt	r3, r3
 8000864:	2b19      	cmp	r3, #25
 8000866:	bf88      	it	hi
 8000868:	4770      	bxhi	lr
 800086a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800086e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000872:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000876:	bf18      	it	ne
 8000878:	4240      	negne	r0, r0
 800087a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800087e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000882:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000886:	bf18      	it	ne
 8000888:	4249      	negne	r1, r1
 800088a:	ea92 0f03 	teq	r2, r3
 800088e:	d03f      	beq.n	8000910 <__addsf3+0xd8>
 8000890:	f1a2 0201 	sub.w	r2, r2, #1
 8000894:	fa41 fc03 	asr.w	ip, r1, r3
 8000898:	eb10 000c 	adds.w	r0, r0, ip
 800089c:	f1c3 0320 	rsb	r3, r3, #32
 80008a0:	fa01 f103 	lsl.w	r1, r1, r3
 80008a4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80008a8:	d502      	bpl.n	80008b0 <__addsf3+0x78>
 80008aa:	4249      	negs	r1, r1
 80008ac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80008b0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80008b4:	d313      	bcc.n	80008de <__addsf3+0xa6>
 80008b6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80008ba:	d306      	bcc.n	80008ca <__addsf3+0x92>
 80008bc:	0840      	lsrs	r0, r0, #1
 80008be:	ea4f 0131 	mov.w	r1, r1, rrx
 80008c2:	f102 0201 	add.w	r2, r2, #1
 80008c6:	2afe      	cmp	r2, #254	@ 0xfe
 80008c8:	d251      	bcs.n	800096e <__addsf3+0x136>
 80008ca:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80008ce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008d2:	bf08      	it	eq
 80008d4:	f020 0001 	biceq.w	r0, r0, #1
 80008d8:	ea40 0003 	orr.w	r0, r0, r3
 80008dc:	4770      	bx	lr
 80008de:	0049      	lsls	r1, r1, #1
 80008e0:	eb40 0000 	adc.w	r0, r0, r0
 80008e4:	3a01      	subs	r2, #1
 80008e6:	bf28      	it	cs
 80008e8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80008ec:	d2ed      	bcs.n	80008ca <__addsf3+0x92>
 80008ee:	fab0 fc80 	clz	ip, r0
 80008f2:	f1ac 0c08 	sub.w	ip, ip, #8
 80008f6:	ebb2 020c 	subs.w	r2, r2, ip
 80008fa:	fa00 f00c 	lsl.w	r0, r0, ip
 80008fe:	bfaa      	itet	ge
 8000900:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000904:	4252      	neglt	r2, r2
 8000906:	4318      	orrge	r0, r3
 8000908:	bfbc      	itt	lt
 800090a:	40d0      	lsrlt	r0, r2
 800090c:	4318      	orrlt	r0, r3
 800090e:	4770      	bx	lr
 8000910:	f092 0f00 	teq	r2, #0
 8000914:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000918:	bf06      	itte	eq
 800091a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800091e:	3201      	addeq	r2, #1
 8000920:	3b01      	subne	r3, #1
 8000922:	e7b5      	b.n	8000890 <__addsf3+0x58>
 8000924:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000928:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800092c:	bf18      	it	ne
 800092e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000932:	d021      	beq.n	8000978 <__addsf3+0x140>
 8000934:	ea92 0f03 	teq	r2, r3
 8000938:	d004      	beq.n	8000944 <__addsf3+0x10c>
 800093a:	f092 0f00 	teq	r2, #0
 800093e:	bf08      	it	eq
 8000940:	4608      	moveq	r0, r1
 8000942:	4770      	bx	lr
 8000944:	ea90 0f01 	teq	r0, r1
 8000948:	bf1c      	itt	ne
 800094a:	2000      	movne	r0, #0
 800094c:	4770      	bxne	lr
 800094e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000952:	d104      	bne.n	800095e <__addsf3+0x126>
 8000954:	0040      	lsls	r0, r0, #1
 8000956:	bf28      	it	cs
 8000958:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800095c:	4770      	bx	lr
 800095e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000962:	bf3c      	itt	cc
 8000964:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000968:	4770      	bxcc	lr
 800096a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800096e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000972:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000976:	4770      	bx	lr
 8000978:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800097c:	bf16      	itet	ne
 800097e:	4608      	movne	r0, r1
 8000980:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000984:	4601      	movne	r1, r0
 8000986:	0242      	lsls	r2, r0, #9
 8000988:	bf06      	itte	eq
 800098a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800098e:	ea90 0f01 	teqeq	r0, r1
 8000992:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000996:	4770      	bx	lr

08000998 <__aeabi_ui2f>:
 8000998:	f04f 0300 	mov.w	r3, #0
 800099c:	e004      	b.n	80009a8 <__aeabi_i2f+0x8>
 800099e:	bf00      	nop

080009a0 <__aeabi_i2f>:
 80009a0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80009a4:	bf48      	it	mi
 80009a6:	4240      	negmi	r0, r0
 80009a8:	ea5f 0c00 	movs.w	ip, r0
 80009ac:	bf08      	it	eq
 80009ae:	4770      	bxeq	lr
 80009b0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80009b4:	4601      	mov	r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	e01c      	b.n	80009f6 <__aeabi_l2f+0x2a>

080009bc <__aeabi_ul2f>:
 80009bc:	ea50 0201 	orrs.w	r2, r0, r1
 80009c0:	bf08      	it	eq
 80009c2:	4770      	bxeq	lr
 80009c4:	f04f 0300 	mov.w	r3, #0
 80009c8:	e00a      	b.n	80009e0 <__aeabi_l2f+0x14>
 80009ca:	bf00      	nop

080009cc <__aeabi_l2f>:
 80009cc:	ea50 0201 	orrs.w	r2, r0, r1
 80009d0:	bf08      	it	eq
 80009d2:	4770      	bxeq	lr
 80009d4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80009d8:	d502      	bpl.n	80009e0 <__aeabi_l2f+0x14>
 80009da:	4240      	negs	r0, r0
 80009dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009e0:	ea5f 0c01 	movs.w	ip, r1
 80009e4:	bf02      	ittt	eq
 80009e6:	4684      	moveq	ip, r0
 80009e8:	4601      	moveq	r1, r0
 80009ea:	2000      	moveq	r0, #0
 80009ec:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80009f0:	bf08      	it	eq
 80009f2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80009f6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80009fa:	fabc f28c 	clz	r2, ip
 80009fe:	3a08      	subs	r2, #8
 8000a00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000a04:	db10      	blt.n	8000a28 <__aeabi_l2f+0x5c>
 8000a06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000a0a:	4463      	add	r3, ip
 8000a0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a10:	f1c2 0220 	rsb	r2, r2, #32
 8000a14:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000a18:	fa20 f202 	lsr.w	r2, r0, r2
 8000a1c:	eb43 0002 	adc.w	r0, r3, r2
 8000a20:	bf08      	it	eq
 8000a22:	f020 0001 	biceq.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	f102 0220 	add.w	r2, r2, #32
 8000a2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000a30:	f1c2 0220 	rsb	r2, r2, #32
 8000a34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000a38:	fa21 f202 	lsr.w	r2, r1, r2
 8000a3c:	eb43 0002 	adc.w	r0, r3, r2
 8000a40:	bf08      	it	eq
 8000a42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a46:	4770      	bx	lr

08000a48 <__aeabi_fmul>:
 8000a48:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000a4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000a50:	bf1e      	ittt	ne
 8000a52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000a56:	ea92 0f0c 	teqne	r2, ip
 8000a5a:	ea93 0f0c 	teqne	r3, ip
 8000a5e:	d06f      	beq.n	8000b40 <__aeabi_fmul+0xf8>
 8000a60:	441a      	add	r2, r3
 8000a62:	ea80 0c01 	eor.w	ip, r0, r1
 8000a66:	0240      	lsls	r0, r0, #9
 8000a68:	bf18      	it	ne
 8000a6a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000a6e:	d01e      	beq.n	8000aae <__aeabi_fmul+0x66>
 8000a70:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000a74:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000a78:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000a7c:	fba0 3101 	umull	r3, r1, r0, r1
 8000a80:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000a84:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000a88:	bf3e      	ittt	cc
 8000a8a:	0049      	lslcc	r1, r1, #1
 8000a8c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000a90:	005b      	lslcc	r3, r3, #1
 8000a92:	ea40 0001 	orr.w	r0, r0, r1
 8000a96:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000a9a:	2afd      	cmp	r2, #253	@ 0xfd
 8000a9c:	d81d      	bhi.n	8000ada <__aeabi_fmul+0x92>
 8000a9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000aa2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000aa6:	bf08      	it	eq
 8000aa8:	f020 0001 	biceq.w	r0, r0, #1
 8000aac:	4770      	bx	lr
 8000aae:	f090 0f00 	teq	r0, #0
 8000ab2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ab6:	bf08      	it	eq
 8000ab8:	0249      	lsleq	r1, r1, #9
 8000aba:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000abe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ac2:	3a7f      	subs	r2, #127	@ 0x7f
 8000ac4:	bfc2      	ittt	gt
 8000ac6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000aca:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ace:	4770      	bxgt	lr
 8000ad0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ad4:	f04f 0300 	mov.w	r3, #0
 8000ad8:	3a01      	subs	r2, #1
 8000ada:	dc5d      	bgt.n	8000b98 <__aeabi_fmul+0x150>
 8000adc:	f112 0f19 	cmn.w	r2, #25
 8000ae0:	bfdc      	itt	le
 8000ae2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000ae6:	4770      	bxle	lr
 8000ae8:	f1c2 0200 	rsb	r2, r2, #0
 8000aec:	0041      	lsls	r1, r0, #1
 8000aee:	fa21 f102 	lsr.w	r1, r1, r2
 8000af2:	f1c2 0220 	rsb	r2, r2, #32
 8000af6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000afa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000afe:	f140 0000 	adc.w	r0, r0, #0
 8000b02:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000b06:	bf08      	it	eq
 8000b08:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b0c:	4770      	bx	lr
 8000b0e:	f092 0f00 	teq	r2, #0
 8000b12:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000b16:	bf02      	ittt	eq
 8000b18:	0040      	lsleq	r0, r0, #1
 8000b1a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000b1e:	3a01      	subeq	r2, #1
 8000b20:	d0f9      	beq.n	8000b16 <__aeabi_fmul+0xce>
 8000b22:	ea40 000c 	orr.w	r0, r0, ip
 8000b26:	f093 0f00 	teq	r3, #0
 8000b2a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b2e:	bf02      	ittt	eq
 8000b30:	0049      	lsleq	r1, r1, #1
 8000b32:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000b36:	3b01      	subeq	r3, #1
 8000b38:	d0f9      	beq.n	8000b2e <__aeabi_fmul+0xe6>
 8000b3a:	ea41 010c 	orr.w	r1, r1, ip
 8000b3e:	e78f      	b.n	8000a60 <__aeabi_fmul+0x18>
 8000b40:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000b44:	ea92 0f0c 	teq	r2, ip
 8000b48:	bf18      	it	ne
 8000b4a:	ea93 0f0c 	teqne	r3, ip
 8000b4e:	d00a      	beq.n	8000b66 <__aeabi_fmul+0x11e>
 8000b50:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000b54:	bf18      	it	ne
 8000b56:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000b5a:	d1d8      	bne.n	8000b0e <__aeabi_fmul+0xc6>
 8000b5c:	ea80 0001 	eor.w	r0, r0, r1
 8000b60:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000b64:	4770      	bx	lr
 8000b66:	f090 0f00 	teq	r0, #0
 8000b6a:	bf17      	itett	ne
 8000b6c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000b70:	4608      	moveq	r0, r1
 8000b72:	f091 0f00 	teqne	r1, #0
 8000b76:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000b7a:	d014      	beq.n	8000ba6 <__aeabi_fmul+0x15e>
 8000b7c:	ea92 0f0c 	teq	r2, ip
 8000b80:	d101      	bne.n	8000b86 <__aeabi_fmul+0x13e>
 8000b82:	0242      	lsls	r2, r0, #9
 8000b84:	d10f      	bne.n	8000ba6 <__aeabi_fmul+0x15e>
 8000b86:	ea93 0f0c 	teq	r3, ip
 8000b8a:	d103      	bne.n	8000b94 <__aeabi_fmul+0x14c>
 8000b8c:	024b      	lsls	r3, r1, #9
 8000b8e:	bf18      	it	ne
 8000b90:	4608      	movne	r0, r1
 8000b92:	d108      	bne.n	8000ba6 <__aeabi_fmul+0x15e>
 8000b94:	ea80 0001 	eor.w	r0, r0, r1
 8000b98:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000b9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ba0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba4:	4770      	bx	lr
 8000ba6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000baa:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000bae:	4770      	bx	lr

08000bb0 <__aeabi_fdiv>:
 8000bb0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000bb4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb8:	bf1e      	ittt	ne
 8000bba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bbe:	ea92 0f0c 	teqne	r2, ip
 8000bc2:	ea93 0f0c 	teqne	r3, ip
 8000bc6:	d069      	beq.n	8000c9c <__aeabi_fdiv+0xec>
 8000bc8:	eba2 0203 	sub.w	r2, r2, r3
 8000bcc:	ea80 0c01 	eor.w	ip, r0, r1
 8000bd0:	0249      	lsls	r1, r1, #9
 8000bd2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000bd6:	d037      	beq.n	8000c48 <__aeabi_fdiv+0x98>
 8000bd8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000bdc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000be0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000be4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000be8:	428b      	cmp	r3, r1
 8000bea:	bf38      	it	cc
 8000bec:	005b      	lslcc	r3, r3, #1
 8000bee:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000bf2:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	bf24      	itt	cs
 8000bfa:	1a5b      	subcs	r3, r3, r1
 8000bfc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000c00:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000c04:	bf24      	itt	cs
 8000c06:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000c0a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000c0e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000c12:	bf24      	itt	cs
 8000c14:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000c18:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000c1c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000c20:	bf24      	itt	cs
 8000c22:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000c26:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000c2a:	011b      	lsls	r3, r3, #4
 8000c2c:	bf18      	it	ne
 8000c2e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000c32:	d1e0      	bne.n	8000bf6 <__aeabi_fdiv+0x46>
 8000c34:	2afd      	cmp	r2, #253	@ 0xfd
 8000c36:	f63f af50 	bhi.w	8000ada <__aeabi_fmul+0x92>
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c4c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c50:	327f      	adds	r2, #127	@ 0x7f
 8000c52:	bfc2      	ittt	gt
 8000c54:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c58:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c5c:	4770      	bxgt	lr
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c62:	f04f 0300 	mov.w	r3, #0
 8000c66:	3a01      	subs	r2, #1
 8000c68:	e737      	b.n	8000ada <__aeabi_fmul+0x92>
 8000c6a:	f092 0f00 	teq	r2, #0
 8000c6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000c72:	bf02      	ittt	eq
 8000c74:	0040      	lsleq	r0, r0, #1
 8000c76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000c7a:	3a01      	subeq	r2, #1
 8000c7c:	d0f9      	beq.n	8000c72 <__aeabi_fdiv+0xc2>
 8000c7e:	ea40 000c 	orr.w	r0, r0, ip
 8000c82:	f093 0f00 	teq	r3, #0
 8000c86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c8a:	bf02      	ittt	eq
 8000c8c:	0049      	lsleq	r1, r1, #1
 8000c8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c92:	3b01      	subeq	r3, #1
 8000c94:	d0f9      	beq.n	8000c8a <__aeabi_fdiv+0xda>
 8000c96:	ea41 010c 	orr.w	r1, r1, ip
 8000c9a:	e795      	b.n	8000bc8 <__aeabi_fdiv+0x18>
 8000c9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca0:	ea92 0f0c 	teq	r2, ip
 8000ca4:	d108      	bne.n	8000cb8 <__aeabi_fdiv+0x108>
 8000ca6:	0242      	lsls	r2, r0, #9
 8000ca8:	f47f af7d 	bne.w	8000ba6 <__aeabi_fmul+0x15e>
 8000cac:	ea93 0f0c 	teq	r3, ip
 8000cb0:	f47f af70 	bne.w	8000b94 <__aeabi_fmul+0x14c>
 8000cb4:	4608      	mov	r0, r1
 8000cb6:	e776      	b.n	8000ba6 <__aeabi_fmul+0x15e>
 8000cb8:	ea93 0f0c 	teq	r3, ip
 8000cbc:	d104      	bne.n	8000cc8 <__aeabi_fdiv+0x118>
 8000cbe:	024b      	lsls	r3, r1, #9
 8000cc0:	f43f af4c 	beq.w	8000b5c <__aeabi_fmul+0x114>
 8000cc4:	4608      	mov	r0, r1
 8000cc6:	e76e      	b.n	8000ba6 <__aeabi_fmul+0x15e>
 8000cc8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ccc:	bf18      	it	ne
 8000cce:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000cd2:	d1ca      	bne.n	8000c6a <__aeabi_fdiv+0xba>
 8000cd4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000cd8:	f47f af5c 	bne.w	8000b94 <__aeabi_fmul+0x14c>
 8000cdc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000ce0:	f47f af3c 	bne.w	8000b5c <__aeabi_fmul+0x114>
 8000ce4:	e75f      	b.n	8000ba6 <__aeabi_fmul+0x15e>
 8000ce6:	bf00      	nop

08000ce8 <__gesf2>:
 8000ce8:	f04f 3cff 	mov.w	ip, #4294967295
 8000cec:	e006      	b.n	8000cfc <__cmpsf2+0x4>
 8000cee:	bf00      	nop

08000cf0 <__lesf2>:
 8000cf0:	f04f 0c01 	mov.w	ip, #1
 8000cf4:	e002      	b.n	8000cfc <__cmpsf2+0x4>
 8000cf6:	bf00      	nop

08000cf8 <__cmpsf2>:
 8000cf8:	f04f 0c01 	mov.w	ip, #1
 8000cfc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d00:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d04:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d08:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d0c:	bf18      	it	ne
 8000d0e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d12:	d011      	beq.n	8000d38 <__cmpsf2+0x40>
 8000d14:	b001      	add	sp, #4
 8000d16:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d1a:	bf18      	it	ne
 8000d1c:	ea90 0f01 	teqne	r0, r1
 8000d20:	bf58      	it	pl
 8000d22:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d26:	bf88      	it	hi
 8000d28:	17c8      	asrhi	r0, r1, #31
 8000d2a:	bf38      	it	cc
 8000d2c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d30:	bf18      	it	ne
 8000d32:	f040 0001 	orrne.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d3c:	d102      	bne.n	8000d44 <__cmpsf2+0x4c>
 8000d3e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d42:	d105      	bne.n	8000d50 <__cmpsf2+0x58>
 8000d44:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d48:	d1e4      	bne.n	8000d14 <__cmpsf2+0x1c>
 8000d4a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d4e:	d0e1      	beq.n	8000d14 <__cmpsf2+0x1c>
 8000d50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <__aeabi_cfrcmple>:
 8000d58:	4684      	mov	ip, r0
 8000d5a:	4608      	mov	r0, r1
 8000d5c:	4661      	mov	r1, ip
 8000d5e:	e7ff      	b.n	8000d60 <__aeabi_cfcmpeq>

08000d60 <__aeabi_cfcmpeq>:
 8000d60:	b50f      	push	{r0, r1, r2, r3, lr}
 8000d62:	f7ff ffc9 	bl	8000cf8 <__cmpsf2>
 8000d66:	2800      	cmp	r0, #0
 8000d68:	bf48      	it	mi
 8000d6a:	f110 0f00 	cmnmi.w	r0, #0
 8000d6e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d70 <__aeabi_fcmpeq>:
 8000d70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d74:	f7ff fff4 	bl	8000d60 <__aeabi_cfcmpeq>
 8000d78:	bf0c      	ite	eq
 8000d7a:	2001      	moveq	r0, #1
 8000d7c:	2000      	movne	r0, #0
 8000d7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d82:	bf00      	nop

08000d84 <__aeabi_fcmplt>:
 8000d84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d88:	f7ff ffea 	bl	8000d60 <__aeabi_cfcmpeq>
 8000d8c:	bf34      	ite	cc
 8000d8e:	2001      	movcc	r0, #1
 8000d90:	2000      	movcs	r0, #0
 8000d92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d96:	bf00      	nop

08000d98 <__aeabi_fcmple>:
 8000d98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d9c:	f7ff ffe0 	bl	8000d60 <__aeabi_cfcmpeq>
 8000da0:	bf94      	ite	ls
 8000da2:	2001      	movls	r0, #1
 8000da4:	2000      	movhi	r0, #0
 8000da6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000daa:	bf00      	nop

08000dac <__aeabi_fcmpge>:
 8000dac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000db0:	f7ff ffd2 	bl	8000d58 <__aeabi_cfrcmple>
 8000db4:	bf94      	ite	ls
 8000db6:	2001      	movls	r0, #1
 8000db8:	2000      	movhi	r0, #0
 8000dba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dbe:	bf00      	nop

08000dc0 <__aeabi_fcmpgt>:
 8000dc0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dc4:	f7ff ffc8 	bl	8000d58 <__aeabi_cfrcmple>
 8000dc8:	bf34      	ite	cc
 8000dca:	2001      	movcc	r0, #1
 8000dcc:	2000      	movcs	r0, #0
 8000dce:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dd2:	bf00      	nop

08000dd4 <__aeabi_f2uiz>:
 8000dd4:	0042      	lsls	r2, r0, #1
 8000dd6:	d20e      	bcs.n	8000df6 <__aeabi_f2uiz+0x22>
 8000dd8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000ddc:	d30b      	bcc.n	8000df6 <__aeabi_f2uiz+0x22>
 8000dde:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000de2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000de6:	d409      	bmi.n	8000dfc <__aeabi_f2uiz+0x28>
 8000de8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000dec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000df0:	fa23 f002 	lsr.w	r0, r3, r2
 8000df4:	4770      	bx	lr
 8000df6:	f04f 0000 	mov.w	r0, #0
 8000dfa:	4770      	bx	lr
 8000dfc:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000e00:	d101      	bne.n	8000e06 <__aeabi_f2uiz+0x32>
 8000e02:	0242      	lsls	r2, r0, #9
 8000e04:	d102      	bne.n	8000e0c <__aeabi_f2uiz+0x38>
 8000e06:	f04f 30ff 	mov.w	r0, #4294967295
 8000e0a:	4770      	bx	lr
 8000e0c:	f04f 0000 	mov.w	r0, #0
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop

08000e14 <ADC1_Select_CH4>:
#include "adc_manager.h"
#include "main.h"

void ADC1_Select_CH4(void){
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_4;
 8000e24:	2304      	movs	r3, #4
 8000e26:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e30:	1d3b      	adds	r3, r7, #4
 8000e32:	4619      	mov	r1, r3
 8000e34:	4805      	ldr	r0, [pc, #20]	@ (8000e4c <ADC1_Select_CH4+0x38>)
 8000e36:	f001 fac9 	bl	80023cc <HAL_ADC_ConfigChannel>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <ADC1_Select_CH4+0x30>
	{
		Error_Handler();
 8000e40:	f000 fc42 	bl	80016c8 <Error_Handler>
	}
}
 8000e44:	bf00      	nop
 8000e46:	3710      	adds	r7, #16
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000028 	.word	0x20000028

08000e50 <ADC1_Select_CH5>:
void ADC1_Select_CH5(void){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000e56:	1d3b      	adds	r3, r7, #4
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_5;
 8000e60:	2305      	movs	r3, #5
 8000e62:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e64:	2301      	movs	r3, #1
 8000e66:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4805      	ldr	r0, [pc, #20]	@ (8000e88 <ADC1_Select_CH5+0x38>)
 8000e72:	f001 faab 	bl	80023cc <HAL_ADC_ConfigChannel>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <ADC1_Select_CH5+0x30>
	{
		Error_Handler();
 8000e7c:	f000 fc24 	bl	80016c8 <Error_Handler>
	}
}
 8000e80:	bf00      	nop
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000028 	.word	0x20000028

08000e8c <ADC1_Select_CH8>:
void ADC1_Select_CH8(void){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_8;
 8000e9c:	2308      	movs	r3, #8
 8000e9e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4805      	ldr	r0, [pc, #20]	@ (8000ec4 <ADC1_Select_CH8+0x38>)
 8000eae:	f001 fa8d 	bl	80023cc <HAL_ADC_ConfigChannel>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <ADC1_Select_CH8+0x30>
	{
		Error_Handler();
 8000eb8:	f000 fc06 	bl	80016c8 <Error_Handler>
	}
}
 8000ebc:	bf00      	nop
 8000ebe:	3710      	adds	r7, #16
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000028 	.word	0x20000028

08000ec8 <ADC1_Select_CH9>:
void ADC1_Select_CH9(void){
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000ece:	1d3b      	adds	r3, r7, #4
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_9;
 8000ed8:	2309      	movs	r3, #9
 8000eda:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000edc:	2301      	movs	r3, #1
 8000ede:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4805      	ldr	r0, [pc, #20]	@ (8000f00 <ADC1_Select_CH9+0x38>)
 8000eea:	f001 fa6f 	bl	80023cc <HAL_ADC_ConfigChannel>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <ADC1_Select_CH9+0x30>
	{
		Error_Handler();
 8000ef4:	f000 fbe8 	bl	80016c8 <Error_Handler>
	}
}
 8000ef8:	bf00      	nop
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000028 	.word	0x20000028

08000f04 <measure_dist>:
#include "distance.h"
#include "main.h"
#include "adc_manager.h"
#include "movement.h"

uint16_t measure_dist(dist_t dist){
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
    GPIO_TypeDef* emitter_port;
    uint16_t emitter_pin;

    //switch case to change emitter/receiver pair
    switch(dist) {
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	2b03      	cmp	r3, #3
 8000f12:	d82a      	bhi.n	8000f6a <measure_dist+0x66>
 8000f14:	a201      	add	r2, pc, #4	@ (adr r2, 8000f1c <measure_dist+0x18>)
 8000f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f1a:	bf00      	nop
 8000f1c:	08000f2d 	.word	0x08000f2d
 8000f20:	08000f3d 	.word	0x08000f3d
 8000f24:	08000f5b 	.word	0x08000f5b
 8000f28:	08000f4b 	.word	0x08000f4b
        case DIST_FL:
            emitter_port = EMIT_FL_GPIO_Port;
 8000f2c:	4b20      	ldr	r3, [pc, #128]	@ (8000fb0 <measure_dist+0xac>)
 8000f2e:	60fb      	str	r3, [r7, #12]
            emitter_pin = EMIT_FL_Pin;
 8000f30:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000f34:	817b      	strh	r3, [r7, #10]
            ADC1_Select_CH8();
 8000f36:	f7ff ffa9 	bl	8000e8c <ADC1_Select_CH8>
            break;
 8000f3a:	e017      	b.n	8000f6c <measure_dist+0x68>
        case DIST_FR:
            emitter_port = EMIT_FR_GPIO_Port;
 8000f3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb0 <measure_dist+0xac>)
 8000f3e:	60fb      	str	r3, [r7, #12]
            emitter_pin = EMIT_FR_Pin;
 8000f40:	2320      	movs	r3, #32
 8000f42:	817b      	strh	r3, [r7, #10]
            ADC1_Select_CH4();
 8000f44:	f7ff ff66 	bl	8000e14 <ADC1_Select_CH4>
            break;
 8000f48:	e010      	b.n	8000f6c <measure_dist+0x68>
        case DIST_SR:
            emitter_port = EMIT_SR_GPIO_Port;
 8000f4a:	4b19      	ldr	r3, [pc, #100]	@ (8000fb0 <measure_dist+0xac>)
 8000f4c:	60fb      	str	r3, [r7, #12]
            emitter_pin = EMIT_SR_Pin;
 8000f4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f52:	817b      	strh	r3, [r7, #10]
            ADC1_Select_CH5();
 8000f54:	f7ff ff7c 	bl	8000e50 <ADC1_Select_CH5>
            break;
 8000f58:	e008      	b.n	8000f6c <measure_dist+0x68>
        case DIST_SL:
            emitter_port = EMIT_SL_GPIO_Port;
 8000f5a:	4b15      	ldr	r3, [pc, #84]	@ (8000fb0 <measure_dist+0xac>)
 8000f5c:	60fb      	str	r3, [r7, #12]
            emitter_pin = EMIT_SL_Pin;
 8000f5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f62:	817b      	strh	r3, [r7, #10]
            ADC1_Select_CH9();
 8000f64:	f7ff ffb0 	bl	8000ec8 <ADC1_Select_CH9>
            break;
 8000f68:	e000      	b.n	8000f6c <measure_dist+0x68>
        default:
            break;
 8000f6a:	bf00      	nop
    }

    HAL_GPIO_WritePin(emitter_port, emitter_pin, GPIO_PIN_SET);
 8000f6c:	897b      	ldrh	r3, [r7, #10]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	4619      	mov	r1, r3
 8000f72:	68f8      	ldr	r0, [r7, #12]
 8000f74:	f001 fe50 	bl	8002c18 <HAL_GPIO_WritePin>

    HAL_ADC_Start(&hadc1);
 8000f78:	480e      	ldr	r0, [pc, #56]	@ (8000fb4 <measure_dist+0xb0>)
 8000f7a:	f001 f83b 	bl	8001ff4 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000f7e:	f04f 31ff 	mov.w	r1, #4294967295
 8000f82:	480c      	ldr	r0, [pc, #48]	@ (8000fb4 <measure_dist+0xb0>)
 8000f84:	f001 f910 	bl	80021a8 <HAL_ADC_PollForConversion>
    uint16_t adc_val = HAL_ADC_GetValue(&hadc1);
 8000f88:	480a      	ldr	r0, [pc, #40]	@ (8000fb4 <measure_dist+0xb0>)
 8000f8a:	f001 fa13 	bl	80023b4 <HAL_ADC_GetValue>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	813b      	strh	r3, [r7, #8]
    HAL_ADC_Stop(&hadc1);
 8000f92:	4808      	ldr	r0, [pc, #32]	@ (8000fb4 <measure_dist+0xb0>)
 8000f94:	f001 f8dc 	bl	8002150 <HAL_ADC_Stop>

    HAL_GPIO_WritePin(emitter_port, emitter_pin, GPIO_PIN_RESET);
 8000f98:	897b      	ldrh	r3, [r7, #10]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	68f8      	ldr	r0, [r7, #12]
 8000fa0:	f001 fe3a 	bl	8002c18 <HAL_GPIO_WritePin>

    return adc_val;
 8000fa4:	893b      	ldrh	r3, [r7, #8]
   }
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40010c00 	.word	0x40010c00
 8000fb4:	20000028 	.word	0x20000028

08000fb8 <wallDetectFront>:

int wallDetectFront(uint16_t valueFL, uint16_t valueFR) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	460a      	mov	r2, r1
 8000fc2:	80fb      	strh	r3, [r7, #6]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	80bb      	strh	r3, [r7, #4]

	if (valueFR > 814 && valueFL > 1505) {
 8000fc8:	88bb      	ldrh	r3, [r7, #4]
 8000fca:	f240 322e 	movw	r2, #814	@ 0x32e
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d908      	bls.n	8000fe4 <wallDetectFront+0x2c>
 8000fd2:	88fb      	ldrh	r3, [r7, #6]
 8000fd4:	f240 52e1 	movw	r2, #1505	@ 0x5e1
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d903      	bls.n	8000fe4 <wallDetectFront+0x2c>
		stopMotors();
 8000fdc:	f000 fbfa 	bl	80017d4 <stopMotors>
		return 1;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e000      	b.n	8000fe6 <wallDetectFront+0x2e>
	}

	return 0;
 8000fe4:	2300      	movs	r3, #0

}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <HAL_TIM_IC_CaptureCallback>:
uint16_t encL = 0, encR = 0; //counter for left and right encoder value
uint16_t prevEncL = 0, prevEncR = 0; // counter for previous left and right encoder values
float encLmm, encRmm;	// distance traveled in mm
int16_t dL, dR;		// change in ticks traveled since last update

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 //left encoder timer
	if (htim->Instance == TIM3){
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a2f      	ldr	r2, [pc, #188]	@ (80010bc <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d129      	bne.n	8001056 <HAL_TIM_IC_CaptureCallback+0x66>
		encL = __HAL_TIM_GET_COUNTER(htim);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001008:	b29a      	uxth	r2, r3
 800100a:	4b2d      	ldr	r3, [pc, #180]	@ (80010c0 <HAL_TIM_IC_CaptureCallback+0xd0>)
 800100c:	801a      	strh	r2, [r3, #0]
		dL = (int16_t)(prevEncL - encL);
 800100e:	4b2d      	ldr	r3, [pc, #180]	@ (80010c4 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8001010:	881a      	ldrh	r2, [r3, #0]
 8001012:	4b2b      	ldr	r3, [pc, #172]	@ (80010c0 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001014:	881b      	ldrh	r3, [r3, #0]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	b29b      	uxth	r3, r3
 800101a:	b21a      	sxth	r2, r3
 800101c:	4b2a      	ldr	r3, [pc, #168]	@ (80010c8 <HAL_TIM_IC_CaptureCallback+0xd8>)
 800101e:	801a      	strh	r2, [r3, #0]
		encLmm += dL / tickConvertL;		// every 5.74125 ticks is 1 mm
 8001020:	4b29      	ldr	r3, [pc, #164]	@ (80010c8 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8001022:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fcba 	bl	80009a0 <__aeabi_i2f>
 800102c:	4603      	mov	r3, r0
 800102e:	4927      	ldr	r1, [pc, #156]	@ (80010cc <HAL_TIM_IC_CaptureCallback+0xdc>)
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fdbd 	bl	8000bb0 <__aeabi_fdiv>
 8001036:	4603      	mov	r3, r0
 8001038:	461a      	mov	r2, r3
 800103a:	4b25      	ldr	r3, [pc, #148]	@ (80010d0 <HAL_TIM_IC_CaptureCallback+0xe0>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4619      	mov	r1, r3
 8001040:	4610      	mov	r0, r2
 8001042:	f7ff fbf9 	bl	8000838 <__addsf3>
 8001046:	4603      	mov	r3, r0
 8001048:	461a      	mov	r2, r3
 800104a:	4b21      	ldr	r3, [pc, #132]	@ (80010d0 <HAL_TIM_IC_CaptureCallback+0xe0>)
 800104c:	601a      	str	r2, [r3, #0]
		prevEncL = encL;
 800104e:	4b1c      	ldr	r3, [pc, #112]	@ (80010c0 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001050:	881a      	ldrh	r2, [r3, #0]
 8001052:	4b1c      	ldr	r3, [pc, #112]	@ (80010c4 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8001054:	801a      	strh	r2, [r3, #0]
	}

	if (htim->Instance == TIM4) {
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a1e      	ldr	r2, [pc, #120]	@ (80010d4 <HAL_TIM_IC_CaptureCallback+0xe4>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d129      	bne.n	80010b4 <HAL_TIM_IC_CaptureCallback+0xc4>
		encR = __HAL_TIM_GET_COUNTER(htim);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001066:	b29a      	uxth	r2, r3
 8001068:	4b1b      	ldr	r3, [pc, #108]	@ (80010d8 <HAL_TIM_IC_CaptureCallback+0xe8>)
 800106a:	801a      	strh	r2, [r3, #0]
		dR = (int16_t)(prevEncR - encR);
 800106c:	4b1b      	ldr	r3, [pc, #108]	@ (80010dc <HAL_TIM_IC_CaptureCallback+0xec>)
 800106e:	881a      	ldrh	r2, [r3, #0]
 8001070:	4b19      	ldr	r3, [pc, #100]	@ (80010d8 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8001072:	881b      	ldrh	r3, [r3, #0]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	b29b      	uxth	r3, r3
 8001078:	b21a      	sxth	r2, r3
 800107a:	4b19      	ldr	r3, [pc, #100]	@ (80010e0 <HAL_TIM_IC_CaptureCallback+0xf0>)
 800107c:	801a      	strh	r2, [r3, #0]
		encRmm += dR / tickConvertR;	//every 2.90833 ticks is 1mm
 800107e:	4b18      	ldr	r3, [pc, #96]	@ (80010e0 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8001080:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fc8b 	bl	80009a0 <__aeabi_i2f>
 800108a:	4603      	mov	r3, r0
 800108c:	4915      	ldr	r1, [pc, #84]	@ (80010e4 <HAL_TIM_IC_CaptureCallback+0xf4>)
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff fd8e 	bl	8000bb0 <__aeabi_fdiv>
 8001094:	4603      	mov	r3, r0
 8001096:	461a      	mov	r2, r3
 8001098:	4b13      	ldr	r3, [pc, #76]	@ (80010e8 <HAL_TIM_IC_CaptureCallback+0xf8>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4619      	mov	r1, r3
 800109e:	4610      	mov	r0, r2
 80010a0:	f7ff fbca 	bl	8000838 <__addsf3>
 80010a4:	4603      	mov	r3, r0
 80010a6:	461a      	mov	r2, r3
 80010a8:	4b0f      	ldr	r3, [pc, #60]	@ (80010e8 <HAL_TIM_IC_CaptureCallback+0xf8>)
 80010aa:	601a      	str	r2, [r3, #0]
		prevEncR = encR;
 80010ac:	4b0a      	ldr	r3, [pc, #40]	@ (80010d8 <HAL_TIM_IC_CaptureCallback+0xe8>)
 80010ae:	881a      	ldrh	r2, [r3, #0]
 80010b0:	4b0a      	ldr	r3, [pc, #40]	@ (80010dc <HAL_TIM_IC_CaptureCallback+0xec>)
 80010b2:	801a      	strh	r2, [r3, #0]
	}
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40000400 	.word	0x40000400
 80010c0:	20000138 	.word	0x20000138
 80010c4:	2000013c 	.word	0x2000013c
 80010c8:	20000148 	.word	0x20000148
 80010cc:	40b7b852 	.word	0x40b7b852
 80010d0:	20000140 	.word	0x20000140
 80010d4:	40000800 	.word	0x40000800
 80010d8:	2000013a 	.word	0x2000013a
 80010dc:	2000013e 	.word	0x2000013e
 80010e0:	2000014a 	.word	0x2000014a
 80010e4:	403a2214 	.word	0x403a2214
 80010e8:	20000144 	.word	0x20000144

080010ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f0:	f000 fe22 	bl	8001d38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f4:	f000 f840 	bl	8001178 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_GPIO_Init();
 80010f8:	f000 fa02 	bl	8001500 <MX_GPIO_Init>
  MX_TIM2_Init();
 80010fc:	f000 f8d6 	bl	80012ac <MX_TIM2_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001100:	f000 f9fe 	bl	8001500 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001104:	f000 f8d2 	bl	80012ac <MX_TIM2_Init>
  MX_ADC1_Init();
 8001108:	f000 f892 	bl	8001230 <MX_ADC1_Init>
  MX_TIM3_Init();
 800110c:	f000 f950 	bl	80013b0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001110:	f000 f9a2 	bl	8001458 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  //start motors
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001114:	2108      	movs	r1, #8
 8001116:	4811      	ldr	r0, [pc, #68]	@ (800115c <main+0x70>)
 8001118:	f002 fc12 	bl	8003940 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800111c:	210c      	movs	r1, #12
 800111e:	480f      	ldr	r0, [pc, #60]	@ (800115c <main+0x70>)
 8001120:	f002 fc0e 	bl	8003940 <HAL_TIM_PWM_Start>

  //start left encoder
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8001124:	213c      	movs	r1, #60	@ 0x3c
 8001126:	480e      	ldr	r0, [pc, #56]	@ (8001160 <main+0x74>)
 8001128:	f002 fd4e 	bl	8003bc8 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 800112c:	213c      	movs	r1, #60	@ 0x3c
 800112e:	480d      	ldr	r0, [pc, #52]	@ (8001164 <main+0x78>)
 8001130:	f002 fd4a 	bl	8003bc8 <HAL_TIM_Encoder_Start_IT>

  HAL_TIM_Base_Start_IT(&htim2);
 8001134:	4809      	ldr	r0, [pc, #36]	@ (800115c <main+0x70>)
 8001136:	f002 fb59 	bl	80037ec <HAL_TIM_Base_Start_IT>

  //turn180();
  move_dist(1000, &dis_FL, &dis_FR);
 800113a:	4a0b      	ldr	r2, [pc, #44]	@ (8001168 <main+0x7c>)
 800113c:	490b      	ldr	r1, [pc, #44]	@ (800116c <main+0x80>)
 800113e:	480c      	ldr	r0, [pc, #48]	@ (8001170 <main+0x84>)
 8001140:	f000 fb56 	bl	80017f0 <move_dist>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001144:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001148:	480a      	ldr	r0, [pc, #40]	@ (8001174 <main+0x88>)
 800114a:	f001 fd7d 	bl	8002c48 <HAL_GPIO_TogglePin>
	  HAL_Delay(2000);
 800114e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001152:	f000 fe53 	bl	8001dfc <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001156:	bf00      	nop
 8001158:	e7f4      	b.n	8001144 <main+0x58>
 800115a:	bf00      	nop
 800115c:	20000058 	.word	0x20000058
 8001160:	200000a0 	.word	0x200000a0
 8001164:	200000e8 	.word	0x200000e8
 8001168:	20000132 	.word	0x20000132
 800116c:	20000130 	.word	0x20000130
 8001170:	447a0000 	.word	0x447a0000
 8001174:	40011000 	.word	0x40011000

08001178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b094      	sub	sp, #80	@ 0x50
 800117c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001182:	2228      	movs	r2, #40	@ 0x28
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f003 fb80 	bl	800488c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011a8:	2301      	movs	r3, #1
 80011aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011b2:	2300      	movs	r3, #0
 80011b4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011b6:	2301      	movs	r3, #1
 80011b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ba:	2302      	movs	r3, #2
 80011bc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011c4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80011c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011ce:	4618      	mov	r0, r3
 80011d0:	f001 fd54 	bl	8002c7c <HAL_RCC_OscConfig>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <SystemClock_Config+0x66>
  {
    Error_Handler();
 80011da:	f000 fa75 	bl	80016c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011de:	230f      	movs	r3, #15
 80011e0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e2:	2302      	movs	r3, #2
 80011e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011ee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011f0:	2300      	movs	r3, #0
 80011f2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	2102      	movs	r1, #2
 80011fa:	4618      	mov	r0, r3
 80011fc:	f001 ffc0 	bl	8003180 <HAL_RCC_ClockConfig>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001206:	f000 fa5f 	bl	80016c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800120a:	2302      	movs	r3, #2
 800120c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800120e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001212:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001214:	1d3b      	adds	r3, r7, #4
 8001216:	4618      	mov	r0, r3
 8001218:	f002 f92c 	bl	8003474 <HAL_RCCEx_PeriphCLKConfig>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001222:	f000 fa51 	bl	80016c8 <Error_Handler>
  }
}
 8001226:	bf00      	nop
 8001228:	3750      	adds	r7, #80	@ 0x50
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001240:	4b18      	ldr	r3, [pc, #96]	@ (80012a4 <MX_ADC1_Init+0x74>)
 8001242:	4a19      	ldr	r2, [pc, #100]	@ (80012a8 <MX_ADC1_Init+0x78>)
 8001244:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001246:	4b17      	ldr	r3, [pc, #92]	@ (80012a4 <MX_ADC1_Init+0x74>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800124c:	4b15      	ldr	r3, [pc, #84]	@ (80012a4 <MX_ADC1_Init+0x74>)
 800124e:	2200      	movs	r2, #0
 8001250:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001252:	4b14      	ldr	r3, [pc, #80]	@ (80012a4 <MX_ADC1_Init+0x74>)
 8001254:	2200      	movs	r2, #0
 8001256:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001258:	4b12      	ldr	r3, [pc, #72]	@ (80012a4 <MX_ADC1_Init+0x74>)
 800125a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800125e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001260:	4b10      	ldr	r3, [pc, #64]	@ (80012a4 <MX_ADC1_Init+0x74>)
 8001262:	2200      	movs	r2, #0
 8001264:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001266:	4b0f      	ldr	r3, [pc, #60]	@ (80012a4 <MX_ADC1_Init+0x74>)
 8001268:	2201      	movs	r2, #1
 800126a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800126c:	480d      	ldr	r0, [pc, #52]	@ (80012a4 <MX_ADC1_Init+0x74>)
 800126e:	f000 fde9 	bl	8001e44 <HAL_ADC_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001278:	f000 fa26 	bl	80016c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800127c:	2301      	movs	r3, #1
 800127e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001280:	2301      	movs	r3, #1
 8001282:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001284:	2300      	movs	r3, #0
 8001286:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001288:	1d3b      	adds	r3, r7, #4
 800128a:	4619      	mov	r1, r3
 800128c:	4805      	ldr	r0, [pc, #20]	@ (80012a4 <MX_ADC1_Init+0x74>)
 800128e:	f001 f89d 	bl	80023cc <HAL_ADC_ConfigChannel>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001298:	f000 fa16 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800129c:	bf00      	nop
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000028 	.word	0x20000028
 80012a8:	40012400 	.word	0x40012400

080012ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08e      	sub	sp, #56	@ 0x38
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c0:	f107 0320 	add.w	r3, r7, #32
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
 80012d8:	615a      	str	r2, [r3, #20]
 80012da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012dc:	4b33      	ldr	r3, [pc, #204]	@ (80013ac <MX_TIM2_Init+0x100>)
 80012de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 80012e4:	4b31      	ldr	r3, [pc, #196]	@ (80013ac <MX_TIM2_Init+0x100>)
 80012e6:	2248      	movs	r2, #72	@ 0x48
 80012e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ea:	4b30      	ldr	r3, [pc, #192]	@ (80013ac <MX_TIM2_Init+0x100>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80012f0:	4b2e      	ldr	r3, [pc, #184]	@ (80013ac <MX_TIM2_Init+0x100>)
 80012f2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f8:	4b2c      	ldr	r3, [pc, #176]	@ (80013ac <MX_TIM2_Init+0x100>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012fe:	4b2b      	ldr	r3, [pc, #172]	@ (80013ac <MX_TIM2_Init+0x100>)
 8001300:	2280      	movs	r2, #128	@ 0x80
 8001302:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001304:	4829      	ldr	r0, [pc, #164]	@ (80013ac <MX_TIM2_Init+0x100>)
 8001306:	f002 fa21 	bl	800374c <HAL_TIM_Base_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001310:	f000 f9da 	bl	80016c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001314:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001318:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800131a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800131e:	4619      	mov	r1, r3
 8001320:	4822      	ldr	r0, [pc, #136]	@ (80013ac <MX_TIM2_Init+0x100>)
 8001322:	f002 feb1 	bl	8004088 <HAL_TIM_ConfigClockSource>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800132c:	f000 f9cc 	bl	80016c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001330:	481e      	ldr	r0, [pc, #120]	@ (80013ac <MX_TIM2_Init+0x100>)
 8001332:	f002 faad 	bl	8003890 <HAL_TIM_PWM_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800133c:	f000 f9c4 	bl	80016c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001340:	2300      	movs	r3, #0
 8001342:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001344:	2300      	movs	r3, #0
 8001346:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001348:	f107 0320 	add.w	r3, r7, #32
 800134c:	4619      	mov	r1, r3
 800134e:	4817      	ldr	r0, [pc, #92]	@ (80013ac <MX_TIM2_Init+0x100>)
 8001350:	f003 fa2c 	bl	80047ac <HAL_TIMEx_MasterConfigSynchronization>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800135a:	f000 f9b5 	bl	80016c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800135e:	2360      	movs	r3, #96	@ 0x60
 8001360:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8001362:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001366:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001370:	1d3b      	adds	r3, r7, #4
 8001372:	2208      	movs	r2, #8
 8001374:	4619      	mov	r1, r3
 8001376:	480d      	ldr	r0, [pc, #52]	@ (80013ac <MX_TIM2_Init+0x100>)
 8001378:	f002 fdc4 	bl	8003f04 <HAL_TIM_PWM_ConfigChannel>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001382:	f000 f9a1 	bl	80016c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	220c      	movs	r2, #12
 800138a:	4619      	mov	r1, r3
 800138c:	4807      	ldr	r0, [pc, #28]	@ (80013ac <MX_TIM2_Init+0x100>)
 800138e:	f002 fdb9 	bl	8003f04 <HAL_TIM_PWM_ConfigChannel>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001398:	f000 f996 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800139c:	4803      	ldr	r0, [pc, #12]	@ (80013ac <MX_TIM2_Init+0x100>)
 800139e:	f000 fc25 	bl	8001bec <HAL_TIM_MspPostInit>

}
 80013a2:	bf00      	nop
 80013a4:	3738      	adds	r7, #56	@ 0x38
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000058 	.word	0x20000058

080013b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08c      	sub	sp, #48	@ 0x30
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013b6:	f107 030c 	add.w	r3, r7, #12
 80013ba:	2224      	movs	r2, #36	@ 0x24
 80013bc:	2100      	movs	r1, #0
 80013be:	4618      	mov	r0, r3
 80013c0:	f003 fa64 	bl	800488c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013cc:	4b20      	ldr	r3, [pc, #128]	@ (8001450 <MX_TIM3_Init+0xa0>)
 80013ce:	4a21      	ldr	r2, [pc, #132]	@ (8001454 <MX_TIM3_Init+0xa4>)
 80013d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001450 <MX_TIM3_Init+0xa0>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001450 <MX_TIM3_Init+0xa0>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80013de:	4b1c      	ldr	r3, [pc, #112]	@ (8001450 <MX_TIM3_Init+0xa0>)
 80013e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013e4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001450 <MX_TIM3_Init+0xa0>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ec:	4b18      	ldr	r3, [pc, #96]	@ (8001450 <MX_TIM3_Init+0xa0>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013f2:	2303      	movs	r3, #3
 80013f4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80013f6:	2302      	movs	r3, #2
 80013f8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013fa:	2301      	movs	r3, #1
 80013fc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013fe:	2300      	movs	r3, #0
 8001400:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001406:	2302      	movs	r3, #2
 8001408:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800140a:	2301      	movs	r3, #1
 800140c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800140e:	2300      	movs	r3, #0
 8001410:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001416:	f107 030c 	add.w	r3, r7, #12
 800141a:	4619      	mov	r1, r3
 800141c:	480c      	ldr	r0, [pc, #48]	@ (8001450 <MX_TIM3_Init+0xa0>)
 800141e:	f002 fb31 	bl	8003a84 <HAL_TIM_Encoder_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001428:	f000 f94e 	bl	80016c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800142c:	2300      	movs	r3, #0
 800142e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001430:	2300      	movs	r3, #0
 8001432:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001434:	1d3b      	adds	r3, r7, #4
 8001436:	4619      	mov	r1, r3
 8001438:	4805      	ldr	r0, [pc, #20]	@ (8001450 <MX_TIM3_Init+0xa0>)
 800143a:	f003 f9b7 	bl	80047ac <HAL_TIMEx_MasterConfigSynchronization>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001444:	f000 f940 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001448:	bf00      	nop
 800144a:	3730      	adds	r7, #48	@ 0x30
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	200000a0 	.word	0x200000a0
 8001454:	40000400 	.word	0x40000400

08001458 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08c      	sub	sp, #48	@ 0x30
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800145e:	f107 030c 	add.w	r3, r7, #12
 8001462:	2224      	movs	r2, #36	@ 0x24
 8001464:	2100      	movs	r1, #0
 8001466:	4618      	mov	r0, r3
 8001468:	f003 fa10 	bl	800488c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001474:	4b20      	ldr	r3, [pc, #128]	@ (80014f8 <MX_TIM4_Init+0xa0>)
 8001476:	4a21      	ldr	r2, [pc, #132]	@ (80014fc <MX_TIM4_Init+0xa4>)
 8001478:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800147a:	4b1f      	ldr	r3, [pc, #124]	@ (80014f8 <MX_TIM4_Init+0xa0>)
 800147c:	2200      	movs	r2, #0
 800147e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001480:	4b1d      	ldr	r3, [pc, #116]	@ (80014f8 <MX_TIM4_Init+0xa0>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001486:	4b1c      	ldr	r3, [pc, #112]	@ (80014f8 <MX_TIM4_Init+0xa0>)
 8001488:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800148c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800148e:	4b1a      	ldr	r3, [pc, #104]	@ (80014f8 <MX_TIM4_Init+0xa0>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001494:	4b18      	ldr	r3, [pc, #96]	@ (80014f8 <MX_TIM4_Init+0xa0>)
 8001496:	2200      	movs	r2, #0
 8001498:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800149a:	2301      	movs	r3, #1
 800149c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800149e:	2302      	movs	r3, #2
 80014a0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014a2:	2301      	movs	r3, #1
 80014a4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80014ae:	2302      	movs	r3, #2
 80014b0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014b2:	2301      	movs	r3, #1
 80014b4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014b6:	2300      	movs	r3, #0
 80014b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80014be:	f107 030c 	add.w	r3, r7, #12
 80014c2:	4619      	mov	r1, r3
 80014c4:	480c      	ldr	r0, [pc, #48]	@ (80014f8 <MX_TIM4_Init+0xa0>)
 80014c6:	f002 fadd 	bl	8003a84 <HAL_TIM_Encoder_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80014d0:	f000 f8fa 	bl	80016c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d4:	2300      	movs	r3, #0
 80014d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d8:	2300      	movs	r3, #0
 80014da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	4619      	mov	r1, r3
 80014e0:	4805      	ldr	r0, [pc, #20]	@ (80014f8 <MX_TIM4_Init+0xa0>)
 80014e2:	f003 f963 	bl	80047ac <HAL_TIMEx_MasterConfigSynchronization>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80014ec:	f000 f8ec 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80014f0:	bf00      	nop
 80014f2:	3730      	adds	r7, #48	@ 0x30
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	200000e8 	.word	0x200000e8
 80014fc:	40000800 	.word	0x40000800

08001500 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b088      	sub	sp, #32
 8001504:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001506:	f107 0310 	add.w	r3, r7, #16
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001514:	4b52      	ldr	r3, [pc, #328]	@ (8001660 <MX_GPIO_Init+0x160>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	4a51      	ldr	r2, [pc, #324]	@ (8001660 <MX_GPIO_Init+0x160>)
 800151a:	f043 0310 	orr.w	r3, r3, #16
 800151e:	6193      	str	r3, [r2, #24]
 8001520:	4b4f      	ldr	r3, [pc, #316]	@ (8001660 <MX_GPIO_Init+0x160>)
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	f003 0310 	and.w	r3, r3, #16
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800152c:	4b4c      	ldr	r3, [pc, #304]	@ (8001660 <MX_GPIO_Init+0x160>)
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	4a4b      	ldr	r2, [pc, #300]	@ (8001660 <MX_GPIO_Init+0x160>)
 8001532:	f043 0320 	orr.w	r3, r3, #32
 8001536:	6193      	str	r3, [r2, #24]
 8001538:	4b49      	ldr	r3, [pc, #292]	@ (8001660 <MX_GPIO_Init+0x160>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	f003 0320 	and.w	r3, r3, #32
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001544:	4b46      	ldr	r3, [pc, #280]	@ (8001660 <MX_GPIO_Init+0x160>)
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	4a45      	ldr	r2, [pc, #276]	@ (8001660 <MX_GPIO_Init+0x160>)
 800154a:	f043 0304 	orr.w	r3, r3, #4
 800154e:	6193      	str	r3, [r2, #24]
 8001550:	4b43      	ldr	r3, [pc, #268]	@ (8001660 <MX_GPIO_Init+0x160>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	f003 0304 	and.w	r3, r3, #4
 8001558:	607b      	str	r3, [r7, #4]
 800155a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800155c:	4b40      	ldr	r3, [pc, #256]	@ (8001660 <MX_GPIO_Init+0x160>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	4a3f      	ldr	r2, [pc, #252]	@ (8001660 <MX_GPIO_Init+0x160>)
 8001562:	f043 0308 	orr.w	r3, r3, #8
 8001566:	6193      	str	r3, [r2, #24]
 8001568:	4b3d      	ldr	r3, [pc, #244]	@ (8001660 <MX_GPIO_Init+0x160>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	f003 0308 	and.w	r3, r3, #8
 8001570:	603b      	str	r3, [r7, #0]
 8001572:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001574:	2200      	movs	r2, #0
 8001576:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800157a:	483a      	ldr	r0, [pc, #232]	@ (8001664 <MX_GPIO_Init+0x164>)
 800157c:	f001 fb4c 	bl	8002c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BLE_STATE_Pin|ML_FWD_Pin|LED_RED_Pin|LED_BLUE_Pin
 8001580:	2200      	movs	r2, #0
 8001582:	f649 1101 	movw	r1, #39169	@ 0x9901
 8001586:	4838      	ldr	r0, [pc, #224]	@ (8001668 <MX_GPIO_Init+0x168>)
 8001588:	f001 fb46 	bl	8002c18 <HAL_GPIO_WritePin>
                          |LED_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EMIT_SR_Pin|EMIT_FL_Pin|EMIT_SL_Pin|MR_FWD_Pin
 800158c:	2200      	movs	r2, #0
 800158e:	f64f 5128 	movw	r1, #64808	@ 0xfd28
 8001592:	4836      	ldr	r0, [pc, #216]	@ (800166c <MX_GPIO_Init+0x16c>)
 8001594:	f001 fb40 	bl	8002c18 <HAL_GPIO_WritePin>
                          |ML_BWD_Pin|MR_BWD_Pin|SWO_Pin|EMIT_FR_Pin
                          |BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001598:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800159c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159e:	2301      	movs	r3, #1
 80015a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a6:	2302      	movs	r3, #2
 80015a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015aa:	f107 0310 	add.w	r3, r7, #16
 80015ae:	4619      	mov	r1, r3
 80015b0:	482c      	ldr	r0, [pc, #176]	@ (8001664 <MX_GPIO_Init+0x164>)
 80015b2:	f001 f9ad 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80015b6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80015ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c4:	f107 0310 	add.w	r3, r7, #16
 80015c8:	4619      	mov	r1, r3
 80015ca:	4826      	ldr	r0, [pc, #152]	@ (8001664 <MX_GPIO_Init+0x164>)
 80015cc:	f001 f9a0 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLE_STATE_Pin ML_FWD_Pin LED_RED_Pin LED_BLUE_Pin
                           LED_GREEN_Pin */
  GPIO_InitStruct.Pin = BLE_STATE_Pin|ML_FWD_Pin|LED_RED_Pin|LED_BLUE_Pin
 80015d0:	f649 1301 	movw	r3, #39169	@ 0x9901
 80015d4:	613b      	str	r3, [r7, #16]
                          |LED_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d6:	2301      	movs	r3, #1
 80015d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2302      	movs	r3, #2
 80015e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e2:	f107 0310 	add.w	r3, r7, #16
 80015e6:	4619      	mov	r1, r3
 80015e8:	481f      	ldr	r0, [pc, #124]	@ (8001668 <MX_GPIO_Init+0x168>)
 80015ea:	f001 f991 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pins : EMIT_SR_Pin EMIT_FL_Pin EMIT_SL_Pin MR_FWD_Pin
                           ML_BWD_Pin MR_BWD_Pin SWO_Pin EMIT_FR_Pin
                           BUZZER_Pin */
  GPIO_InitStruct.Pin = EMIT_SR_Pin|EMIT_FL_Pin|EMIT_SL_Pin|MR_FWD_Pin
 80015ee:	f64f 5328 	movw	r3, #64808	@ 0xfd28
 80015f2:	613b      	str	r3, [r7, #16]
                          |ML_BWD_Pin|MR_BWD_Pin|SWO_Pin|EMIT_FR_Pin
                          |BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f4:	2301      	movs	r3, #1
 80015f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fc:	2302      	movs	r3, #2
 80015fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001600:	f107 0310 	add.w	r3, r7, #16
 8001604:	4619      	mov	r1, r3
 8001606:	4819      	ldr	r0, [pc, #100]	@ (800166c <MX_GPIO_Init+0x16c>)
 8001608:	f001 f982 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800160c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001610:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001612:	2302      	movs	r3, #2
 8001614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001616:	2303      	movs	r3, #3
 8001618:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161a:	f107 0310 	add.w	r3, r7, #16
 800161e:	4619      	mov	r1, r3
 8001620:	4811      	ldr	r0, [pc, #68]	@ (8001668 <MX_GPIO_Init+0x168>)
 8001622:	f001 f975 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001626:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800162a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001634:	f107 0310 	add.w	r3, r7, #16
 8001638:	4619      	mov	r1, r3
 800163a:	480b      	ldr	r0, [pc, #44]	@ (8001668 <MX_GPIO_Init+0x168>)
 800163c:	f001 f968 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001640:	2310      	movs	r3, #16
 8001642:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164c:	f107 0310 	add.w	r3, r7, #16
 8001650:	4619      	mov	r1, r3
 8001652:	4806      	ldr	r0, [pc, #24]	@ (800166c <MX_GPIO_Init+0x16c>)
 8001654:	f001 f95c 	bl	8002910 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001658:	bf00      	nop
 800165a:	3720      	adds	r7, #32
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40021000 	.word	0x40021000
 8001664:	40011000 	.word	0x40011000
 8001668:	40010800 	.word	0x40010800
 800166c:	40010c00 	.word	0x40010c00

08001670 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	dis_SR = measure_dist(DIST_SR);
 8001678:	2003      	movs	r0, #3
 800167a:	f7ff fc43 	bl	8000f04 <measure_dist>
 800167e:	4603      	mov	r3, r0
 8001680:	461a      	mov	r2, r3
 8001682:	4b0d      	ldr	r3, [pc, #52]	@ (80016b8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001684:	801a      	strh	r2, [r3, #0]
	dis_FR = measure_dist(DIST_FR);
 8001686:	2001      	movs	r0, #1
 8001688:	f7ff fc3c 	bl	8000f04 <measure_dist>
 800168c:	4603      	mov	r3, r0
 800168e:	461a      	mov	r2, r3
 8001690:	4b0a      	ldr	r3, [pc, #40]	@ (80016bc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001692:	801a      	strh	r2, [r3, #0]
	dis_FL = measure_dist(DIST_FL);
 8001694:	2000      	movs	r0, #0
 8001696:	f7ff fc35 	bl	8000f04 <measure_dist>
 800169a:	4603      	mov	r3, r0
 800169c:	461a      	mov	r2, r3
 800169e:	4b08      	ldr	r3, [pc, #32]	@ (80016c0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80016a0:	801a      	strh	r2, [r3, #0]
	dis_SL = measure_dist(DIST_SL);
 80016a2:	2002      	movs	r0, #2
 80016a4:	f7ff fc2e 	bl	8000f04 <measure_dist>
 80016a8:	4603      	mov	r3, r0
 80016aa:	461a      	mov	r2, r3
 80016ac:	4b05      	ldr	r3, [pc, #20]	@ (80016c4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80016ae:	801a      	strh	r2, [r3, #0]
}
 80016b0:	bf00      	nop
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000136 	.word	0x20000136
 80016bc:	20000132 	.word	0x20000132
 80016c0:	20000130 	.word	0x20000130
 80016c4:	20000134 	.word	0x20000134

080016c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016cc:	b672      	cpsid	i
}
 80016ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016d0:	bf00      	nop
 80016d2:	e7fd      	b.n	80016d0 <Error_Handler+0x8>

080016d4 <SetLMotorDirection>:
#include <stdint.h>
#include "main.h"
#include "motors.h"

void SetLMotorDirection(int forward){
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
	if (forward){
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d00c      	beq.n	80016fc <SetLMotorDirection+0x28>
		//ML Forward HIGH
		HAL_GPIO_WritePin(GPIOA, ML_FWD_Pin, GPIO_PIN_SET);
		*/

		//ML Backwards LOW
		HAL_GPIO_WritePin(ML_BWD_GPIO_Port, ML_BWD_Pin, GPIO_PIN_RESET);
 80016e2:	2200      	movs	r2, #0
 80016e4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80016e8:	480c      	ldr	r0, [pc, #48]	@ (800171c <SetLMotorDirection+0x48>)
 80016ea:	f001 fa95 	bl	8002c18 <HAL_GPIO_WritePin>
		//ML Forward HIGH
		HAL_GPIO_WritePin(ML_FWD_GPIO_Port, ML_FWD_Pin, GPIO_PIN_SET);
 80016ee:	2201      	movs	r2, #1
 80016f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016f4:	480a      	ldr	r0, [pc, #40]	@ (8001720 <SetLMotorDirection+0x4c>)
 80016f6:	f001 fa8f 	bl	8002c18 <HAL_GPIO_WritePin>
		//ML Backwards HIGH
		HAL_GPIO_WritePin(ML_BWD_GPIO_Port, ML_BWD_Pin, GPIO_PIN_SET);
		//ML Forward LOW
		HAL_GPIO_WritePin(ML_FWD_GPIO_Port, ML_FWD_Pin, GPIO_PIN_RESET);
	}
}
 80016fa:	e00b      	b.n	8001714 <SetLMotorDirection+0x40>
		HAL_GPIO_WritePin(ML_BWD_GPIO_Port, ML_BWD_Pin, GPIO_PIN_SET);
 80016fc:	2201      	movs	r2, #1
 80016fe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001702:	4806      	ldr	r0, [pc, #24]	@ (800171c <SetLMotorDirection+0x48>)
 8001704:	f001 fa88 	bl	8002c18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ML_FWD_GPIO_Port, ML_FWD_Pin, GPIO_PIN_RESET);
 8001708:	2200      	movs	r2, #0
 800170a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800170e:	4804      	ldr	r0, [pc, #16]	@ (8001720 <SetLMotorDirection+0x4c>)
 8001710:	f001 fa82 	bl	8002c18 <HAL_GPIO_WritePin>
}
 8001714:	bf00      	nop
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40010c00 	.word	0x40010c00
 8001720:	40010800 	.word	0x40010800

08001724 <SetRMotorDirection>:

void SetRMotorDirection(int forward){
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
	if (!forward){
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d10c      	bne.n	800174c <SetRMotorDirection+0x28>
		//MR Backwards LOW
		HAL_GPIO_WritePin(MR_BWD_GPIO_Port, MR_BWD_Pin, GPIO_PIN_RESET);
 8001732:	2200      	movs	r2, #0
 8001734:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001738:	480c      	ldr	r0, [pc, #48]	@ (800176c <SetRMotorDirection+0x48>)
 800173a:	f001 fa6d 	bl	8002c18 <HAL_GPIO_WritePin>
		//MR Forward HIGH
		HAL_GPIO_WritePin(MR_FWD_GPIO_Port, MR_FWD_Pin, GPIO_PIN_SET);
 800173e:	2201      	movs	r2, #1
 8001740:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001744:	4809      	ldr	r0, [pc, #36]	@ (800176c <SetRMotorDirection+0x48>)
 8001746:	f001 fa67 	bl	8002c18 <HAL_GPIO_WritePin>
		//MR Backwards HIGH
		HAL_GPIO_WritePin(MR_BWD_GPIO_Port, MR_BWD_Pin, GPIO_PIN_SET);
		//MR Forward LOW
		HAL_GPIO_WritePin(MR_FWD_GPIO_Port, MR_FWD_Pin, GPIO_PIN_RESET);
	}
}
 800174a:	e00b      	b.n	8001764 <SetRMotorDirection+0x40>
		HAL_GPIO_WritePin(MR_BWD_GPIO_Port, MR_BWD_Pin, GPIO_PIN_SET);
 800174c:	2201      	movs	r2, #1
 800174e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001752:	4806      	ldr	r0, [pc, #24]	@ (800176c <SetRMotorDirection+0x48>)
 8001754:	f001 fa60 	bl	8002c18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MR_FWD_GPIO_Port, MR_FWD_Pin, GPIO_PIN_RESET);
 8001758:	2200      	movs	r2, #0
 800175a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800175e:	4803      	ldr	r0, [pc, #12]	@ (800176c <SetRMotorDirection+0x48>)
 8001760:	f001 fa5a 	bl	8002c18 <HAL_GPIO_WritePin>
}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40010c00 	.word	0x40010c00

08001770 <moveLeftMotor>:
#include "main.h"
#include "motors.h"
#include "values.h"
#include <math.h>

void moveLeftMotor(int direction, int speed) {
 8001770:	b590      	push	{r4, r7, lr}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
	SetLMotorDirection(direction);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7ff ffaa 	bl	80016d4 <SetLMotorDirection>
	TIM2->CCR4 = fabsf(speed);
 8001780:	6838      	ldr	r0, [r7, #0]
 8001782:	f7ff f90d 	bl	80009a0 <__aeabi_i2f>
 8001786:	4603      	mov	r3, r0
 8001788:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800178c:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff fb1f 	bl	8000dd4 <__aeabi_f2uiz>
 8001796:	4603      	mov	r3, r0
 8001798:	6423      	str	r3, [r4, #64]	@ 0x40
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd90      	pop	{r4, r7, pc}

080017a2 <moveRightMotor>:

void moveRightMotor(int direction, int speed) {
 80017a2:	b590      	push	{r4, r7, lr}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	6039      	str	r1, [r7, #0]
	SetRMotorDirection(direction);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff ffb9 	bl	8001724 <SetRMotorDirection>
	TIM2->CCR3 = fabsf(speed);
 80017b2:	6838      	ldr	r0, [r7, #0]
 80017b4:	f7ff f8f4 	bl	80009a0 <__aeabi_i2f>
 80017b8:	4603      	mov	r3, r0
 80017ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80017be:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff fb06 	bl	8000dd4 <__aeabi_f2uiz>
 80017c8:	4603      	mov	r3, r0
 80017ca:	63e3      	str	r3, [r4, #60]	@ 0x3c
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd90      	pop	{r4, r7, pc}

080017d4 <stopMotors>:

void stopMotors() {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
	moveRightMotor(0, 0);
 80017d8:	2100      	movs	r1, #0
 80017da:	2000      	movs	r0, #0
 80017dc:	f7ff ffe1 	bl	80017a2 <moveRightMotor>
	moveLeftMotor(0, 0);
 80017e0:	2100      	movs	r1, #0
 80017e2:	2000      	movs	r0, #0
 80017e4:	f7ff ffc4 	bl	8001770 <moveLeftMotor>
}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	0000      	movs	r0, r0
	...

080017f0 <move_dist>:

int move_dist(float dist, uint16_t* valueFL, uint16_t* valueFR) {
 80017f0:	b5b0      	push	{r4, r5, r7, lr}
 80017f2:	b088      	sub	sp, #32
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
	float startencL = encLmm;
 80017fc:	4b64      	ldr	r3, [pc, #400]	@ (8001990 <move_dist+0x1a0>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	61fb      	str	r3, [r7, #28]
	float startencR = encRmm;
 8001802:	4b64      	ldr	r3, [pc, #400]	@ (8001994 <move_dist+0x1a4>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	61bb      	str	r3, [r7, #24]
	int direction = (dist > 0) ? 1 : 0;
 8001808:	2301      	movs	r3, #1
 800180a:	461c      	mov	r4, r3
 800180c:	f04f 0100 	mov.w	r1, #0
 8001810:	68f8      	ldr	r0, [r7, #12]
 8001812:	f7ff fad5 	bl	8000dc0 <__aeabi_fcmpgt>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <move_dist+0x30>
 800181c:	2300      	movs	r3, #0
 800181e:	461c      	mov	r4, r3
 8001820:	b2e3      	uxtb	r3, r4
 8001822:	617b      	str	r3, [r7, #20]

	while (encRmm < dist+startencR || encLmm < dist+startencL){
 8001824:	e080      	b.n	8001928 <move_dist+0x138>
		// Right motor profile
		if (encRmm-startencR < dist * .6){
 8001826:	4b5b      	ldr	r3, [pc, #364]	@ (8001994 <move_dist+0x1a4>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	69b9      	ldr	r1, [r7, #24]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff f801 	bl	8000834 <__aeabi_fsub>
 8001832:	4603      	mov	r3, r0
 8001834:	4618      	mov	r0, r3
 8001836:	f7fe ff19 	bl	800066c <__aeabi_f2d>
 800183a:	4604      	mov	r4, r0
 800183c:	460d      	mov	r5, r1
 800183e:	68f8      	ldr	r0, [r7, #12]
 8001840:	f7fe ff14 	bl	800066c <__aeabi_f2d>
 8001844:	a350      	add	r3, pc, #320	@ (adr r3, 8001988 <move_dist+0x198>)
 8001846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184a:	f7fe fc81 	bl	8000150 <__aeabi_dmul>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	4620      	mov	r0, r4
 8001854:	4629      	mov	r1, r5
 8001856:	f7fe ffc1 	bl	80007dc <__aeabi_dcmplt>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d005      	beq.n	800186c <move_dist+0x7c>
			moveRightMotor(direction, 370);
 8001860:	f44f 71b9 	mov.w	r1, #370	@ 0x172
 8001864:	6978      	ldr	r0, [r7, #20]
 8001866:	f7ff ff9c 	bl	80017a2 <moveRightMotor>
 800186a:	e016      	b.n	800189a <move_dist+0xaa>
		}
		else if (encRmm-startencR < dist){
 800186c:	4b49      	ldr	r3, [pc, #292]	@ (8001994 <move_dist+0x1a4>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	69b9      	ldr	r1, [r7, #24]
 8001872:	4618      	mov	r0, r3
 8001874:	f7fe ffde 	bl	8000834 <__aeabi_fsub>
 8001878:	4603      	mov	r3, r0
 800187a:	4619      	mov	r1, r3
 800187c:	68f8      	ldr	r0, [r7, #12]
 800187e:	f7ff fa9f 	bl	8000dc0 <__aeabi_fcmpgt>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d004      	beq.n	8001892 <move_dist+0xa2>
			moveRightMotor(direction, 130);
 8001888:	2182      	movs	r1, #130	@ 0x82
 800188a:	6978      	ldr	r0, [r7, #20]
 800188c:	f7ff ff89 	bl	80017a2 <moveRightMotor>
 8001890:	e003      	b.n	800189a <move_dist+0xaa>
		}
		else{
			moveRightMotor(direction, 0);
 8001892:	2100      	movs	r1, #0
 8001894:	6978      	ldr	r0, [r7, #20]
 8001896:	f7ff ff84 	bl	80017a2 <moveRightMotor>
		}

		// Left motor profile
		if (encLmm-startencL < dist * .6) {
 800189a:	4b3d      	ldr	r3, [pc, #244]	@ (8001990 <move_dist+0x1a0>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	69f9      	ldr	r1, [r7, #28]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe ffc7 	bl	8000834 <__aeabi_fsub>
 80018a6:	4603      	mov	r3, r0
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe fedf 	bl	800066c <__aeabi_f2d>
 80018ae:	4604      	mov	r4, r0
 80018b0:	460d      	mov	r5, r1
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f7fe feda 	bl	800066c <__aeabi_f2d>
 80018b8:	a333      	add	r3, pc, #204	@ (adr r3, 8001988 <move_dist+0x198>)
 80018ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018be:	f7fe fc47 	bl	8000150 <__aeabi_dmul>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	4620      	mov	r0, r4
 80018c8:	4629      	mov	r1, r5
 80018ca:	f7fe ff87 	bl	80007dc <__aeabi_dcmplt>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d005      	beq.n	80018e0 <move_dist+0xf0>
			moveLeftMotor(direction, 370);
 80018d4:	f44f 71b9 	mov.w	r1, #370	@ 0x172
 80018d8:	6978      	ldr	r0, [r7, #20]
 80018da:	f7ff ff49 	bl	8001770 <moveLeftMotor>
 80018de:	e016      	b.n	800190e <move_dist+0x11e>
		}
		else if (encLmm-startencL < dist) {
 80018e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001990 <move_dist+0x1a0>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	69f9      	ldr	r1, [r7, #28]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe ffa4 	bl	8000834 <__aeabi_fsub>
 80018ec:	4603      	mov	r3, r0
 80018ee:	4619      	mov	r1, r3
 80018f0:	68f8      	ldr	r0, [r7, #12]
 80018f2:	f7ff fa65 	bl	8000dc0 <__aeabi_fcmpgt>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d004      	beq.n	8001906 <move_dist+0x116>
			moveLeftMotor(direction , 130);
 80018fc:	2182      	movs	r1, #130	@ 0x82
 80018fe:	6978      	ldr	r0, [r7, #20]
 8001900:	f7ff ff36 	bl	8001770 <moveLeftMotor>
 8001904:	e003      	b.n	800190e <move_dist+0x11e>
		}
		else{
			moveLeftMotor(direction, 0);
 8001906:	2100      	movs	r1, #0
 8001908:	6978      	ldr	r0, [r7, #20]
 800190a:	f7ff ff31 	bl	8001770 <moveLeftMotor>
		}

		if (wallDetectFront(dis_FL, dis_FR)) {
 800190e:	4b22      	ldr	r3, [pc, #136]	@ (8001998 <move_dist+0x1a8>)
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	461a      	mov	r2, r3
 8001914:	4b21      	ldr	r3, [pc, #132]	@ (800199c <move_dist+0x1ac>)
 8001916:	881b      	ldrh	r3, [r3, #0]
 8001918:	4619      	mov	r1, r3
 800191a:	4610      	mov	r0, r2
 800191c:	f7ff fb4c 	bl	8000fb8 <wallDetectFront>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d121      	bne.n	800196a <move_dist+0x17a>
			break;
		}
		continue;
 8001926:	bf00      	nop
	while (encRmm < dist+startencR || encLmm < dist+startencL){
 8001928:	69b9      	ldr	r1, [r7, #24]
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f7fe ff84 	bl	8000838 <__addsf3>
 8001930:	4603      	mov	r3, r0
 8001932:	461a      	mov	r2, r3
 8001934:	4b17      	ldr	r3, [pc, #92]	@ (8001994 <move_dist+0x1a4>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4619      	mov	r1, r3
 800193a:	4610      	mov	r0, r2
 800193c:	f7ff fa40 	bl	8000dc0 <__aeabi_fcmpgt>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	f47f af6f 	bne.w	8001826 <move_dist+0x36>
 8001948:	69f9      	ldr	r1, [r7, #28]
 800194a:	68f8      	ldr	r0, [r7, #12]
 800194c:	f7fe ff74 	bl	8000838 <__addsf3>
 8001950:	4603      	mov	r3, r0
 8001952:	461a      	mov	r2, r3
 8001954:	4b0e      	ldr	r3, [pc, #56]	@ (8001990 <move_dist+0x1a0>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4619      	mov	r1, r3
 800195a:	4610      	mov	r0, r2
 800195c:	f7ff fa30 	bl	8000dc0 <__aeabi_fcmpgt>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	f47f af5f 	bne.w	8001826 <move_dist+0x36>
 8001968:	e000      	b.n	800196c <move_dist+0x17c>
			break;
 800196a:	bf00      	nop
	}

	moveRightMotor(direction, 0);
 800196c:	2100      	movs	r1, #0
 800196e:	6978      	ldr	r0, [r7, #20]
 8001970:	f7ff ff17 	bl	80017a2 <moveRightMotor>
	moveLeftMotor(direction, 0);
 8001974:	2100      	movs	r1, #0
 8001976:	6978      	ldr	r0, [r7, #20]
 8001978:	f7ff fefa 	bl	8001770 <moveLeftMotor>
	return 0;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3720      	adds	r7, #32
 8001982:	46bd      	mov	sp, r7
 8001984:	bdb0      	pop	{r4, r5, r7, pc}
 8001986:	bf00      	nop
 8001988:	33333333 	.word	0x33333333
 800198c:	3fe33333 	.word	0x3fe33333
 8001990:	20000140 	.word	0x20000140
 8001994:	20000144 	.word	0x20000144
 8001998:	20000130 	.word	0x20000130
 800199c:	20000132 	.word	0x20000132

080019a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019a6:	4b15      	ldr	r3, [pc, #84]	@ (80019fc <HAL_MspInit+0x5c>)
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	4a14      	ldr	r2, [pc, #80]	@ (80019fc <HAL_MspInit+0x5c>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	6193      	str	r3, [r2, #24]
 80019b2:	4b12      	ldr	r3, [pc, #72]	@ (80019fc <HAL_MspInit+0x5c>)
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	60bb      	str	r3, [r7, #8]
 80019bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019be:	4b0f      	ldr	r3, [pc, #60]	@ (80019fc <HAL_MspInit+0x5c>)
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	4a0e      	ldr	r2, [pc, #56]	@ (80019fc <HAL_MspInit+0x5c>)
 80019c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019c8:	61d3      	str	r3, [r2, #28]
 80019ca:	4b0c      	ldr	r3, [pc, #48]	@ (80019fc <HAL_MspInit+0x5c>)
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019d2:	607b      	str	r3, [r7, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001a00 <HAL_MspInit+0x60>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	4a04      	ldr	r2, [pc, #16]	@ (8001a00 <HAL_MspInit+0x60>)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019f2:	bf00      	nop
 80019f4:	3714      	adds	r7, #20
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40010000 	.word	0x40010000

08001a04 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b08a      	sub	sp, #40	@ 0x28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0c:	f107 0318 	add.w	r3, r7, #24
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a1f      	ldr	r2, [pc, #124]	@ (8001a9c <HAL_ADC_MspInit+0x98>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d137      	bne.n	8001a94 <HAL_ADC_MspInit+0x90>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a24:	4b1e      	ldr	r3, [pc, #120]	@ (8001aa0 <HAL_ADC_MspInit+0x9c>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	4a1d      	ldr	r2, [pc, #116]	@ (8001aa0 <HAL_ADC_MspInit+0x9c>)
 8001a2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a2e:	6193      	str	r3, [r2, #24]
 8001a30:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa0 <HAL_ADC_MspInit+0x9c>)
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3c:	4b18      	ldr	r3, [pc, #96]	@ (8001aa0 <HAL_ADC_MspInit+0x9c>)
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	4a17      	ldr	r2, [pc, #92]	@ (8001aa0 <HAL_ADC_MspInit+0x9c>)
 8001a42:	f043 0304 	orr.w	r3, r3, #4
 8001a46:	6193      	str	r3, [r2, #24]
 8001a48:	4b15      	ldr	r3, [pc, #84]	@ (8001aa0 <HAL_ADC_MspInit+0x9c>)
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	f003 0304 	and.w	r3, r3, #4
 8001a50:	613b      	str	r3, [r7, #16]
 8001a52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a54:	4b12      	ldr	r3, [pc, #72]	@ (8001aa0 <HAL_ADC_MspInit+0x9c>)
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	4a11      	ldr	r2, [pc, #68]	@ (8001aa0 <HAL_ADC_MspInit+0x9c>)
 8001a5a:	f043 0308 	orr.w	r3, r3, #8
 8001a5e:	6193      	str	r3, [r2, #24]
 8001a60:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa0 <HAL_ADC_MspInit+0x9c>)
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	f003 0308 	and.w	r3, r3, #8
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|REC_FR_Pin|REC_SR_Pin;
 8001a6c:	2332      	movs	r3, #50	@ 0x32
 8001a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a70:	2303      	movs	r3, #3
 8001a72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a74:	f107 0318 	add.w	r3, r7, #24
 8001a78:	4619      	mov	r1, r3
 8001a7a:	480a      	ldr	r0, [pc, #40]	@ (8001aa4 <HAL_ADC_MspInit+0xa0>)
 8001a7c:	f000 ff48 	bl	8002910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = REC_FL_Pin|REC_SL_Pin;
 8001a80:	2303      	movs	r3, #3
 8001a82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a84:	2303      	movs	r3, #3
 8001a86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a88:	f107 0318 	add.w	r3, r7, #24
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4806      	ldr	r0, [pc, #24]	@ (8001aa8 <HAL_ADC_MspInit+0xa4>)
 8001a90:	f000 ff3e 	bl	8002910 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001a94:	bf00      	nop
 8001a96:	3728      	adds	r7, #40	@ 0x28
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40012400 	.word	0x40012400
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	40010800 	.word	0x40010800
 8001aa8:	40010c00 	.word	0x40010c00

08001aac <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001abc:	d113      	bne.n	8001ae6 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001abe:	4b0c      	ldr	r3, [pc, #48]	@ (8001af0 <HAL_TIM_Base_MspInit+0x44>)
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	4a0b      	ldr	r2, [pc, #44]	@ (8001af0 <HAL_TIM_Base_MspInit+0x44>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	61d3      	str	r3, [r2, #28]
 8001aca:	4b09      	ldr	r3, [pc, #36]	@ (8001af0 <HAL_TIM_Base_MspInit+0x44>)
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2100      	movs	r1, #0
 8001ada:	201c      	movs	r0, #28
 8001adc:	f000 fee1 	bl	80028a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ae0:	201c      	movs	r0, #28
 8001ae2:	f000 fefa 	bl	80028da <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001ae6:	bf00      	nop
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40021000 	.word	0x40021000

08001af4 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08a      	sub	sp, #40	@ 0x28
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afc:	f107 0318 	add.w	r3, r7, #24
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a32      	ldr	r2, [pc, #200]	@ (8001bd8 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d12c      	bne.n	8001b6e <HAL_TIM_Encoder_MspInit+0x7a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b14:	4b31      	ldr	r3, [pc, #196]	@ (8001bdc <HAL_TIM_Encoder_MspInit+0xe8>)
 8001b16:	69db      	ldr	r3, [r3, #28]
 8001b18:	4a30      	ldr	r2, [pc, #192]	@ (8001bdc <HAL_TIM_Encoder_MspInit+0xe8>)
 8001b1a:	f043 0302 	orr.w	r3, r3, #2
 8001b1e:	61d3      	str	r3, [r2, #28]
 8001b20:	4b2e      	ldr	r3, [pc, #184]	@ (8001bdc <HAL_TIM_Encoder_MspInit+0xe8>)
 8001b22:	69db      	ldr	r3, [r3, #28]
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2c:	4b2b      	ldr	r3, [pc, #172]	@ (8001bdc <HAL_TIM_Encoder_MspInit+0xe8>)
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	4a2a      	ldr	r2, [pc, #168]	@ (8001bdc <HAL_TIM_Encoder_MspInit+0xe8>)
 8001b32:	f043 0304 	orr.w	r3, r3, #4
 8001b36:	6193      	str	r3, [r2, #24]
 8001b38:	4b28      	ldr	r3, [pc, #160]	@ (8001bdc <HAL_TIM_Encoder_MspInit+0xe8>)
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	613b      	str	r3, [r7, #16]
 8001b42:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ML_ENC_A_Pin|ML_ENC_B_Pin;
 8001b44:	23c0      	movs	r3, #192	@ 0xc0
 8001b46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b50:	f107 0318 	add.w	r3, r7, #24
 8001b54:	4619      	mov	r1, r3
 8001b56:	4822      	ldr	r0, [pc, #136]	@ (8001be0 <HAL_TIM_Encoder_MspInit+0xec>)
 8001b58:	f000 feda 	bl	8002910 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2100      	movs	r1, #0
 8001b60:	201d      	movs	r0, #29
 8001b62:	f000 fe9e 	bl	80028a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b66:	201d      	movs	r0, #29
 8001b68:	f000 feb7 	bl	80028da <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001b6c:	e030      	b.n	8001bd0 <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM4)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a1c      	ldr	r2, [pc, #112]	@ (8001be4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d12b      	bne.n	8001bd0 <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b78:	4b18      	ldr	r3, [pc, #96]	@ (8001bdc <HAL_TIM_Encoder_MspInit+0xe8>)
 8001b7a:	69db      	ldr	r3, [r3, #28]
 8001b7c:	4a17      	ldr	r2, [pc, #92]	@ (8001bdc <HAL_TIM_Encoder_MspInit+0xe8>)
 8001b7e:	f043 0304 	orr.w	r3, r3, #4
 8001b82:	61d3      	str	r3, [r2, #28]
 8001b84:	4b15      	ldr	r3, [pc, #84]	@ (8001bdc <HAL_TIM_Encoder_MspInit+0xe8>)
 8001b86:	69db      	ldr	r3, [r3, #28]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b90:	4b12      	ldr	r3, [pc, #72]	@ (8001bdc <HAL_TIM_Encoder_MspInit+0xe8>)
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	4a11      	ldr	r2, [pc, #68]	@ (8001bdc <HAL_TIM_Encoder_MspInit+0xe8>)
 8001b96:	f043 0308 	orr.w	r3, r3, #8
 8001b9a:	6193      	str	r3, [r2, #24]
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bdc <HAL_TIM_Encoder_MspInit+0xe8>)
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	f003 0308 	and.w	r3, r3, #8
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MR_ENC_B_Pin|MR_ENC_A_Pin;
 8001ba8:	23c0      	movs	r3, #192	@ 0xc0
 8001baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb4:	f107 0318 	add.w	r3, r7, #24
 8001bb8:	4619      	mov	r1, r3
 8001bba:	480b      	ldr	r0, [pc, #44]	@ (8001be8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001bbc:	f000 fea8 	bl	8002910 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	201e      	movs	r0, #30
 8001bc6:	f000 fe6c 	bl	80028a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001bca:	201e      	movs	r0, #30
 8001bcc:	f000 fe85 	bl	80028da <HAL_NVIC_EnableIRQ>
}
 8001bd0:	bf00      	nop
 8001bd2:	3728      	adds	r7, #40	@ 0x28
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40000400 	.word	0x40000400
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	40010800 	.word	0x40010800
 8001be4:	40000800 	.word	0x40000800
 8001be8:	40010c00 	.word	0x40010c00

08001bec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b088      	sub	sp, #32
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	f107 0310 	add.w	r3, r7, #16
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c0a:	d117      	bne.n	8001c3c <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c44 <HAL_TIM_MspPostInit+0x58>)
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	4a0c      	ldr	r2, [pc, #48]	@ (8001c44 <HAL_TIM_MspPostInit+0x58>)
 8001c12:	f043 0304 	orr.w	r3, r3, #4
 8001c16:	6193      	str	r3, [r2, #24]
 8001c18:	4b0a      	ldr	r3, [pc, #40]	@ (8001c44 <HAL_TIM_MspPostInit+0x58>)
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MR_PWM_Pin|ML_PWM_Pin;
 8001c24:	230c      	movs	r3, #12
 8001c26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c30:	f107 0310 	add.w	r3, r7, #16
 8001c34:	4619      	mov	r1, r3
 8001c36:	4804      	ldr	r0, [pc, #16]	@ (8001c48 <HAL_TIM_MspPostInit+0x5c>)
 8001c38:	f000 fe6a 	bl	8002910 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c3c:	bf00      	nop
 8001c3e:	3720      	adds	r7, #32
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40021000 	.word	0x40021000
 8001c48:	40010800 	.word	0x40010800

08001c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c50:	bf00      	nop
 8001c52:	e7fd      	b.n	8001c50 <NMI_Handler+0x4>

08001c54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c58:	bf00      	nop
 8001c5a:	e7fd      	b.n	8001c58 <HardFault_Handler+0x4>

08001c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c60:	bf00      	nop
 8001c62:	e7fd      	b.n	8001c60 <MemManage_Handler+0x4>

08001c64 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c68:	bf00      	nop
 8001c6a:	e7fd      	b.n	8001c68 <BusFault_Handler+0x4>

08001c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c70:	bf00      	nop
 8001c72:	e7fd      	b.n	8001c70 <UsageFault_Handler+0x4>

08001c74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr

08001c80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr

08001c8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr

08001c98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c9c:	f000 f892 	bl	8001dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ca0:	bf00      	nop
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ca8:	4802      	ldr	r0, [pc, #8]	@ (8001cb4 <TIM2_IRQHandler+0x10>)
 8001caa:	f002 f83b 	bl	8003d24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000058 	.word	0x20000058

08001cb8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001cbc:	4802      	ldr	r0, [pc, #8]	@ (8001cc8 <TIM3_IRQHandler+0x10>)
 8001cbe:	f002 f831 	bl	8003d24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	200000a0 	.word	0x200000a0

08001ccc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001cd0:	4802      	ldr	r0, [pc, #8]	@ (8001cdc <TIM4_IRQHandler+0x10>)
 8001cd2:	f002 f827 	bl	8003d24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	200000e8 	.word	0x200000e8

08001ce0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr

08001cec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cec:	f7ff fff8 	bl	8001ce0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cf0:	480b      	ldr	r0, [pc, #44]	@ (8001d20 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001cf2:	490c      	ldr	r1, [pc, #48]	@ (8001d24 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001cf4:	4a0c      	ldr	r2, [pc, #48]	@ (8001d28 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cf8:	e002      	b.n	8001d00 <LoopCopyDataInit>

08001cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cfe:	3304      	adds	r3, #4

08001d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d04:	d3f9      	bcc.n	8001cfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d06:	4a09      	ldr	r2, [pc, #36]	@ (8001d2c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d08:	4c09      	ldr	r4, [pc, #36]	@ (8001d30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d0c:	e001      	b.n	8001d12 <LoopFillZerobss>

08001d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d10:	3204      	adds	r2, #4

08001d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d14:	d3fb      	bcc.n	8001d0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d16:	f002 fdc1 	bl	800489c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d1a:	f7ff f9e7 	bl	80010ec <main>
  bx lr
 8001d1e:	4770      	bx	lr
  ldr r0, =_sdata
 8001d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d24:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001d28:	08004944 	.word	0x08004944
  ldr r2, =_sbss
 8001d2c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001d30:	20000150 	.word	0x20000150

08001d34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d34:	e7fe      	b.n	8001d34 <ADC1_2_IRQHandler>
	...

08001d38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d3c:	4b08      	ldr	r3, [pc, #32]	@ (8001d60 <HAL_Init+0x28>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a07      	ldr	r2, [pc, #28]	@ (8001d60 <HAL_Init+0x28>)
 8001d42:	f043 0310 	orr.w	r3, r3, #16
 8001d46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d48:	2003      	movs	r0, #3
 8001d4a:	f000 fd9f 	bl	800288c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d4e:	200f      	movs	r0, #15
 8001d50:	f000 f808 	bl	8001d64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d54:	f7ff fe24 	bl	80019a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40022000 	.word	0x40022000

08001d64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d6c:	4b12      	ldr	r3, [pc, #72]	@ (8001db8 <HAL_InitTick+0x54>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	4b12      	ldr	r3, [pc, #72]	@ (8001dbc <HAL_InitTick+0x58>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	4619      	mov	r1, r3
 8001d76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d82:	4618      	mov	r0, r3
 8001d84:	f000 fdb7 	bl	80028f6 <HAL_SYSTICK_Config>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e00e      	b.n	8001db0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2b0f      	cmp	r3, #15
 8001d96:	d80a      	bhi.n	8001dae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	6879      	ldr	r1, [r7, #4]
 8001d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001da0:	f000 fd7f 	bl	80028a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001da4:	4a06      	ldr	r2, [pc, #24]	@ (8001dc0 <HAL_InitTick+0x5c>)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
 8001dac:	e000      	b.n	8001db0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20000000 	.word	0x20000000
 8001dbc:	20000008 	.word	0x20000008
 8001dc0:	20000004 	.word	0x20000004

08001dc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dc8:	4b05      	ldr	r3, [pc, #20]	@ (8001de0 <HAL_IncTick+0x1c>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	461a      	mov	r2, r3
 8001dce:	4b05      	ldr	r3, [pc, #20]	@ (8001de4 <HAL_IncTick+0x20>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	4a03      	ldr	r2, [pc, #12]	@ (8001de4 <HAL_IncTick+0x20>)
 8001dd6:	6013      	str	r3, [r2, #0]
}
 8001dd8:	bf00      	nop
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr
 8001de0:	20000008 	.word	0x20000008
 8001de4:	2000014c 	.word	0x2000014c

08001de8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return uwTick;
 8001dec:	4b02      	ldr	r3, [pc, #8]	@ (8001df8 <HAL_GetTick+0x10>)
 8001dee:	681b      	ldr	r3, [r3, #0]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr
 8001df8:	2000014c 	.word	0x2000014c

08001dfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e04:	f7ff fff0 	bl	8001de8 <HAL_GetTick>
 8001e08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e14:	d005      	beq.n	8001e22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e16:	4b0a      	ldr	r3, [pc, #40]	@ (8001e40 <HAL_Delay+0x44>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4413      	add	r3, r2
 8001e20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e22:	bf00      	nop
 8001e24:	f7ff ffe0 	bl	8001de8 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d8f7      	bhi.n	8001e24 <HAL_Delay+0x28>
  {
  }
}
 8001e34:	bf00      	nop
 8001e36:	bf00      	nop
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000008 	.word	0x20000008

08001e44 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001e50:	2300      	movs	r3, #0
 8001e52:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e0be      	b.n	8001fe4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d109      	bne.n	8001e88 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7ff fdbe 	bl	8001a04 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 fbf1 	bl	8002670 <ADC_ConversionStop_Disable>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e96:	f003 0310 	and.w	r3, r3, #16
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f040 8099 	bne.w	8001fd2 <HAL_ADC_Init+0x18e>
 8001ea0:	7dfb      	ldrb	r3, [r7, #23]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f040 8095 	bne.w	8001fd2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eac:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001eb0:	f023 0302 	bic.w	r3, r3, #2
 8001eb4:	f043 0202 	orr.w	r2, r3, #2
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ec4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	7b1b      	ldrb	r3, [r3, #12]
 8001eca:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ecc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ece:	68ba      	ldr	r2, [r7, #8]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001edc:	d003      	beq.n	8001ee6 <HAL_ADC_Init+0xa2>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d102      	bne.n	8001eec <HAL_ADC_Init+0xa8>
 8001ee6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001eea:	e000      	b.n	8001eee <HAL_ADC_Init+0xaa>
 8001eec:	2300      	movs	r3, #0
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	7d1b      	ldrb	r3, [r3, #20]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d119      	bne.n	8001f30 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	7b1b      	ldrb	r3, [r3, #12]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d109      	bne.n	8001f18 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	035a      	lsls	r2, r3, #13
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	e00b      	b.n	8001f30 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f1c:	f043 0220 	orr.w	r2, r3, #32
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f28:	f043 0201 	orr.w	r2, r3, #1
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	689a      	ldr	r2, [r3, #8]
 8001f4a:	4b28      	ldr	r3, [pc, #160]	@ (8001fec <HAL_ADC_Init+0x1a8>)
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6812      	ldr	r2, [r2, #0]
 8001f52:	68b9      	ldr	r1, [r7, #8]
 8001f54:	430b      	orrs	r3, r1
 8001f56:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f60:	d003      	beq.n	8001f6a <HAL_ADC_Init+0x126>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d104      	bne.n	8001f74 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	051b      	lsls	r3, r3, #20
 8001f72:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f7a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689a      	ldr	r2, [r3, #8]
 8001f8e:	4b18      	ldr	r3, [pc, #96]	@ (8001ff0 <HAL_ADC_Init+0x1ac>)
 8001f90:	4013      	ands	r3, r2
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d10b      	bne.n	8001fb0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa2:	f023 0303 	bic.w	r3, r3, #3
 8001fa6:	f043 0201 	orr.w	r2, r3, #1
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001fae:	e018      	b.n	8001fe2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb4:	f023 0312 	bic.w	r3, r3, #18
 8001fb8:	f043 0210 	orr.w	r2, r3, #16
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc4:	f043 0201 	orr.w	r2, r3, #1
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001fd0:	e007      	b.n	8001fe2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd6:	f043 0210 	orr.w	r2, r3, #16
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	ffe1f7fd 	.word	0xffe1f7fd
 8001ff0:	ff1f0efe 	.word	0xff1f0efe

08001ff4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002006:	2b01      	cmp	r3, #1
 8002008:	d101      	bne.n	800200e <HAL_ADC_Start+0x1a>
 800200a:	2302      	movs	r3, #2
 800200c:	e098      	b.n	8002140 <HAL_ADC_Start+0x14c>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 fad0 	bl	80025bc <ADC_Enable>
 800201c:	4603      	mov	r3, r0
 800201e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002020:	7bfb      	ldrb	r3, [r7, #15]
 8002022:	2b00      	cmp	r3, #0
 8002024:	f040 8087 	bne.w	8002136 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800202c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002030:	f023 0301 	bic.w	r3, r3, #1
 8002034:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a41      	ldr	r2, [pc, #260]	@ (8002148 <HAL_ADC_Start+0x154>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d105      	bne.n	8002052 <HAL_ADC_Start+0x5e>
 8002046:	4b41      	ldr	r3, [pc, #260]	@ (800214c <HAL_ADC_Start+0x158>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d115      	bne.n	800207e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002056:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002068:	2b00      	cmp	r3, #0
 800206a:	d026      	beq.n	80020ba <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002070:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002074:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800207c:	e01d      	b.n	80020ba <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002082:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a2f      	ldr	r2, [pc, #188]	@ (800214c <HAL_ADC_Start+0x158>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d004      	beq.n	800209e <HAL_ADC_Start+0xaa>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a2b      	ldr	r2, [pc, #172]	@ (8002148 <HAL_ADC_Start+0x154>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d10d      	bne.n	80020ba <HAL_ADC_Start+0xc6>
 800209e:	4b2b      	ldr	r3, [pc, #172]	@ (800214c <HAL_ADC_Start+0x158>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d007      	beq.n	80020ba <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ae:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80020b2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d006      	beq.n	80020d4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ca:	f023 0206 	bic.w	r2, r3, #6
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80020d2:	e002      	b.n	80020da <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f06f 0202 	mvn.w	r2, #2
 80020ea:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80020f6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80020fa:	d113      	bne.n	8002124 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002100:	4a11      	ldr	r2, [pc, #68]	@ (8002148 <HAL_ADC_Start+0x154>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d105      	bne.n	8002112 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002106:	4b11      	ldr	r3, [pc, #68]	@ (800214c <HAL_ADC_Start+0x158>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800210e:	2b00      	cmp	r3, #0
 8002110:	d108      	bne.n	8002124 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002120:	609a      	str	r2, [r3, #8]
 8002122:	e00c      	b.n	800213e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689a      	ldr	r2, [r3, #8]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	e003      	b.n	800213e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800213e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3710      	adds	r7, #16
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40012800 	.word	0x40012800
 800214c:	40012400 	.word	0x40012400

08002150 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002158:	2300      	movs	r3, #0
 800215a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002162:	2b01      	cmp	r3, #1
 8002164:	d101      	bne.n	800216a <HAL_ADC_Stop+0x1a>
 8002166:	2302      	movs	r3, #2
 8002168:	e01a      	b.n	80021a0 <HAL_ADC_Stop+0x50>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 fa7c 	bl	8002670 <ADC_ConversionStop_Disable>
 8002178:	4603      	mov	r3, r0
 800217a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800217c:	7bfb      	ldrb	r3, [r7, #15]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d109      	bne.n	8002196 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002186:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800218a:	f023 0301 	bic.w	r3, r3, #1
 800218e:	f043 0201 	orr.w	r2, r3, #1
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800219e:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80021a8:	b590      	push	{r4, r7, lr}
 80021aa:	b087      	sub	sp, #28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80021b2:	2300      	movs	r3, #0
 80021b4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80021b6:	2300      	movs	r3, #0
 80021b8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80021be:	f7ff fe13 	bl	8001de8 <HAL_GetTick>
 80021c2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00b      	beq.n	80021ea <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d6:	f043 0220 	orr.w	r2, r3, #32
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e0d3      	b.n	8002392 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d131      	bne.n	800225c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fe:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002202:	2b00      	cmp	r3, #0
 8002204:	d12a      	bne.n	800225c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002206:	e021      	b.n	800224c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800220e:	d01d      	beq.n	800224c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d007      	beq.n	8002226 <HAL_ADC_PollForConversion+0x7e>
 8002216:	f7ff fde7 	bl	8001de8 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	d212      	bcs.n	800224c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d10b      	bne.n	800224c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002238:	f043 0204 	orr.w	r2, r3, #4
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e0a2      	b.n	8002392 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0d6      	beq.n	8002208 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800225a:	e070      	b.n	800233e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800225c:	4b4f      	ldr	r3, [pc, #316]	@ (800239c <HAL_ADC_PollForConversion+0x1f4>)
 800225e:	681c      	ldr	r4, [r3, #0]
 8002260:	2002      	movs	r0, #2
 8002262:	f001 f9bd 	bl	80035e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002266:	4603      	mov	r3, r0
 8002268:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6919      	ldr	r1, [r3, #16]
 8002272:	4b4b      	ldr	r3, [pc, #300]	@ (80023a0 <HAL_ADC_PollForConversion+0x1f8>)
 8002274:	400b      	ands	r3, r1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d118      	bne.n	80022ac <HAL_ADC_PollForConversion+0x104>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68d9      	ldr	r1, [r3, #12]
 8002280:	4b48      	ldr	r3, [pc, #288]	@ (80023a4 <HAL_ADC_PollForConversion+0x1fc>)
 8002282:	400b      	ands	r3, r1
 8002284:	2b00      	cmp	r3, #0
 8002286:	d111      	bne.n	80022ac <HAL_ADC_PollForConversion+0x104>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6919      	ldr	r1, [r3, #16]
 800228e:	4b46      	ldr	r3, [pc, #280]	@ (80023a8 <HAL_ADC_PollForConversion+0x200>)
 8002290:	400b      	ands	r3, r1
 8002292:	2b00      	cmp	r3, #0
 8002294:	d108      	bne.n	80022a8 <HAL_ADC_PollForConversion+0x100>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68d9      	ldr	r1, [r3, #12]
 800229c:	4b43      	ldr	r3, [pc, #268]	@ (80023ac <HAL_ADC_PollForConversion+0x204>)
 800229e:	400b      	ands	r3, r1
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d101      	bne.n	80022a8 <HAL_ADC_PollForConversion+0x100>
 80022a4:	2314      	movs	r3, #20
 80022a6:	e020      	b.n	80022ea <HAL_ADC_PollForConversion+0x142>
 80022a8:	2329      	movs	r3, #41	@ 0x29
 80022aa:	e01e      	b.n	80022ea <HAL_ADC_PollForConversion+0x142>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6919      	ldr	r1, [r3, #16]
 80022b2:	4b3d      	ldr	r3, [pc, #244]	@ (80023a8 <HAL_ADC_PollForConversion+0x200>)
 80022b4:	400b      	ands	r3, r1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d106      	bne.n	80022c8 <HAL_ADC_PollForConversion+0x120>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68d9      	ldr	r1, [r3, #12]
 80022c0:	4b3a      	ldr	r3, [pc, #232]	@ (80023ac <HAL_ADC_PollForConversion+0x204>)
 80022c2:	400b      	ands	r3, r1
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00d      	beq.n	80022e4 <HAL_ADC_PollForConversion+0x13c>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6919      	ldr	r1, [r3, #16]
 80022ce:	4b38      	ldr	r3, [pc, #224]	@ (80023b0 <HAL_ADC_PollForConversion+0x208>)
 80022d0:	400b      	ands	r3, r1
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d108      	bne.n	80022e8 <HAL_ADC_PollForConversion+0x140>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68d9      	ldr	r1, [r3, #12]
 80022dc:	4b34      	ldr	r3, [pc, #208]	@ (80023b0 <HAL_ADC_PollForConversion+0x208>)
 80022de:	400b      	ands	r3, r1
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <HAL_ADC_PollForConversion+0x140>
 80022e4:	2354      	movs	r3, #84	@ 0x54
 80022e6:	e000      	b.n	80022ea <HAL_ADC_PollForConversion+0x142>
 80022e8:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80022ea:	fb02 f303 	mul.w	r3, r2, r3
 80022ee:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80022f0:	e021      	b.n	8002336 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f8:	d01a      	beq.n	8002330 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d007      	beq.n	8002310 <HAL_ADC_PollForConversion+0x168>
 8002300:	f7ff fd72 	bl	8001de8 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	429a      	cmp	r2, r3
 800230e:	d20f      	bcs.n	8002330 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	429a      	cmp	r2, r3
 8002316:	d90b      	bls.n	8002330 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800231c:	f043 0204 	orr.w	r2, r3, #4
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e030      	b.n	8002392 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	3301      	adds	r3, #1
 8002334:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	429a      	cmp	r2, r3
 800233c:	d8d9      	bhi.n	80022f2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f06f 0212 	mvn.w	r2, #18
 8002346:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800234c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800235e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002362:	d115      	bne.n	8002390 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002368:	2b00      	cmp	r3, #0
 800236a:	d111      	bne.n	8002390 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002370:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800237c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d105      	bne.n	8002390 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002388:	f043 0201 	orr.w	r2, r3, #1
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	371c      	adds	r7, #28
 8002396:	46bd      	mov	sp, r7
 8002398:	bd90      	pop	{r4, r7, pc}
 800239a:	bf00      	nop
 800239c:	20000000 	.word	0x20000000
 80023a0:	24924924 	.word	0x24924924
 80023a4:	00924924 	.word	0x00924924
 80023a8:	12492492 	.word	0x12492492
 80023ac:	00492492 	.word	0x00492492
 80023b0:	00249249 	.word	0x00249249

080023b4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr

080023cc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023d6:	2300      	movs	r3, #0
 80023d8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80023da:	2300      	movs	r3, #0
 80023dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d101      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x20>
 80023e8:	2302      	movs	r3, #2
 80023ea:	e0dc      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x1da>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b06      	cmp	r3, #6
 80023fa:	d81c      	bhi.n	8002436 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	4613      	mov	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	3b05      	subs	r3, #5
 800240e:	221f      	movs	r2, #31
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	4019      	ands	r1, r3
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	6818      	ldr	r0, [r3, #0]
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	4613      	mov	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	3b05      	subs	r3, #5
 8002428:	fa00 f203 	lsl.w	r2, r0, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	430a      	orrs	r2, r1
 8002432:	635a      	str	r2, [r3, #52]	@ 0x34
 8002434:	e03c      	b.n	80024b0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b0c      	cmp	r3, #12
 800243c:	d81c      	bhi.n	8002478 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	4613      	mov	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	3b23      	subs	r3, #35	@ 0x23
 8002450:	221f      	movs	r2, #31
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	43db      	mvns	r3, r3
 8002458:	4019      	ands	r1, r3
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	6818      	ldr	r0, [r3, #0]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	4613      	mov	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	3b23      	subs	r3, #35	@ 0x23
 800246a:	fa00 f203 	lsl.w	r2, r0, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	631a      	str	r2, [r3, #48]	@ 0x30
 8002476:	e01b      	b.n	80024b0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	4613      	mov	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	3b41      	subs	r3, #65	@ 0x41
 800248a:	221f      	movs	r2, #31
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	43db      	mvns	r3, r3
 8002492:	4019      	ands	r1, r3
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	6818      	ldr	r0, [r3, #0]
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	4613      	mov	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	3b41      	subs	r3, #65	@ 0x41
 80024a4:	fa00 f203 	lsl.w	r2, r0, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2b09      	cmp	r3, #9
 80024b6:	d91c      	bls.n	80024f2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68d9      	ldr	r1, [r3, #12]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	4613      	mov	r3, r2
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	4413      	add	r3, r2
 80024c8:	3b1e      	subs	r3, #30
 80024ca:	2207      	movs	r2, #7
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	43db      	mvns	r3, r3
 80024d2:	4019      	ands	r1, r3
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	6898      	ldr	r0, [r3, #8]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	4613      	mov	r3, r2
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	4413      	add	r3, r2
 80024e2:	3b1e      	subs	r3, #30
 80024e4:	fa00 f203 	lsl.w	r2, r0, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	430a      	orrs	r2, r1
 80024ee:	60da      	str	r2, [r3, #12]
 80024f0:	e019      	b.n	8002526 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6919      	ldr	r1, [r3, #16]
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	4613      	mov	r3, r2
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	4413      	add	r3, r2
 8002502:	2207      	movs	r2, #7
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	43db      	mvns	r3, r3
 800250a:	4019      	ands	r1, r3
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	6898      	ldr	r0, [r3, #8]
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	4613      	mov	r3, r2
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	4413      	add	r3, r2
 800251a:	fa00 f203 	lsl.w	r2, r0, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2b10      	cmp	r3, #16
 800252c:	d003      	beq.n	8002536 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002532:	2b11      	cmp	r3, #17
 8002534:	d132      	bne.n	800259c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a1d      	ldr	r2, [pc, #116]	@ (80025b0 <HAL_ADC_ConfigChannel+0x1e4>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d125      	bne.n	800258c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d126      	bne.n	800259c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800255c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2b10      	cmp	r3, #16
 8002564:	d11a      	bne.n	800259c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002566:	4b13      	ldr	r3, [pc, #76]	@ (80025b4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a13      	ldr	r2, [pc, #76]	@ (80025b8 <HAL_ADC_ConfigChannel+0x1ec>)
 800256c:	fba2 2303 	umull	r2, r3, r2, r3
 8002570:	0c9a      	lsrs	r2, r3, #18
 8002572:	4613      	mov	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800257c:	e002      	b.n	8002584 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	3b01      	subs	r3, #1
 8002582:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1f9      	bne.n	800257e <HAL_ADC_ConfigChannel+0x1b2>
 800258a:	e007      	b.n	800259c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002590:	f043 0220 	orr.w	r2, r3, #32
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3714      	adds	r7, #20
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr
 80025b0:	40012400 	.word	0x40012400
 80025b4:	20000000 	.word	0x20000000
 80025b8:	431bde83 	.word	0x431bde83

080025bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d040      	beq.n	800265c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f042 0201 	orr.w	r2, r2, #1
 80025e8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025ea:	4b1f      	ldr	r3, [pc, #124]	@ (8002668 <ADC_Enable+0xac>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a1f      	ldr	r2, [pc, #124]	@ (800266c <ADC_Enable+0xb0>)
 80025f0:	fba2 2303 	umull	r2, r3, r2, r3
 80025f4:	0c9b      	lsrs	r3, r3, #18
 80025f6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80025f8:	e002      	b.n	8002600 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	3b01      	subs	r3, #1
 80025fe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f9      	bne.n	80025fa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002606:	f7ff fbef 	bl	8001de8 <HAL_GetTick>
 800260a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800260c:	e01f      	b.n	800264e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800260e:	f7ff fbeb 	bl	8001de8 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d918      	bls.n	800264e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b01      	cmp	r3, #1
 8002628:	d011      	beq.n	800264e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800262e:	f043 0210 	orr.w	r2, r3, #16
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800263a:	f043 0201 	orr.w	r2, r3, #1
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e007      	b.n	800265e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b01      	cmp	r3, #1
 800265a:	d1d8      	bne.n	800260e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20000000 	.word	0x20000000
 800266c:	431bde83 	.word	0x431bde83

08002670 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002678:	2300      	movs	r3, #0
 800267a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b01      	cmp	r3, #1
 8002688:	d12e      	bne.n	80026e8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 0201 	bic.w	r2, r2, #1
 8002698:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800269a:	f7ff fba5 	bl	8001de8 <HAL_GetTick>
 800269e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026a0:	e01b      	b.n	80026da <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80026a2:	f7ff fba1 	bl	8001de8 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d914      	bls.n	80026da <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d10d      	bne.n	80026da <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c2:	f043 0210 	orr.w	r2, r3, #16
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ce:	f043 0201 	orr.w	r2, r3, #1
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e007      	b.n	80026ea <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d0dc      	beq.n	80026a2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
	...

080026f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002704:	4b0c      	ldr	r3, [pc, #48]	@ (8002738 <__NVIC_SetPriorityGrouping+0x44>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002710:	4013      	ands	r3, r2
 8002712:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800271c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002720:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002724:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002726:	4a04      	ldr	r2, [pc, #16]	@ (8002738 <__NVIC_SetPriorityGrouping+0x44>)
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	60d3      	str	r3, [r2, #12]
}
 800272c:	bf00      	nop
 800272e:	3714      	adds	r7, #20
 8002730:	46bd      	mov	sp, r7
 8002732:	bc80      	pop	{r7}
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	e000ed00 	.word	0xe000ed00

0800273c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002740:	4b04      	ldr	r3, [pc, #16]	@ (8002754 <__NVIC_GetPriorityGrouping+0x18>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	0a1b      	lsrs	r3, r3, #8
 8002746:	f003 0307 	and.w	r3, r3, #7
}
 800274a:	4618      	mov	r0, r3
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002766:	2b00      	cmp	r3, #0
 8002768:	db0b      	blt.n	8002782 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800276a:	79fb      	ldrb	r3, [r7, #7]
 800276c:	f003 021f 	and.w	r2, r3, #31
 8002770:	4906      	ldr	r1, [pc, #24]	@ (800278c <__NVIC_EnableIRQ+0x34>)
 8002772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002776:	095b      	lsrs	r3, r3, #5
 8002778:	2001      	movs	r0, #1
 800277a:	fa00 f202 	lsl.w	r2, r0, r2
 800277e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr
 800278c:	e000e100 	.word	0xe000e100

08002790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	6039      	str	r1, [r7, #0]
 800279a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800279c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	db0a      	blt.n	80027ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	490c      	ldr	r1, [pc, #48]	@ (80027dc <__NVIC_SetPriority+0x4c>)
 80027aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ae:	0112      	lsls	r2, r2, #4
 80027b0:	b2d2      	uxtb	r2, r2
 80027b2:	440b      	add	r3, r1
 80027b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027b8:	e00a      	b.n	80027d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	4908      	ldr	r1, [pc, #32]	@ (80027e0 <__NVIC_SetPriority+0x50>)
 80027c0:	79fb      	ldrb	r3, [r7, #7]
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	3b04      	subs	r3, #4
 80027c8:	0112      	lsls	r2, r2, #4
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	440b      	add	r3, r1
 80027ce:	761a      	strb	r2, [r3, #24]
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	e000e100 	.word	0xe000e100
 80027e0:	e000ed00 	.word	0xe000ed00

080027e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b089      	sub	sp, #36	@ 0x24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	f1c3 0307 	rsb	r3, r3, #7
 80027fe:	2b04      	cmp	r3, #4
 8002800:	bf28      	it	cs
 8002802:	2304      	movcs	r3, #4
 8002804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	3304      	adds	r3, #4
 800280a:	2b06      	cmp	r3, #6
 800280c:	d902      	bls.n	8002814 <NVIC_EncodePriority+0x30>
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	3b03      	subs	r3, #3
 8002812:	e000      	b.n	8002816 <NVIC_EncodePriority+0x32>
 8002814:	2300      	movs	r3, #0
 8002816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002818:	f04f 32ff 	mov.w	r2, #4294967295
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43da      	mvns	r2, r3
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	401a      	ands	r2, r3
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800282c:	f04f 31ff 	mov.w	r1, #4294967295
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	fa01 f303 	lsl.w	r3, r1, r3
 8002836:	43d9      	mvns	r1, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800283c:	4313      	orrs	r3, r2
         );
}
 800283e:	4618      	mov	r0, r3
 8002840:	3724      	adds	r7, #36	@ 0x24
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr

08002848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3b01      	subs	r3, #1
 8002854:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002858:	d301      	bcc.n	800285e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800285a:	2301      	movs	r3, #1
 800285c:	e00f      	b.n	800287e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800285e:	4a0a      	ldr	r2, [pc, #40]	@ (8002888 <SysTick_Config+0x40>)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3b01      	subs	r3, #1
 8002864:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002866:	210f      	movs	r1, #15
 8002868:	f04f 30ff 	mov.w	r0, #4294967295
 800286c:	f7ff ff90 	bl	8002790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002870:	4b05      	ldr	r3, [pc, #20]	@ (8002888 <SysTick_Config+0x40>)
 8002872:	2200      	movs	r2, #0
 8002874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002876:	4b04      	ldr	r3, [pc, #16]	@ (8002888 <SysTick_Config+0x40>)
 8002878:	2207      	movs	r2, #7
 800287a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	e000e010 	.word	0xe000e010

0800288c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f7ff ff2d 	bl	80026f4 <__NVIC_SetPriorityGrouping>
}
 800289a:	bf00      	nop
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b086      	sub	sp, #24
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	4603      	mov	r3, r0
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	607a      	str	r2, [r7, #4]
 80028ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028b4:	f7ff ff42 	bl	800273c <__NVIC_GetPriorityGrouping>
 80028b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	68b9      	ldr	r1, [r7, #8]
 80028be:	6978      	ldr	r0, [r7, #20]
 80028c0:	f7ff ff90 	bl	80027e4 <NVIC_EncodePriority>
 80028c4:	4602      	mov	r2, r0
 80028c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ca:	4611      	mov	r1, r2
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff ff5f 	bl	8002790 <__NVIC_SetPriority>
}
 80028d2:	bf00      	nop
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b082      	sub	sp, #8
 80028de:	af00      	add	r7, sp, #0
 80028e0:	4603      	mov	r3, r0
 80028e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff ff35 	bl	8002758 <__NVIC_EnableIRQ>
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7ff ffa2 	bl	8002848 <SysTick_Config>
 8002904:	4603      	mov	r3, r0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002910:	b480      	push	{r7}
 8002912:	b08b      	sub	sp, #44	@ 0x2c
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800291a:	2300      	movs	r3, #0
 800291c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800291e:	2300      	movs	r3, #0
 8002920:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002922:	e169      	b.n	8002bf8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002924:	2201      	movs	r2, #1
 8002926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	69fa      	ldr	r2, [r7, #28]
 8002934:	4013      	ands	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	429a      	cmp	r2, r3
 800293e:	f040 8158 	bne.w	8002bf2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	4a9a      	ldr	r2, [pc, #616]	@ (8002bb0 <HAL_GPIO_Init+0x2a0>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d05e      	beq.n	8002a0a <HAL_GPIO_Init+0xfa>
 800294c:	4a98      	ldr	r2, [pc, #608]	@ (8002bb0 <HAL_GPIO_Init+0x2a0>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d875      	bhi.n	8002a3e <HAL_GPIO_Init+0x12e>
 8002952:	4a98      	ldr	r2, [pc, #608]	@ (8002bb4 <HAL_GPIO_Init+0x2a4>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d058      	beq.n	8002a0a <HAL_GPIO_Init+0xfa>
 8002958:	4a96      	ldr	r2, [pc, #600]	@ (8002bb4 <HAL_GPIO_Init+0x2a4>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d86f      	bhi.n	8002a3e <HAL_GPIO_Init+0x12e>
 800295e:	4a96      	ldr	r2, [pc, #600]	@ (8002bb8 <HAL_GPIO_Init+0x2a8>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d052      	beq.n	8002a0a <HAL_GPIO_Init+0xfa>
 8002964:	4a94      	ldr	r2, [pc, #592]	@ (8002bb8 <HAL_GPIO_Init+0x2a8>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d869      	bhi.n	8002a3e <HAL_GPIO_Init+0x12e>
 800296a:	4a94      	ldr	r2, [pc, #592]	@ (8002bbc <HAL_GPIO_Init+0x2ac>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d04c      	beq.n	8002a0a <HAL_GPIO_Init+0xfa>
 8002970:	4a92      	ldr	r2, [pc, #584]	@ (8002bbc <HAL_GPIO_Init+0x2ac>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d863      	bhi.n	8002a3e <HAL_GPIO_Init+0x12e>
 8002976:	4a92      	ldr	r2, [pc, #584]	@ (8002bc0 <HAL_GPIO_Init+0x2b0>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d046      	beq.n	8002a0a <HAL_GPIO_Init+0xfa>
 800297c:	4a90      	ldr	r2, [pc, #576]	@ (8002bc0 <HAL_GPIO_Init+0x2b0>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d85d      	bhi.n	8002a3e <HAL_GPIO_Init+0x12e>
 8002982:	2b12      	cmp	r3, #18
 8002984:	d82a      	bhi.n	80029dc <HAL_GPIO_Init+0xcc>
 8002986:	2b12      	cmp	r3, #18
 8002988:	d859      	bhi.n	8002a3e <HAL_GPIO_Init+0x12e>
 800298a:	a201      	add	r2, pc, #4	@ (adr r2, 8002990 <HAL_GPIO_Init+0x80>)
 800298c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002990:	08002a0b 	.word	0x08002a0b
 8002994:	080029e5 	.word	0x080029e5
 8002998:	080029f7 	.word	0x080029f7
 800299c:	08002a39 	.word	0x08002a39
 80029a0:	08002a3f 	.word	0x08002a3f
 80029a4:	08002a3f 	.word	0x08002a3f
 80029a8:	08002a3f 	.word	0x08002a3f
 80029ac:	08002a3f 	.word	0x08002a3f
 80029b0:	08002a3f 	.word	0x08002a3f
 80029b4:	08002a3f 	.word	0x08002a3f
 80029b8:	08002a3f 	.word	0x08002a3f
 80029bc:	08002a3f 	.word	0x08002a3f
 80029c0:	08002a3f 	.word	0x08002a3f
 80029c4:	08002a3f 	.word	0x08002a3f
 80029c8:	08002a3f 	.word	0x08002a3f
 80029cc:	08002a3f 	.word	0x08002a3f
 80029d0:	08002a3f 	.word	0x08002a3f
 80029d4:	080029ed 	.word	0x080029ed
 80029d8:	08002a01 	.word	0x08002a01
 80029dc:	4a79      	ldr	r2, [pc, #484]	@ (8002bc4 <HAL_GPIO_Init+0x2b4>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d013      	beq.n	8002a0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80029e2:	e02c      	b.n	8002a3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	623b      	str	r3, [r7, #32]
          break;
 80029ea:	e029      	b.n	8002a40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	3304      	adds	r3, #4
 80029f2:	623b      	str	r3, [r7, #32]
          break;
 80029f4:	e024      	b.n	8002a40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	3308      	adds	r3, #8
 80029fc:	623b      	str	r3, [r7, #32]
          break;
 80029fe:	e01f      	b.n	8002a40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	330c      	adds	r3, #12
 8002a06:	623b      	str	r3, [r7, #32]
          break;
 8002a08:	e01a      	b.n	8002a40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d102      	bne.n	8002a18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a12:	2304      	movs	r3, #4
 8002a14:	623b      	str	r3, [r7, #32]
          break;
 8002a16:	e013      	b.n	8002a40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d105      	bne.n	8002a2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a20:	2308      	movs	r3, #8
 8002a22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	69fa      	ldr	r2, [r7, #28]
 8002a28:	611a      	str	r2, [r3, #16]
          break;
 8002a2a:	e009      	b.n	8002a40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a2c:	2308      	movs	r3, #8
 8002a2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	69fa      	ldr	r2, [r7, #28]
 8002a34:	615a      	str	r2, [r3, #20]
          break;
 8002a36:	e003      	b.n	8002a40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	623b      	str	r3, [r7, #32]
          break;
 8002a3c:	e000      	b.n	8002a40 <HAL_GPIO_Init+0x130>
          break;
 8002a3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	2bff      	cmp	r3, #255	@ 0xff
 8002a44:	d801      	bhi.n	8002a4a <HAL_GPIO_Init+0x13a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	e001      	b.n	8002a4e <HAL_GPIO_Init+0x13e>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	2bff      	cmp	r3, #255	@ 0xff
 8002a54:	d802      	bhi.n	8002a5c <HAL_GPIO_Init+0x14c>
 8002a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	e002      	b.n	8002a62 <HAL_GPIO_Init+0x152>
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5e:	3b08      	subs	r3, #8
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	210f      	movs	r1, #15
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a70:	43db      	mvns	r3, r3
 8002a72:	401a      	ands	r2, r3
 8002a74:	6a39      	ldr	r1, [r7, #32]
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7c:	431a      	orrs	r2, r3
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 80b1 	beq.w	8002bf2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a90:	4b4d      	ldr	r3, [pc, #308]	@ (8002bc8 <HAL_GPIO_Init+0x2b8>)
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	4a4c      	ldr	r2, [pc, #304]	@ (8002bc8 <HAL_GPIO_Init+0x2b8>)
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	6193      	str	r3, [r2, #24]
 8002a9c:	4b4a      	ldr	r3, [pc, #296]	@ (8002bc8 <HAL_GPIO_Init+0x2b8>)
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002aa8:	4a48      	ldr	r2, [pc, #288]	@ (8002bcc <HAL_GPIO_Init+0x2bc>)
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aac:	089b      	lsrs	r3, r3, #2
 8002aae:	3302      	adds	r3, #2
 8002ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab8:	f003 0303 	and.w	r3, r3, #3
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	220f      	movs	r2, #15
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a40      	ldr	r2, [pc, #256]	@ (8002bd0 <HAL_GPIO_Init+0x2c0>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d013      	beq.n	8002afc <HAL_GPIO_Init+0x1ec>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a3f      	ldr	r2, [pc, #252]	@ (8002bd4 <HAL_GPIO_Init+0x2c4>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d00d      	beq.n	8002af8 <HAL_GPIO_Init+0x1e8>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a3e      	ldr	r2, [pc, #248]	@ (8002bd8 <HAL_GPIO_Init+0x2c8>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d007      	beq.n	8002af4 <HAL_GPIO_Init+0x1e4>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a3d      	ldr	r2, [pc, #244]	@ (8002bdc <HAL_GPIO_Init+0x2cc>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d101      	bne.n	8002af0 <HAL_GPIO_Init+0x1e0>
 8002aec:	2303      	movs	r3, #3
 8002aee:	e006      	b.n	8002afe <HAL_GPIO_Init+0x1ee>
 8002af0:	2304      	movs	r3, #4
 8002af2:	e004      	b.n	8002afe <HAL_GPIO_Init+0x1ee>
 8002af4:	2302      	movs	r3, #2
 8002af6:	e002      	b.n	8002afe <HAL_GPIO_Init+0x1ee>
 8002af8:	2301      	movs	r3, #1
 8002afa:	e000      	b.n	8002afe <HAL_GPIO_Init+0x1ee>
 8002afc:	2300      	movs	r3, #0
 8002afe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b00:	f002 0203 	and.w	r2, r2, #3
 8002b04:	0092      	lsls	r2, r2, #2
 8002b06:	4093      	lsls	r3, r2
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b0e:	492f      	ldr	r1, [pc, #188]	@ (8002bcc <HAL_GPIO_Init+0x2bc>)
 8002b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b12:	089b      	lsrs	r3, r3, #2
 8002b14:	3302      	adds	r3, #2
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d006      	beq.n	8002b36 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b28:	4b2d      	ldr	r3, [pc, #180]	@ (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	492c      	ldr	r1, [pc, #176]	@ (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	608b      	str	r3, [r1, #8]
 8002b34:	e006      	b.n	8002b44 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b36:	4b2a      	ldr	r3, [pc, #168]	@ (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002b38:	689a      	ldr	r2, [r3, #8]
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	4928      	ldr	r1, [pc, #160]	@ (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002b40:	4013      	ands	r3, r2
 8002b42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d006      	beq.n	8002b5e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b50:	4b23      	ldr	r3, [pc, #140]	@ (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002b52:	68da      	ldr	r2, [r3, #12]
 8002b54:	4922      	ldr	r1, [pc, #136]	@ (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	60cb      	str	r3, [r1, #12]
 8002b5c:	e006      	b.n	8002b6c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b5e:	4b20      	ldr	r3, [pc, #128]	@ (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002b60:	68da      	ldr	r2, [r3, #12]
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	43db      	mvns	r3, r3
 8002b66:	491e      	ldr	r1, [pc, #120]	@ (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002b68:	4013      	ands	r3, r2
 8002b6a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d006      	beq.n	8002b86 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b78:	4b19      	ldr	r3, [pc, #100]	@ (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	4918      	ldr	r1, [pc, #96]	@ (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	604b      	str	r3, [r1, #4]
 8002b84:	e006      	b.n	8002b94 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b86:	4b16      	ldr	r3, [pc, #88]	@ (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	4914      	ldr	r1, [pc, #80]	@ (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d021      	beq.n	8002be4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	490e      	ldr	r1, [pc, #56]	@ (8002be0 <HAL_GPIO_Init+0x2d0>)
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	600b      	str	r3, [r1, #0]
 8002bac:	e021      	b.n	8002bf2 <HAL_GPIO_Init+0x2e2>
 8002bae:	bf00      	nop
 8002bb0:	10320000 	.word	0x10320000
 8002bb4:	10310000 	.word	0x10310000
 8002bb8:	10220000 	.word	0x10220000
 8002bbc:	10210000 	.word	0x10210000
 8002bc0:	10120000 	.word	0x10120000
 8002bc4:	10110000 	.word	0x10110000
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	40010000 	.word	0x40010000
 8002bd0:	40010800 	.word	0x40010800
 8002bd4:	40010c00 	.word	0x40010c00
 8002bd8:	40011000 	.word	0x40011000
 8002bdc:	40011400 	.word	0x40011400
 8002be0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002be4:	4b0b      	ldr	r3, [pc, #44]	@ (8002c14 <HAL_GPIO_Init+0x304>)
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	43db      	mvns	r3, r3
 8002bec:	4909      	ldr	r1, [pc, #36]	@ (8002c14 <HAL_GPIO_Init+0x304>)
 8002bee:	4013      	ands	r3, r2
 8002bf0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f47f ae8e 	bne.w	8002924 <HAL_GPIO_Init+0x14>
  }
}
 8002c08:	bf00      	nop
 8002c0a:	bf00      	nop
 8002c0c:	372c      	adds	r7, #44	@ 0x2c
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr
 8002c14:	40010400 	.word	0x40010400

08002c18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	460b      	mov	r3, r1
 8002c22:	807b      	strh	r3, [r7, #2]
 8002c24:	4613      	mov	r3, r2
 8002c26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c28:	787b      	ldrb	r3, [r7, #1]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c2e:	887a      	ldrh	r2, [r7, #2]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c34:	e003      	b.n	8002c3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c36:	887b      	ldrh	r3, [r7, #2]
 8002c38:	041a      	lsls	r2, r3, #16
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	611a      	str	r2, [r3, #16]
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc80      	pop	{r7}
 8002c46:	4770      	bx	lr

08002c48 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	460b      	mov	r3, r1
 8002c52:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c5a:	887a      	ldrh	r2, [r7, #2]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	041a      	lsls	r2, r3, #16
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	43d9      	mvns	r1, r3
 8002c66:	887b      	ldrh	r3, [r7, #2]
 8002c68:	400b      	ands	r3, r1
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	611a      	str	r2, [r3, #16]
}
 8002c70:	bf00      	nop
 8002c72:	3714      	adds	r7, #20
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	4770      	bx	lr
	...

08002c7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e272      	b.n	8003174 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f000 8087 	beq.w	8002daa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c9c:	4b92      	ldr	r3, [pc, #584]	@ (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f003 030c 	and.w	r3, r3, #12
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d00c      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ca8:	4b8f      	ldr	r3, [pc, #572]	@ (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f003 030c 	and.w	r3, r3, #12
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d112      	bne.n	8002cda <HAL_RCC_OscConfig+0x5e>
 8002cb4:	4b8c      	ldr	r3, [pc, #560]	@ (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cc0:	d10b      	bne.n	8002cda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc2:	4b89      	ldr	r3, [pc, #548]	@ (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d06c      	beq.n	8002da8 <HAL_RCC_OscConfig+0x12c>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d168      	bne.n	8002da8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e24c      	b.n	8003174 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ce2:	d106      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x76>
 8002ce4:	4b80      	ldr	r3, [pc, #512]	@ (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a7f      	ldr	r2, [pc, #508]	@ (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002cea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cee:	6013      	str	r3, [r2, #0]
 8002cf0:	e02e      	b.n	8002d50 <HAL_RCC_OscConfig+0xd4>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10c      	bne.n	8002d14 <HAL_RCC_OscConfig+0x98>
 8002cfa:	4b7b      	ldr	r3, [pc, #492]	@ (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a7a      	ldr	r2, [pc, #488]	@ (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002d00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d04:	6013      	str	r3, [r2, #0]
 8002d06:	4b78      	ldr	r3, [pc, #480]	@ (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a77      	ldr	r2, [pc, #476]	@ (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002d0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d10:	6013      	str	r3, [r2, #0]
 8002d12:	e01d      	b.n	8002d50 <HAL_RCC_OscConfig+0xd4>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d1c:	d10c      	bne.n	8002d38 <HAL_RCC_OscConfig+0xbc>
 8002d1e:	4b72      	ldr	r3, [pc, #456]	@ (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a71      	ldr	r2, [pc, #452]	@ (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002d24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d28:	6013      	str	r3, [r2, #0]
 8002d2a:	4b6f      	ldr	r3, [pc, #444]	@ (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a6e      	ldr	r2, [pc, #440]	@ (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002d30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	e00b      	b.n	8002d50 <HAL_RCC_OscConfig+0xd4>
 8002d38:	4b6b      	ldr	r3, [pc, #428]	@ (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a6a      	ldr	r2, [pc, #424]	@ (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002d3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d42:	6013      	str	r3, [r2, #0]
 8002d44:	4b68      	ldr	r3, [pc, #416]	@ (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a67      	ldr	r2, [pc, #412]	@ (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002d4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d013      	beq.n	8002d80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d58:	f7ff f846 	bl	8001de8 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d60:	f7ff f842 	bl	8001de8 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b64      	cmp	r3, #100	@ 0x64
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e200      	b.n	8003174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d72:	4b5d      	ldr	r3, [pc, #372]	@ (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0f0      	beq.n	8002d60 <HAL_RCC_OscConfig+0xe4>
 8002d7e:	e014      	b.n	8002daa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d80:	f7ff f832 	bl	8001de8 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d88:	f7ff f82e 	bl	8001de8 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b64      	cmp	r3, #100	@ 0x64
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e1ec      	b.n	8003174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d9a:	4b53      	ldr	r3, [pc, #332]	@ (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1f0      	bne.n	8002d88 <HAL_RCC_OscConfig+0x10c>
 8002da6:	e000      	b.n	8002daa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d063      	beq.n	8002e7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002db6:	4b4c      	ldr	r3, [pc, #304]	@ (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f003 030c 	and.w	r3, r3, #12
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00b      	beq.n	8002dda <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002dc2:	4b49      	ldr	r3, [pc, #292]	@ (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f003 030c 	and.w	r3, r3, #12
 8002dca:	2b08      	cmp	r3, #8
 8002dcc:	d11c      	bne.n	8002e08 <HAL_RCC_OscConfig+0x18c>
 8002dce:	4b46      	ldr	r3, [pc, #280]	@ (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d116      	bne.n	8002e08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dda:	4b43      	ldr	r3, [pc, #268]	@ (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d005      	beq.n	8002df2 <HAL_RCC_OscConfig+0x176>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d001      	beq.n	8002df2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e1c0      	b.n	8003174 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	4939      	ldr	r1, [pc, #228]	@ (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e06:	e03a      	b.n	8002e7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d020      	beq.n	8002e52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e10:	4b36      	ldr	r3, [pc, #216]	@ (8002eec <HAL_RCC_OscConfig+0x270>)
 8002e12:	2201      	movs	r2, #1
 8002e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e16:	f7fe ffe7 	bl	8001de8 <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e1e:	f7fe ffe3 	bl	8001de8 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e1a1      	b.n	8003174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e30:	4b2d      	ldr	r3, [pc, #180]	@ (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d0f0      	beq.n	8002e1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e3c:	4b2a      	ldr	r3, [pc, #168]	@ (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	4927      	ldr	r1, [pc, #156]	@ (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	600b      	str	r3, [r1, #0]
 8002e50:	e015      	b.n	8002e7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e52:	4b26      	ldr	r3, [pc, #152]	@ (8002eec <HAL_RCC_OscConfig+0x270>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e58:	f7fe ffc6 	bl	8001de8 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e60:	f7fe ffc2 	bl	8001de8 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e180      	b.n	8003174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e72:	4b1d      	ldr	r3, [pc, #116]	@ (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f0      	bne.n	8002e60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0308 	and.w	r3, r3, #8
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d03a      	beq.n	8002f00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d019      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e92:	4b17      	ldr	r3, [pc, #92]	@ (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002e94:	2201      	movs	r2, #1
 8002e96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e98:	f7fe ffa6 	bl	8001de8 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ea0:	f7fe ffa2 	bl	8001de8 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e160      	b.n	8003174 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ee8 <HAL_RCC_OscConfig+0x26c>)
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0f0      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ebe:	2001      	movs	r0, #1
 8002ec0:	f000 faba 	bl	8003438 <RCC_Delay>
 8002ec4:	e01c      	b.n	8002f00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ecc:	f7fe ff8c 	bl	8001de8 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed2:	e00f      	b.n	8002ef4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ed4:	f7fe ff88 	bl	8001de8 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d908      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e146      	b.n	8003174 <HAL_RCC_OscConfig+0x4f8>
 8002ee6:	bf00      	nop
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	42420000 	.word	0x42420000
 8002ef0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef4:	4b92      	ldr	r3, [pc, #584]	@ (8003140 <HAL_RCC_OscConfig+0x4c4>)
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1e9      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 80a6 	beq.w	800305a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f12:	4b8b      	ldr	r3, [pc, #556]	@ (8003140 <HAL_RCC_OscConfig+0x4c4>)
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10d      	bne.n	8002f3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f1e:	4b88      	ldr	r3, [pc, #544]	@ (8003140 <HAL_RCC_OscConfig+0x4c4>)
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	4a87      	ldr	r2, [pc, #540]	@ (8003140 <HAL_RCC_OscConfig+0x4c4>)
 8002f24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f28:	61d3      	str	r3, [r2, #28]
 8002f2a:	4b85      	ldr	r3, [pc, #532]	@ (8003140 <HAL_RCC_OscConfig+0x4c4>)
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f32:	60bb      	str	r3, [r7, #8]
 8002f34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f36:	2301      	movs	r3, #1
 8002f38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3a:	4b82      	ldr	r3, [pc, #520]	@ (8003144 <HAL_RCC_OscConfig+0x4c8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d118      	bne.n	8002f78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f46:	4b7f      	ldr	r3, [pc, #508]	@ (8003144 <HAL_RCC_OscConfig+0x4c8>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a7e      	ldr	r2, [pc, #504]	@ (8003144 <HAL_RCC_OscConfig+0x4c8>)
 8002f4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f52:	f7fe ff49 	bl	8001de8 <HAL_GetTick>
 8002f56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f58:	e008      	b.n	8002f6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f5a:	f7fe ff45 	bl	8001de8 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b64      	cmp	r3, #100	@ 0x64
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e103      	b.n	8003174 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f6c:	4b75      	ldr	r3, [pc, #468]	@ (8003144 <HAL_RCC_OscConfig+0x4c8>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d0f0      	beq.n	8002f5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d106      	bne.n	8002f8e <HAL_RCC_OscConfig+0x312>
 8002f80:	4b6f      	ldr	r3, [pc, #444]	@ (8003140 <HAL_RCC_OscConfig+0x4c4>)
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	4a6e      	ldr	r2, [pc, #440]	@ (8003140 <HAL_RCC_OscConfig+0x4c4>)
 8002f86:	f043 0301 	orr.w	r3, r3, #1
 8002f8a:	6213      	str	r3, [r2, #32]
 8002f8c:	e02d      	b.n	8002fea <HAL_RCC_OscConfig+0x36e>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10c      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x334>
 8002f96:	4b6a      	ldr	r3, [pc, #424]	@ (8003140 <HAL_RCC_OscConfig+0x4c4>)
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	4a69      	ldr	r2, [pc, #420]	@ (8003140 <HAL_RCC_OscConfig+0x4c4>)
 8002f9c:	f023 0301 	bic.w	r3, r3, #1
 8002fa0:	6213      	str	r3, [r2, #32]
 8002fa2:	4b67      	ldr	r3, [pc, #412]	@ (8003140 <HAL_RCC_OscConfig+0x4c4>)
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	4a66      	ldr	r2, [pc, #408]	@ (8003140 <HAL_RCC_OscConfig+0x4c4>)
 8002fa8:	f023 0304 	bic.w	r3, r3, #4
 8002fac:	6213      	str	r3, [r2, #32]
 8002fae:	e01c      	b.n	8002fea <HAL_RCC_OscConfig+0x36e>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	2b05      	cmp	r3, #5
 8002fb6:	d10c      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x356>
 8002fb8:	4b61      	ldr	r3, [pc, #388]	@ (8003140 <HAL_RCC_OscConfig+0x4c4>)
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	4a60      	ldr	r2, [pc, #384]	@ (8003140 <HAL_RCC_OscConfig+0x4c4>)
 8002fbe:	f043 0304 	orr.w	r3, r3, #4
 8002fc2:	6213      	str	r3, [r2, #32]
 8002fc4:	4b5e      	ldr	r3, [pc, #376]	@ (8003140 <HAL_RCC_OscConfig+0x4c4>)
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	4a5d      	ldr	r2, [pc, #372]	@ (8003140 <HAL_RCC_OscConfig+0x4c4>)
 8002fca:	f043 0301 	orr.w	r3, r3, #1
 8002fce:	6213      	str	r3, [r2, #32]
 8002fd0:	e00b      	b.n	8002fea <HAL_RCC_OscConfig+0x36e>
 8002fd2:	4b5b      	ldr	r3, [pc, #364]	@ (8003140 <HAL_RCC_OscConfig+0x4c4>)
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	4a5a      	ldr	r2, [pc, #360]	@ (8003140 <HAL_RCC_OscConfig+0x4c4>)
 8002fd8:	f023 0301 	bic.w	r3, r3, #1
 8002fdc:	6213      	str	r3, [r2, #32]
 8002fde:	4b58      	ldr	r3, [pc, #352]	@ (8003140 <HAL_RCC_OscConfig+0x4c4>)
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	4a57      	ldr	r2, [pc, #348]	@ (8003140 <HAL_RCC_OscConfig+0x4c4>)
 8002fe4:	f023 0304 	bic.w	r3, r3, #4
 8002fe8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d015      	beq.n	800301e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff2:	f7fe fef9 	bl	8001de8 <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff8:	e00a      	b.n	8003010 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ffa:	f7fe fef5 	bl	8001de8 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003008:	4293      	cmp	r3, r2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e0b1      	b.n	8003174 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003010:	4b4b      	ldr	r3, [pc, #300]	@ (8003140 <HAL_RCC_OscConfig+0x4c4>)
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0ee      	beq.n	8002ffa <HAL_RCC_OscConfig+0x37e>
 800301c:	e014      	b.n	8003048 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800301e:	f7fe fee3 	bl	8001de8 <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003024:	e00a      	b.n	800303c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003026:	f7fe fedf 	bl	8001de8 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003034:	4293      	cmp	r3, r2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e09b      	b.n	8003174 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800303c:	4b40      	ldr	r3, [pc, #256]	@ (8003140 <HAL_RCC_OscConfig+0x4c4>)
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1ee      	bne.n	8003026 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003048:	7dfb      	ldrb	r3, [r7, #23]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d105      	bne.n	800305a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800304e:	4b3c      	ldr	r3, [pc, #240]	@ (8003140 <HAL_RCC_OscConfig+0x4c4>)
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	4a3b      	ldr	r2, [pc, #236]	@ (8003140 <HAL_RCC_OscConfig+0x4c4>)
 8003054:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003058:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	2b00      	cmp	r3, #0
 8003060:	f000 8087 	beq.w	8003172 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003064:	4b36      	ldr	r3, [pc, #216]	@ (8003140 <HAL_RCC_OscConfig+0x4c4>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f003 030c 	and.w	r3, r3, #12
 800306c:	2b08      	cmp	r3, #8
 800306e:	d061      	beq.n	8003134 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	69db      	ldr	r3, [r3, #28]
 8003074:	2b02      	cmp	r3, #2
 8003076:	d146      	bne.n	8003106 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003078:	4b33      	ldr	r3, [pc, #204]	@ (8003148 <HAL_RCC_OscConfig+0x4cc>)
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307e:	f7fe feb3 	bl	8001de8 <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003084:	e008      	b.n	8003098 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003086:	f7fe feaf 	bl	8001de8 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e06d      	b.n	8003174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003098:	4b29      	ldr	r3, [pc, #164]	@ (8003140 <HAL_RCC_OscConfig+0x4c4>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1f0      	bne.n	8003086 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030ac:	d108      	bne.n	80030c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030ae:	4b24      	ldr	r3, [pc, #144]	@ (8003140 <HAL_RCC_OscConfig+0x4c4>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	4921      	ldr	r1, [pc, #132]	@ (8003140 <HAL_RCC_OscConfig+0x4c4>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030c0:	4b1f      	ldr	r3, [pc, #124]	@ (8003140 <HAL_RCC_OscConfig+0x4c4>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a19      	ldr	r1, [r3, #32]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d0:	430b      	orrs	r3, r1
 80030d2:	491b      	ldr	r1, [pc, #108]	@ (8003140 <HAL_RCC_OscConfig+0x4c4>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003148 <HAL_RCC_OscConfig+0x4cc>)
 80030da:	2201      	movs	r2, #1
 80030dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030de:	f7fe fe83 	bl	8001de8 <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030e4:	e008      	b.n	80030f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e6:	f7fe fe7f 	bl	8001de8 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e03d      	b.n	8003174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030f8:	4b11      	ldr	r3, [pc, #68]	@ (8003140 <HAL_RCC_OscConfig+0x4c4>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d0f0      	beq.n	80030e6 <HAL_RCC_OscConfig+0x46a>
 8003104:	e035      	b.n	8003172 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003106:	4b10      	ldr	r3, [pc, #64]	@ (8003148 <HAL_RCC_OscConfig+0x4cc>)
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310c:	f7fe fe6c 	bl	8001de8 <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003114:	f7fe fe68 	bl	8001de8 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e026      	b.n	8003174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003126:	4b06      	ldr	r3, [pc, #24]	@ (8003140 <HAL_RCC_OscConfig+0x4c4>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1f0      	bne.n	8003114 <HAL_RCC_OscConfig+0x498>
 8003132:	e01e      	b.n	8003172 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	69db      	ldr	r3, [r3, #28]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d107      	bne.n	800314c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e019      	b.n	8003174 <HAL_RCC_OscConfig+0x4f8>
 8003140:	40021000 	.word	0x40021000
 8003144:	40007000 	.word	0x40007000
 8003148:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800314c:	4b0b      	ldr	r3, [pc, #44]	@ (800317c <HAL_RCC_OscConfig+0x500>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	429a      	cmp	r2, r3
 800315e:	d106      	bne.n	800316e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800316a:	429a      	cmp	r2, r3
 800316c:	d001      	beq.n	8003172 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e000      	b.n	8003174 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3718      	adds	r7, #24
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40021000 	.word	0x40021000

08003180 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d101      	bne.n	8003194 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e0d0      	b.n	8003336 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003194:	4b6a      	ldr	r3, [pc, #424]	@ (8003340 <HAL_RCC_ClockConfig+0x1c0>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0307 	and.w	r3, r3, #7
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d910      	bls.n	80031c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031a2:	4b67      	ldr	r3, [pc, #412]	@ (8003340 <HAL_RCC_ClockConfig+0x1c0>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f023 0207 	bic.w	r2, r3, #7
 80031aa:	4965      	ldr	r1, [pc, #404]	@ (8003340 <HAL_RCC_ClockConfig+0x1c0>)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b2:	4b63      	ldr	r3, [pc, #396]	@ (8003340 <HAL_RCC_ClockConfig+0x1c0>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d001      	beq.n	80031c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e0b8      	b.n	8003336 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d020      	beq.n	8003212 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d005      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031dc:	4b59      	ldr	r3, [pc, #356]	@ (8003344 <HAL_RCC_ClockConfig+0x1c4>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	4a58      	ldr	r2, [pc, #352]	@ (8003344 <HAL_RCC_ClockConfig+0x1c4>)
 80031e2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80031e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0308 	and.w	r3, r3, #8
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d005      	beq.n	8003200 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031f4:	4b53      	ldr	r3, [pc, #332]	@ (8003344 <HAL_RCC_ClockConfig+0x1c4>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	4a52      	ldr	r2, [pc, #328]	@ (8003344 <HAL_RCC_ClockConfig+0x1c4>)
 80031fa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80031fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003200:	4b50      	ldr	r3, [pc, #320]	@ (8003344 <HAL_RCC_ClockConfig+0x1c4>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	494d      	ldr	r1, [pc, #308]	@ (8003344 <HAL_RCC_ClockConfig+0x1c4>)
 800320e:	4313      	orrs	r3, r2
 8003210:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d040      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d107      	bne.n	8003236 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003226:	4b47      	ldr	r3, [pc, #284]	@ (8003344 <HAL_RCC_ClockConfig+0x1c4>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d115      	bne.n	800325e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e07f      	b.n	8003336 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2b02      	cmp	r3, #2
 800323c:	d107      	bne.n	800324e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800323e:	4b41      	ldr	r3, [pc, #260]	@ (8003344 <HAL_RCC_ClockConfig+0x1c4>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d109      	bne.n	800325e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e073      	b.n	8003336 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800324e:	4b3d      	ldr	r3, [pc, #244]	@ (8003344 <HAL_RCC_ClockConfig+0x1c4>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e06b      	b.n	8003336 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800325e:	4b39      	ldr	r3, [pc, #228]	@ (8003344 <HAL_RCC_ClockConfig+0x1c4>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f023 0203 	bic.w	r2, r3, #3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	4936      	ldr	r1, [pc, #216]	@ (8003344 <HAL_RCC_ClockConfig+0x1c4>)
 800326c:	4313      	orrs	r3, r2
 800326e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003270:	f7fe fdba 	bl	8001de8 <HAL_GetTick>
 8003274:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003276:	e00a      	b.n	800328e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003278:	f7fe fdb6 	bl	8001de8 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003286:	4293      	cmp	r3, r2
 8003288:	d901      	bls.n	800328e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e053      	b.n	8003336 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800328e:	4b2d      	ldr	r3, [pc, #180]	@ (8003344 <HAL_RCC_ClockConfig+0x1c4>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f003 020c 	and.w	r2, r3, #12
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	429a      	cmp	r2, r3
 800329e:	d1eb      	bne.n	8003278 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032a0:	4b27      	ldr	r3, [pc, #156]	@ (8003340 <HAL_RCC_ClockConfig+0x1c0>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d210      	bcs.n	80032d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ae:	4b24      	ldr	r3, [pc, #144]	@ (8003340 <HAL_RCC_ClockConfig+0x1c0>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f023 0207 	bic.w	r2, r3, #7
 80032b6:	4922      	ldr	r1, [pc, #136]	@ (8003340 <HAL_RCC_ClockConfig+0x1c0>)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032be:	4b20      	ldr	r3, [pc, #128]	@ (8003340 <HAL_RCC_ClockConfig+0x1c0>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d001      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e032      	b.n	8003336 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d008      	beq.n	80032ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032dc:	4b19      	ldr	r3, [pc, #100]	@ (8003344 <HAL_RCC_ClockConfig+0x1c4>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	4916      	ldr	r1, [pc, #88]	@ (8003344 <HAL_RCC_ClockConfig+0x1c4>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d009      	beq.n	800330e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032fa:	4b12      	ldr	r3, [pc, #72]	@ (8003344 <HAL_RCC_ClockConfig+0x1c4>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	490e      	ldr	r1, [pc, #56]	@ (8003344 <HAL_RCC_ClockConfig+0x1c4>)
 800330a:	4313      	orrs	r3, r2
 800330c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800330e:	f000 f821 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 8003312:	4602      	mov	r2, r0
 8003314:	4b0b      	ldr	r3, [pc, #44]	@ (8003344 <HAL_RCC_ClockConfig+0x1c4>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	091b      	lsrs	r3, r3, #4
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	490a      	ldr	r1, [pc, #40]	@ (8003348 <HAL_RCC_ClockConfig+0x1c8>)
 8003320:	5ccb      	ldrb	r3, [r1, r3]
 8003322:	fa22 f303 	lsr.w	r3, r2, r3
 8003326:	4a09      	ldr	r2, [pc, #36]	@ (800334c <HAL_RCC_ClockConfig+0x1cc>)
 8003328:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800332a:	4b09      	ldr	r3, [pc, #36]	@ (8003350 <HAL_RCC_ClockConfig+0x1d0>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f7fe fd18 	bl	8001d64 <HAL_InitTick>

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	40022000 	.word	0x40022000
 8003344:	40021000 	.word	0x40021000
 8003348:	080048fc 	.word	0x080048fc
 800334c:	20000000 	.word	0x20000000
 8003350:	20000004 	.word	0x20000004

08003354 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003354:	b480      	push	{r7}
 8003356:	b087      	sub	sp, #28
 8003358:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800335a:	2300      	movs	r3, #0
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	2300      	movs	r3, #0
 8003360:	60bb      	str	r3, [r7, #8]
 8003362:	2300      	movs	r3, #0
 8003364:	617b      	str	r3, [r7, #20]
 8003366:	2300      	movs	r3, #0
 8003368:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800336a:	2300      	movs	r3, #0
 800336c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800336e:	4b1e      	ldr	r3, [pc, #120]	@ (80033e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f003 030c 	and.w	r3, r3, #12
 800337a:	2b04      	cmp	r3, #4
 800337c:	d002      	beq.n	8003384 <HAL_RCC_GetSysClockFreq+0x30>
 800337e:	2b08      	cmp	r3, #8
 8003380:	d003      	beq.n	800338a <HAL_RCC_GetSysClockFreq+0x36>
 8003382:	e027      	b.n	80033d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003384:	4b19      	ldr	r3, [pc, #100]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x98>)
 8003386:	613b      	str	r3, [r7, #16]
      break;
 8003388:	e027      	b.n	80033da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	0c9b      	lsrs	r3, r3, #18
 800338e:	f003 030f 	and.w	r3, r3, #15
 8003392:	4a17      	ldr	r2, [pc, #92]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003394:	5cd3      	ldrb	r3, [r2, r3]
 8003396:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d010      	beq.n	80033c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033a2:	4b11      	ldr	r3, [pc, #68]	@ (80033e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	0c5b      	lsrs	r3, r3, #17
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	4a11      	ldr	r2, [pc, #68]	@ (80033f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80033ae:	5cd3      	ldrb	r3, [r2, r3]
 80033b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a0d      	ldr	r2, [pc, #52]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x98>)
 80033b6:	fb03 f202 	mul.w	r2, r3, r2
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c0:	617b      	str	r3, [r7, #20]
 80033c2:	e004      	b.n	80033ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a0c      	ldr	r2, [pc, #48]	@ (80033f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80033c8:	fb02 f303 	mul.w	r3, r2, r3
 80033cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	613b      	str	r3, [r7, #16]
      break;
 80033d2:	e002      	b.n	80033da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033d4:	4b05      	ldr	r3, [pc, #20]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x98>)
 80033d6:	613b      	str	r3, [r7, #16]
      break;
 80033d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033da:	693b      	ldr	r3, [r7, #16]
}
 80033dc:	4618      	mov	r0, r3
 80033de:	371c      	adds	r7, #28
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bc80      	pop	{r7}
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	40021000 	.word	0x40021000
 80033ec:	007a1200 	.word	0x007a1200
 80033f0:	08004914 	.word	0x08004914
 80033f4:	08004924 	.word	0x08004924
 80033f8:	003d0900 	.word	0x003d0900

080033fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003400:	4b02      	ldr	r3, [pc, #8]	@ (800340c <HAL_RCC_GetHCLKFreq+0x10>)
 8003402:	681b      	ldr	r3, [r3, #0]
}
 8003404:	4618      	mov	r0, r3
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr
 800340c:	20000000 	.word	0x20000000

08003410 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003414:	f7ff fff2 	bl	80033fc <HAL_RCC_GetHCLKFreq>
 8003418:	4602      	mov	r2, r0
 800341a:	4b05      	ldr	r3, [pc, #20]	@ (8003430 <HAL_RCC_GetPCLK2Freq+0x20>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	0adb      	lsrs	r3, r3, #11
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	4903      	ldr	r1, [pc, #12]	@ (8003434 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003426:	5ccb      	ldrb	r3, [r1, r3]
 8003428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800342c:	4618      	mov	r0, r3
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40021000 	.word	0x40021000
 8003434:	0800490c 	.word	0x0800490c

08003438 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003440:	4b0a      	ldr	r3, [pc, #40]	@ (800346c <RCC_Delay+0x34>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a0a      	ldr	r2, [pc, #40]	@ (8003470 <RCC_Delay+0x38>)
 8003446:	fba2 2303 	umull	r2, r3, r2, r3
 800344a:	0a5b      	lsrs	r3, r3, #9
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	fb02 f303 	mul.w	r3, r2, r3
 8003452:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003454:	bf00      	nop
  }
  while (Delay --);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	1e5a      	subs	r2, r3, #1
 800345a:	60fa      	str	r2, [r7, #12]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1f9      	bne.n	8003454 <RCC_Delay+0x1c>
}
 8003460:	bf00      	nop
 8003462:	bf00      	nop
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	bc80      	pop	{r7}
 800346a:	4770      	bx	lr
 800346c:	20000000 	.word	0x20000000
 8003470:	10624dd3 	.word	0x10624dd3

08003474 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800347c:	2300      	movs	r3, #0
 800347e:	613b      	str	r3, [r7, #16]
 8003480:	2300      	movs	r3, #0
 8003482:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	2b00      	cmp	r3, #0
 800348e:	d07d      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003490:	2300      	movs	r3, #0
 8003492:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003494:	4b4f      	ldr	r3, [pc, #316]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003496:	69db      	ldr	r3, [r3, #28]
 8003498:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10d      	bne.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034a0:	4b4c      	ldr	r3, [pc, #304]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a2:	69db      	ldr	r3, [r3, #28]
 80034a4:	4a4b      	ldr	r2, [pc, #300]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034aa:	61d3      	str	r3, [r2, #28]
 80034ac:	4b49      	ldr	r3, [pc, #292]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ae:	69db      	ldr	r3, [r3, #28]
 80034b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034b4:	60bb      	str	r3, [r7, #8]
 80034b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034b8:	2301      	movs	r3, #1
 80034ba:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034bc:	4b46      	ldr	r3, [pc, #280]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d118      	bne.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034c8:	4b43      	ldr	r3, [pc, #268]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a42      	ldr	r2, [pc, #264]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034d4:	f7fe fc88 	bl	8001de8 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034da:	e008      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034dc:	f7fe fc84 	bl	8001de8 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b64      	cmp	r3, #100	@ 0x64
 80034e8:	d901      	bls.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e06d      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ee:	4b3a      	ldr	r3, [pc, #232]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d0f0      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034fa:	4b36      	ldr	r3, [pc, #216]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003502:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d02e      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	429a      	cmp	r2, r3
 8003516:	d027      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003518:	4b2e      	ldr	r3, [pc, #184]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003520:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003522:	4b2e      	ldr	r3, [pc, #184]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003524:	2201      	movs	r2, #1
 8003526:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003528:	4b2c      	ldr	r3, [pc, #176]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800352a:	2200      	movs	r2, #0
 800352c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800352e:	4a29      	ldr	r2, [pc, #164]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	d014      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353e:	f7fe fc53 	bl	8001de8 <HAL_GetTick>
 8003542:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003544:	e00a      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003546:	f7fe fc4f 	bl	8001de8 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003554:	4293      	cmp	r3, r2
 8003556:	d901      	bls.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e036      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800355c:	4b1d      	ldr	r3, [pc, #116]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d0ee      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003568:	4b1a      	ldr	r3, [pc, #104]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	4917      	ldr	r1, [pc, #92]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003576:	4313      	orrs	r3, r2
 8003578:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800357a:	7dfb      	ldrb	r3, [r7, #23]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d105      	bne.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003580:	4b14      	ldr	r3, [pc, #80]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003582:	69db      	ldr	r3, [r3, #28]
 8003584:	4a13      	ldr	r2, [pc, #76]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003586:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800358a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d008      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003598:	4b0e      	ldr	r3, [pc, #56]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	490b      	ldr	r1, [pc, #44]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0310 	and.w	r3, r3, #16
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d008      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035b6:	4b07      	ldr	r3, [pc, #28]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	4904      	ldr	r1, [pc, #16]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3718      	adds	r7, #24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	40021000 	.word	0x40021000
 80035d8:	40007000 	.word	0x40007000
 80035dc:	42420440 	.word	0x42420440

080035e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b088      	sub	sp, #32
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	617b      	str	r3, [r7, #20]
 80035ec:	2300      	movs	r3, #0
 80035ee:	61fb      	str	r3, [r7, #28]
 80035f0:	2300      	movs	r3, #0
 80035f2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80035f4:	2300      	movs	r3, #0
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	2300      	movs	r3, #0
 80035fa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b10      	cmp	r3, #16
 8003600:	d00a      	beq.n	8003618 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b10      	cmp	r3, #16
 8003606:	f200 808a 	bhi.w	800371e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d045      	beq.n	800369c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b02      	cmp	r3, #2
 8003614:	d075      	beq.n	8003702 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003616:	e082      	b.n	800371e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003618:	4b46      	ldr	r3, [pc, #280]	@ (8003734 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800361e:	4b45      	ldr	r3, [pc, #276]	@ (8003734 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d07b      	beq.n	8003722 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	0c9b      	lsrs	r3, r3, #18
 800362e:	f003 030f 	and.w	r3, r3, #15
 8003632:	4a41      	ldr	r2, [pc, #260]	@ (8003738 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003634:	5cd3      	ldrb	r3, [r2, r3]
 8003636:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d015      	beq.n	800366e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003642:	4b3c      	ldr	r3, [pc, #240]	@ (8003734 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	0c5b      	lsrs	r3, r3, #17
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	4a3b      	ldr	r2, [pc, #236]	@ (800373c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800364e:	5cd3      	ldrb	r3, [r2, r3]
 8003650:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00d      	beq.n	8003678 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800365c:	4a38      	ldr	r2, [pc, #224]	@ (8003740 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	fbb2 f2f3 	udiv	r2, r2, r3
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	fb02 f303 	mul.w	r3, r2, r3
 800366a:	61fb      	str	r3, [r7, #28]
 800366c:	e004      	b.n	8003678 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	4a34      	ldr	r2, [pc, #208]	@ (8003744 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003672:	fb02 f303 	mul.w	r3, r2, r3
 8003676:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003678:	4b2e      	ldr	r3, [pc, #184]	@ (8003734 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003680:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003684:	d102      	bne.n	800368c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	61bb      	str	r3, [r7, #24]
      break;
 800368a:	e04a      	b.n	8003722 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	4a2d      	ldr	r2, [pc, #180]	@ (8003748 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003692:	fba2 2303 	umull	r2, r3, r2, r3
 8003696:	085b      	lsrs	r3, r3, #1
 8003698:	61bb      	str	r3, [r7, #24]
      break;
 800369a:	e042      	b.n	8003722 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800369c:	4b25      	ldr	r3, [pc, #148]	@ (8003734 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036ac:	d108      	bne.n	80036c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d003      	beq.n	80036c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80036b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036bc:	61bb      	str	r3, [r7, #24]
 80036be:	e01f      	b.n	8003700 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036ca:	d109      	bne.n	80036e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80036cc:	4b19      	ldr	r3, [pc, #100]	@ (8003734 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80036ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d003      	beq.n	80036e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80036d8:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80036dc:	61bb      	str	r3, [r7, #24]
 80036de:	e00f      	b.n	8003700 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036ea:	d11c      	bne.n	8003726 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80036ec:	4b11      	ldr	r3, [pc, #68]	@ (8003734 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d016      	beq.n	8003726 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80036f8:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80036fc:	61bb      	str	r3, [r7, #24]
      break;
 80036fe:	e012      	b.n	8003726 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003700:	e011      	b.n	8003726 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003702:	f7ff fe85 	bl	8003410 <HAL_RCC_GetPCLK2Freq>
 8003706:	4602      	mov	r2, r0
 8003708:	4b0a      	ldr	r3, [pc, #40]	@ (8003734 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	0b9b      	lsrs	r3, r3, #14
 800370e:	f003 0303 	and.w	r3, r3, #3
 8003712:	3301      	adds	r3, #1
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	fbb2 f3f3 	udiv	r3, r2, r3
 800371a:	61bb      	str	r3, [r7, #24]
      break;
 800371c:	e004      	b.n	8003728 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800371e:	bf00      	nop
 8003720:	e002      	b.n	8003728 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003722:	bf00      	nop
 8003724:	e000      	b.n	8003728 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003726:	bf00      	nop
    }
  }
  return (frequency);
 8003728:	69bb      	ldr	r3, [r7, #24]
}
 800372a:	4618      	mov	r0, r3
 800372c:	3720      	adds	r7, #32
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	40021000 	.word	0x40021000
 8003738:	08004928 	.word	0x08004928
 800373c:	08004938 	.word	0x08004938
 8003740:	007a1200 	.word	0x007a1200
 8003744:	003d0900 	.word	0x003d0900
 8003748:	aaaaaaab 	.word	0xaaaaaaab

0800374c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e041      	b.n	80037e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d106      	bne.n	8003778 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7fe f99a 	bl	8001aac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2202      	movs	r2, #2
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	3304      	adds	r3, #4
 8003788:	4619      	mov	r1, r3
 800378a:	4610      	mov	r0, r2
 800378c:	f000 fd5e 	bl	800424c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
	...

080037ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d001      	beq.n	8003804 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e03a      	b.n	800387a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2202      	movs	r2, #2
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68da      	ldr	r2, [r3, #12]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f042 0201 	orr.w	r2, r2, #1
 800381a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a18      	ldr	r2, [pc, #96]	@ (8003884 <HAL_TIM_Base_Start_IT+0x98>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d00e      	beq.n	8003844 <HAL_TIM_Base_Start_IT+0x58>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800382e:	d009      	beq.n	8003844 <HAL_TIM_Base_Start_IT+0x58>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a14      	ldr	r2, [pc, #80]	@ (8003888 <HAL_TIM_Base_Start_IT+0x9c>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d004      	beq.n	8003844 <HAL_TIM_Base_Start_IT+0x58>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a13      	ldr	r2, [pc, #76]	@ (800388c <HAL_TIM_Base_Start_IT+0xa0>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d111      	bne.n	8003868 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2b06      	cmp	r3, #6
 8003854:	d010      	beq.n	8003878 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f042 0201 	orr.w	r2, r2, #1
 8003864:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003866:	e007      	b.n	8003878 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f042 0201 	orr.w	r2, r2, #1
 8003876:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3714      	adds	r7, #20
 800387e:	46bd      	mov	sp, r7
 8003880:	bc80      	pop	{r7}
 8003882:	4770      	bx	lr
 8003884:	40012c00 	.word	0x40012c00
 8003888:	40000400 	.word	0x40000400
 800388c:	40000800 	.word	0x40000800

08003890 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e041      	b.n	8003926 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d106      	bne.n	80038bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f839 	bl	800392e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2202      	movs	r2, #2
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	3304      	adds	r3, #4
 80038cc:	4619      	mov	r1, r3
 80038ce:	4610      	mov	r0, r2
 80038d0:	f000 fcbc 	bl	800424c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800392e:	b480      	push	{r7}
 8003930:	b083      	sub	sp, #12
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003936:	bf00      	nop
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	bc80      	pop	{r7}
 800393e:	4770      	bx	lr

08003940 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d109      	bne.n	8003964 <HAL_TIM_PWM_Start+0x24>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b01      	cmp	r3, #1
 800395a:	bf14      	ite	ne
 800395c:	2301      	movne	r3, #1
 800395e:	2300      	moveq	r3, #0
 8003960:	b2db      	uxtb	r3, r3
 8003962:	e022      	b.n	80039aa <HAL_TIM_PWM_Start+0x6a>
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	2b04      	cmp	r3, #4
 8003968:	d109      	bne.n	800397e <HAL_TIM_PWM_Start+0x3e>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b01      	cmp	r3, #1
 8003974:	bf14      	ite	ne
 8003976:	2301      	movne	r3, #1
 8003978:	2300      	moveq	r3, #0
 800397a:	b2db      	uxtb	r3, r3
 800397c:	e015      	b.n	80039aa <HAL_TIM_PWM_Start+0x6a>
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	2b08      	cmp	r3, #8
 8003982:	d109      	bne.n	8003998 <HAL_TIM_PWM_Start+0x58>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b01      	cmp	r3, #1
 800398e:	bf14      	ite	ne
 8003990:	2301      	movne	r3, #1
 8003992:	2300      	moveq	r3, #0
 8003994:	b2db      	uxtb	r3, r3
 8003996:	e008      	b.n	80039aa <HAL_TIM_PWM_Start+0x6a>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	bf14      	ite	ne
 80039a4:	2301      	movne	r3, #1
 80039a6:	2300      	moveq	r3, #0
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e05e      	b.n	8003a70 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d104      	bne.n	80039c2 <HAL_TIM_PWM_Start+0x82>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039c0:	e013      	b.n	80039ea <HAL_TIM_PWM_Start+0xaa>
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	2b04      	cmp	r3, #4
 80039c6:	d104      	bne.n	80039d2 <HAL_TIM_PWM_Start+0x92>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2202      	movs	r2, #2
 80039cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039d0:	e00b      	b.n	80039ea <HAL_TIM_PWM_Start+0xaa>
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	2b08      	cmp	r3, #8
 80039d6:	d104      	bne.n	80039e2 <HAL_TIM_PWM_Start+0xa2>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2202      	movs	r2, #2
 80039dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039e0:	e003      	b.n	80039ea <HAL_TIM_PWM_Start+0xaa>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2202      	movs	r2, #2
 80039e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2201      	movs	r2, #1
 80039f0:	6839      	ldr	r1, [r7, #0]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 feb6 	bl	8004764 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a1e      	ldr	r2, [pc, #120]	@ (8003a78 <HAL_TIM_PWM_Start+0x138>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d107      	bne.n	8003a12 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a10:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a18      	ldr	r2, [pc, #96]	@ (8003a78 <HAL_TIM_PWM_Start+0x138>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d00e      	beq.n	8003a3a <HAL_TIM_PWM_Start+0xfa>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a24:	d009      	beq.n	8003a3a <HAL_TIM_PWM_Start+0xfa>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a14      	ldr	r2, [pc, #80]	@ (8003a7c <HAL_TIM_PWM_Start+0x13c>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d004      	beq.n	8003a3a <HAL_TIM_PWM_Start+0xfa>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a12      	ldr	r2, [pc, #72]	@ (8003a80 <HAL_TIM_PWM_Start+0x140>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d111      	bne.n	8003a5e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f003 0307 	and.w	r3, r3, #7
 8003a44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2b06      	cmp	r3, #6
 8003a4a:	d010      	beq.n	8003a6e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f042 0201 	orr.w	r2, r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a5c:	e007      	b.n	8003a6e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f042 0201 	orr.w	r2, r2, #1
 8003a6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	40012c00 	.word	0x40012c00
 8003a7c:	40000400 	.word	0x40000400
 8003a80:	40000800 	.word	0x40000800

08003a84 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d101      	bne.n	8003a98 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e093      	b.n	8003bc0 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d106      	bne.n	8003ab2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f7fe f821 	bl	8001af4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2202      	movs	r2, #2
 8003ab6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6812      	ldr	r2, [r2, #0]
 8003ac4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ac8:	f023 0307 	bic.w	r3, r3, #7
 8003acc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	3304      	adds	r3, #4
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	4610      	mov	r0, r2
 8003ada:	f000 fbb7 	bl	800424c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b06:	f023 0303 	bic.w	r3, r3, #3
 8003b0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	021b      	lsls	r3, r3, #8
 8003b16:	4313      	orrs	r3, r2
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003b24:	f023 030c 	bic.w	r3, r3, #12
 8003b28:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003b30:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	68da      	ldr	r2, [r3, #12]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	021b      	lsls	r3, r3, #8
 8003b40:	4313      	orrs	r3, r2
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	011a      	lsls	r2, r3, #4
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	031b      	lsls	r3, r3, #12
 8003b54:	4313      	orrs	r3, r2
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003b62:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	011b      	lsls	r3, r3, #4
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3718      	adds	r7, #24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003bd8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003be0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003be8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003bf0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d110      	bne.n	8003c1a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003bf8:	7bfb      	ldrb	r3, [r7, #15]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d102      	bne.n	8003c04 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003bfe:	7b7b      	ldrb	r3, [r7, #13]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d001      	beq.n	8003c08 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e089      	b.n	8003d1c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c18:	e031      	b.n	8003c7e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d110      	bne.n	8003c42 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c20:	7bbb      	ldrb	r3, [r7, #14]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d102      	bne.n	8003c2c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c26:	7b3b      	ldrb	r3, [r7, #12]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d001      	beq.n	8003c30 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e075      	b.n	8003d1c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2202      	movs	r2, #2
 8003c34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c40:	e01d      	b.n	8003c7e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c42:	7bfb      	ldrb	r3, [r7, #15]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d108      	bne.n	8003c5a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c48:	7bbb      	ldrb	r3, [r7, #14]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d105      	bne.n	8003c5a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c4e:	7b7b      	ldrb	r3, [r7, #13]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d102      	bne.n	8003c5a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c54:	7b3b      	ldrb	r3, [r7, #12]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d001      	beq.n	8003c5e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e05e      	b.n	8003d1c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2202      	movs	r2, #2
 8003c62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2202      	movs	r2, #2
 8003c6a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2202      	movs	r2, #2
 8003c72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2202      	movs	r2, #2
 8003c7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d003      	beq.n	8003c8c <HAL_TIM_Encoder_Start_IT+0xc4>
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	2b04      	cmp	r3, #4
 8003c88:	d010      	beq.n	8003cac <HAL_TIM_Encoder_Start_IT+0xe4>
 8003c8a:	e01f      	b.n	8003ccc <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2201      	movs	r2, #1
 8003c92:	2100      	movs	r1, #0
 8003c94:	4618      	mov	r0, r3
 8003c96:	f000 fd65 	bl	8004764 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68da      	ldr	r2, [r3, #12]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f042 0202 	orr.w	r2, r2, #2
 8003ca8:	60da      	str	r2, [r3, #12]
      break;
 8003caa:	e02e      	b.n	8003d0a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	2104      	movs	r1, #4
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f000 fd55 	bl	8004764 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68da      	ldr	r2, [r3, #12]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f042 0204 	orr.w	r2, r2, #4
 8003cc8:	60da      	str	r2, [r3, #12]
      break;
 8003cca:	e01e      	b.n	8003d0a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f000 fd45 	bl	8004764 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	2104      	movs	r1, #4
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 fd3e 	bl	8004764 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f042 0202 	orr.w	r2, r2, #2
 8003cf6:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68da      	ldr	r2, [r3, #12]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f042 0204 	orr.w	r2, r2, #4
 8003d06:	60da      	str	r2, [r3, #12]
      break;
 8003d08:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f042 0201 	orr.w	r2, r2, #1
 8003d18:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d020      	beq.n	8003d88 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d01b      	beq.n	8003d88 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f06f 0202 	mvn.w	r2, #2
 8003d58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	f003 0303 	and.w	r3, r3, #3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7fd f93e 	bl	8000ff0 <HAL_TIM_IC_CaptureCallback>
 8003d74:	e005      	b.n	8003d82 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 fa4d 	bl	8004216 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 fa53 	bl	8004228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	f003 0304 	and.w	r3, r3, #4
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d020      	beq.n	8003dd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d01b      	beq.n	8003dd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f06f 0204 	mvn.w	r2, #4
 8003da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2202      	movs	r2, #2
 8003daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d003      	beq.n	8003dc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f7fd f918 	bl	8000ff0 <HAL_TIM_IC_CaptureCallback>
 8003dc0:	e005      	b.n	8003dce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 fa27 	bl	8004216 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 fa2d 	bl	8004228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	f003 0308 	and.w	r3, r3, #8
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d020      	beq.n	8003e20 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f003 0308 	and.w	r3, r3, #8
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d01b      	beq.n	8003e20 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f06f 0208 	mvn.w	r2, #8
 8003df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2204      	movs	r2, #4
 8003df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	f003 0303 	and.w	r3, r3, #3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d003      	beq.n	8003e0e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7fd f8f2 	bl	8000ff0 <HAL_TIM_IC_CaptureCallback>
 8003e0c:	e005      	b.n	8003e1a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 fa01 	bl	8004216 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 fa07 	bl	8004228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	f003 0310 	and.w	r3, r3, #16
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d020      	beq.n	8003e6c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f003 0310 	and.w	r3, r3, #16
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d01b      	beq.n	8003e6c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f06f 0210 	mvn.w	r2, #16
 8003e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2208      	movs	r2, #8
 8003e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	69db      	ldr	r3, [r3, #28]
 8003e4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f7fd f8cc 	bl	8000ff0 <HAL_TIM_IC_CaptureCallback>
 8003e58:	e005      	b.n	8003e66 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f9db 	bl	8004216 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 f9e1 	bl	8004228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00c      	beq.n	8003e90 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d007      	beq.n	8003e90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f06f 0201 	mvn.w	r2, #1
 8003e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7fd fbf0 	bl	8001670 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00c      	beq.n	8003eb4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d007      	beq.n	8003eb4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 fce3 	bl	800487a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00c      	beq.n	8003ed8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d007      	beq.n	8003ed8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f9b1 	bl	800423a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	f003 0320 	and.w	r3, r3, #32
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00c      	beq.n	8003efc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f003 0320 	and.w	r3, r3, #32
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d007      	beq.n	8003efc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f06f 0220 	mvn.w	r2, #32
 8003ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 fcb6 	bl	8004868 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003efc:	bf00      	nop
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f10:	2300      	movs	r3, #0
 8003f12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d101      	bne.n	8003f22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f1e:	2302      	movs	r3, #2
 8003f20:	e0ae      	b.n	8004080 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b0c      	cmp	r3, #12
 8003f2e:	f200 809f 	bhi.w	8004070 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003f32:	a201      	add	r2, pc, #4	@ (adr r2, 8003f38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f38:	08003f6d 	.word	0x08003f6d
 8003f3c:	08004071 	.word	0x08004071
 8003f40:	08004071 	.word	0x08004071
 8003f44:	08004071 	.word	0x08004071
 8003f48:	08003fad 	.word	0x08003fad
 8003f4c:	08004071 	.word	0x08004071
 8003f50:	08004071 	.word	0x08004071
 8003f54:	08004071 	.word	0x08004071
 8003f58:	08003fef 	.word	0x08003fef
 8003f5c:	08004071 	.word	0x08004071
 8003f60:	08004071 	.word	0x08004071
 8003f64:	08004071 	.word	0x08004071
 8003f68:	0800402f 	.word	0x0800402f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68b9      	ldr	r1, [r7, #8]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 f9d8 	bl	8004328 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	699a      	ldr	r2, [r3, #24]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f042 0208 	orr.w	r2, r2, #8
 8003f86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	699a      	ldr	r2, [r3, #24]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 0204 	bic.w	r2, r2, #4
 8003f96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6999      	ldr	r1, [r3, #24]
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	691a      	ldr	r2, [r3, #16]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	619a      	str	r2, [r3, #24]
      break;
 8003faa:	e064      	b.n	8004076 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68b9      	ldr	r1, [r7, #8]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 fa1e 	bl	80043f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	699a      	ldr	r2, [r3, #24]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	699a      	ldr	r2, [r3, #24]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6999      	ldr	r1, [r3, #24]
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	021a      	lsls	r2, r3, #8
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	619a      	str	r2, [r3, #24]
      break;
 8003fec:	e043      	b.n	8004076 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68b9      	ldr	r1, [r7, #8]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f000 fa67 	bl	80044c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	69da      	ldr	r2, [r3, #28]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f042 0208 	orr.w	r2, r2, #8
 8004008:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	69da      	ldr	r2, [r3, #28]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 0204 	bic.w	r2, r2, #4
 8004018:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	69d9      	ldr	r1, [r3, #28]
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	691a      	ldr	r2, [r3, #16]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	430a      	orrs	r2, r1
 800402a:	61da      	str	r2, [r3, #28]
      break;
 800402c:	e023      	b.n	8004076 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68b9      	ldr	r1, [r7, #8]
 8004034:	4618      	mov	r0, r3
 8004036:	f000 fab1 	bl	800459c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	69da      	ldr	r2, [r3, #28]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004048:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	69da      	ldr	r2, [r3, #28]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004058:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	69d9      	ldr	r1, [r3, #28]
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	021a      	lsls	r2, r3, #8
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	430a      	orrs	r2, r1
 800406c:	61da      	str	r2, [r3, #28]
      break;
 800406e:	e002      	b.n	8004076 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	75fb      	strb	r3, [r7, #23]
      break;
 8004074:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800407e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004080:	4618      	mov	r0, r3
 8004082:	3718      	adds	r7, #24
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004092:	2300      	movs	r3, #0
 8004094:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800409c:	2b01      	cmp	r3, #1
 800409e:	d101      	bne.n	80040a4 <HAL_TIM_ConfigClockSource+0x1c>
 80040a0:	2302      	movs	r3, #2
 80040a2:	e0b4      	b.n	800420e <HAL_TIM_ConfigClockSource+0x186>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2202      	movs	r2, #2
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80040c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80040ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68ba      	ldr	r2, [r7, #8]
 80040d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040dc:	d03e      	beq.n	800415c <HAL_TIM_ConfigClockSource+0xd4>
 80040de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040e2:	f200 8087 	bhi.w	80041f4 <HAL_TIM_ConfigClockSource+0x16c>
 80040e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040ea:	f000 8086 	beq.w	80041fa <HAL_TIM_ConfigClockSource+0x172>
 80040ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040f2:	d87f      	bhi.n	80041f4 <HAL_TIM_ConfigClockSource+0x16c>
 80040f4:	2b70      	cmp	r3, #112	@ 0x70
 80040f6:	d01a      	beq.n	800412e <HAL_TIM_ConfigClockSource+0xa6>
 80040f8:	2b70      	cmp	r3, #112	@ 0x70
 80040fa:	d87b      	bhi.n	80041f4 <HAL_TIM_ConfigClockSource+0x16c>
 80040fc:	2b60      	cmp	r3, #96	@ 0x60
 80040fe:	d050      	beq.n	80041a2 <HAL_TIM_ConfigClockSource+0x11a>
 8004100:	2b60      	cmp	r3, #96	@ 0x60
 8004102:	d877      	bhi.n	80041f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004104:	2b50      	cmp	r3, #80	@ 0x50
 8004106:	d03c      	beq.n	8004182 <HAL_TIM_ConfigClockSource+0xfa>
 8004108:	2b50      	cmp	r3, #80	@ 0x50
 800410a:	d873      	bhi.n	80041f4 <HAL_TIM_ConfigClockSource+0x16c>
 800410c:	2b40      	cmp	r3, #64	@ 0x40
 800410e:	d058      	beq.n	80041c2 <HAL_TIM_ConfigClockSource+0x13a>
 8004110:	2b40      	cmp	r3, #64	@ 0x40
 8004112:	d86f      	bhi.n	80041f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004114:	2b30      	cmp	r3, #48	@ 0x30
 8004116:	d064      	beq.n	80041e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004118:	2b30      	cmp	r3, #48	@ 0x30
 800411a:	d86b      	bhi.n	80041f4 <HAL_TIM_ConfigClockSource+0x16c>
 800411c:	2b20      	cmp	r3, #32
 800411e:	d060      	beq.n	80041e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004120:	2b20      	cmp	r3, #32
 8004122:	d867      	bhi.n	80041f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004124:	2b00      	cmp	r3, #0
 8004126:	d05c      	beq.n	80041e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004128:	2b10      	cmp	r3, #16
 800412a:	d05a      	beq.n	80041e2 <HAL_TIM_ConfigClockSource+0x15a>
 800412c:	e062      	b.n	80041f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800413e:	f000 faf2 	bl	8004726 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004150:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	609a      	str	r2, [r3, #8]
      break;
 800415a:	e04f      	b.n	80041fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800416c:	f000 fadb 	bl	8004726 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689a      	ldr	r2, [r3, #8]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800417e:	609a      	str	r2, [r3, #8]
      break;
 8004180:	e03c      	b.n	80041fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800418e:	461a      	mov	r2, r3
 8004190:	f000 fa52 	bl	8004638 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2150      	movs	r1, #80	@ 0x50
 800419a:	4618      	mov	r0, r3
 800419c:	f000 faa9 	bl	80046f2 <TIM_ITRx_SetConfig>
      break;
 80041a0:	e02c      	b.n	80041fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041ae:	461a      	mov	r2, r3
 80041b0:	f000 fa70 	bl	8004694 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2160      	movs	r1, #96	@ 0x60
 80041ba:	4618      	mov	r0, r3
 80041bc:	f000 fa99 	bl	80046f2 <TIM_ITRx_SetConfig>
      break;
 80041c0:	e01c      	b.n	80041fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041ce:	461a      	mov	r2, r3
 80041d0:	f000 fa32 	bl	8004638 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2140      	movs	r1, #64	@ 0x40
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 fa89 	bl	80046f2 <TIM_ITRx_SetConfig>
      break;
 80041e0:	e00c      	b.n	80041fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4619      	mov	r1, r3
 80041ec:	4610      	mov	r0, r2
 80041ee:	f000 fa80 	bl	80046f2 <TIM_ITRx_SetConfig>
      break;
 80041f2:	e003      	b.n	80041fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	73fb      	strb	r3, [r7, #15]
      break;
 80041f8:	e000      	b.n	80041fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80041fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800420c:	7bfb      	ldrb	r3, [r7, #15]
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004216:	b480      	push	{r7}
 8004218:	b083      	sub	sp, #12
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800421e:	bf00      	nop
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	bc80      	pop	{r7}
 8004226:	4770      	bx	lr

08004228 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	bc80      	pop	{r7}
 8004238:	4770      	bx	lr

0800423a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800423a:	b480      	push	{r7}
 800423c:	b083      	sub	sp, #12
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004242:	bf00      	nop
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	bc80      	pop	{r7}
 800424a:	4770      	bx	lr

0800424c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a2f      	ldr	r2, [pc, #188]	@ (800431c <TIM_Base_SetConfig+0xd0>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d00b      	beq.n	800427c <TIM_Base_SetConfig+0x30>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800426a:	d007      	beq.n	800427c <TIM_Base_SetConfig+0x30>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a2c      	ldr	r2, [pc, #176]	@ (8004320 <TIM_Base_SetConfig+0xd4>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d003      	beq.n	800427c <TIM_Base_SetConfig+0x30>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a2b      	ldr	r2, [pc, #172]	@ (8004324 <TIM_Base_SetConfig+0xd8>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d108      	bne.n	800428e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004282:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	4313      	orrs	r3, r2
 800428c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a22      	ldr	r2, [pc, #136]	@ (800431c <TIM_Base_SetConfig+0xd0>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d00b      	beq.n	80042ae <TIM_Base_SetConfig+0x62>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800429c:	d007      	beq.n	80042ae <TIM_Base_SetConfig+0x62>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a1f      	ldr	r2, [pc, #124]	@ (8004320 <TIM_Base_SetConfig+0xd4>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d003      	beq.n	80042ae <TIM_Base_SetConfig+0x62>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a1e      	ldr	r2, [pc, #120]	@ (8004324 <TIM_Base_SetConfig+0xd8>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d108      	bne.n	80042c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	4313      	orrs	r3, r2
 80042be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a0d      	ldr	r2, [pc, #52]	@ (800431c <TIM_Base_SetConfig+0xd0>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d103      	bne.n	80042f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	691a      	ldr	r2, [r3, #16]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b00      	cmp	r3, #0
 8004304:	d005      	beq.n	8004312 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	f023 0201 	bic.w	r2, r3, #1
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	611a      	str	r2, [r3, #16]
  }
}
 8004312:	bf00      	nop
 8004314:	3714      	adds	r7, #20
 8004316:	46bd      	mov	sp, r7
 8004318:	bc80      	pop	{r7}
 800431a:	4770      	bx	lr
 800431c:	40012c00 	.word	0x40012c00
 8004320:	40000400 	.word	0x40000400
 8004324:	40000800 	.word	0x40000800

08004328 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004328:	b480      	push	{r7}
 800432a:	b087      	sub	sp, #28
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	f023 0201 	bic.w	r2, r3, #1
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f023 0303 	bic.w	r3, r3, #3
 800435e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	4313      	orrs	r3, r2
 8004368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	f023 0302 	bic.w	r3, r3, #2
 8004370:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	4313      	orrs	r3, r2
 800437a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a1c      	ldr	r2, [pc, #112]	@ (80043f0 <TIM_OC1_SetConfig+0xc8>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d10c      	bne.n	800439e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	f023 0308 	bic.w	r3, r3, #8
 800438a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	4313      	orrs	r3, r2
 8004394:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f023 0304 	bic.w	r3, r3, #4
 800439c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a13      	ldr	r2, [pc, #76]	@ (80043f0 <TIM_OC1_SetConfig+0xc8>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d111      	bne.n	80043ca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	4313      	orrs	r3, r2
 80043be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	621a      	str	r2, [r3, #32]
}
 80043e4:	bf00      	nop
 80043e6:	371c      	adds	r7, #28
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bc80      	pop	{r7}
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	40012c00 	.word	0x40012c00

080043f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b087      	sub	sp, #28
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	f023 0210 	bic.w	r2, r3, #16
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800442a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	021b      	lsls	r3, r3, #8
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	4313      	orrs	r3, r2
 8004436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f023 0320 	bic.w	r3, r3, #32
 800443e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	011b      	lsls	r3, r3, #4
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	4313      	orrs	r3, r2
 800444a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a1d      	ldr	r2, [pc, #116]	@ (80044c4 <TIM_OC2_SetConfig+0xd0>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d10d      	bne.n	8004470 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800445a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	011b      	lsls	r3, r3, #4
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	4313      	orrs	r3, r2
 8004466:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800446e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a14      	ldr	r2, [pc, #80]	@ (80044c4 <TIM_OC2_SetConfig+0xd0>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d113      	bne.n	80044a0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800447e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004486:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	4313      	orrs	r3, r2
 8004492:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	4313      	orrs	r3, r2
 800449e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	685a      	ldr	r2, [r3, #4]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	621a      	str	r2, [r3, #32]
}
 80044ba:	bf00      	nop
 80044bc:	371c      	adds	r7, #28
 80044be:	46bd      	mov	sp, r7
 80044c0:	bc80      	pop	{r7}
 80044c2:	4770      	bx	lr
 80044c4:	40012c00 	.word	0x40012c00

080044c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b087      	sub	sp, #28
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a1b      	ldr	r3, [r3, #32]
 80044dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	69db      	ldr	r3, [r3, #28]
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f023 0303 	bic.w	r3, r3, #3
 80044fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	4313      	orrs	r3, r2
 8004508:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004510:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	021b      	lsls	r3, r3, #8
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	4313      	orrs	r3, r2
 800451c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a1d      	ldr	r2, [pc, #116]	@ (8004598 <TIM_OC3_SetConfig+0xd0>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d10d      	bne.n	8004542 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800452c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	021b      	lsls	r3, r3, #8
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	4313      	orrs	r3, r2
 8004538:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004540:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a14      	ldr	r2, [pc, #80]	@ (8004598 <TIM_OC3_SetConfig+0xd0>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d113      	bne.n	8004572 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004550:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004558:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	011b      	lsls	r3, r3, #4
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	4313      	orrs	r3, r2
 8004564:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	011b      	lsls	r3, r3, #4
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	4313      	orrs	r3, r2
 8004570:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685a      	ldr	r2, [r3, #4]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	621a      	str	r2, [r3, #32]
}
 800458c:	bf00      	nop
 800458e:	371c      	adds	r7, #28
 8004590:	46bd      	mov	sp, r7
 8004592:	bc80      	pop	{r7}
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	40012c00 	.word	0x40012c00

0800459c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800459c:	b480      	push	{r7}
 800459e:	b087      	sub	sp, #28
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	021b      	lsls	r3, r3, #8
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	4313      	orrs	r3, r2
 80045de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80045e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	031b      	lsls	r3, r3, #12
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a0f      	ldr	r2, [pc, #60]	@ (8004634 <TIM_OC4_SetConfig+0x98>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d109      	bne.n	8004610 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004602:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	019b      	lsls	r3, r3, #6
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	4313      	orrs	r3, r2
 800460e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	621a      	str	r2, [r3, #32]
}
 800462a:	bf00      	nop
 800462c:	371c      	adds	r7, #28
 800462e:	46bd      	mov	sp, r7
 8004630:	bc80      	pop	{r7}
 8004632:	4770      	bx	lr
 8004634:	40012c00 	.word	0x40012c00

08004638 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004638:	b480      	push	{r7}
 800463a:	b087      	sub	sp, #28
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	f023 0201 	bic.w	r2, r3, #1
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004662:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	011b      	lsls	r3, r3, #4
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	4313      	orrs	r3, r2
 800466c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f023 030a 	bic.w	r3, r3, #10
 8004674:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	4313      	orrs	r3, r2
 800467c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	621a      	str	r2, [r3, #32]
}
 800468a:	bf00      	nop
 800468c:	371c      	adds	r7, #28
 800468e:	46bd      	mov	sp, r7
 8004690:	bc80      	pop	{r7}
 8004692:	4770      	bx	lr

08004694 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004694:	b480      	push	{r7}
 8004696:	b087      	sub	sp, #28
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6a1b      	ldr	r3, [r3, #32]
 80046a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	f023 0210 	bic.w	r2, r3, #16
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80046be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	031b      	lsls	r3, r3, #12
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80046d0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	011b      	lsls	r3, r3, #4
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	4313      	orrs	r3, r2
 80046da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	621a      	str	r2, [r3, #32]
}
 80046e8:	bf00      	nop
 80046ea:	371c      	adds	r7, #28
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bc80      	pop	{r7}
 80046f0:	4770      	bx	lr

080046f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046f2:	b480      	push	{r7}
 80046f4:	b085      	sub	sp, #20
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
 80046fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004708:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4313      	orrs	r3, r2
 8004710:	f043 0307 	orr.w	r3, r3, #7
 8004714:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	609a      	str	r2, [r3, #8]
}
 800471c:	bf00      	nop
 800471e:	3714      	adds	r7, #20
 8004720:	46bd      	mov	sp, r7
 8004722:	bc80      	pop	{r7}
 8004724:	4770      	bx	lr

08004726 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004726:	b480      	push	{r7}
 8004728:	b087      	sub	sp, #28
 800472a:	af00      	add	r7, sp, #0
 800472c:	60f8      	str	r0, [r7, #12]
 800472e:	60b9      	str	r1, [r7, #8]
 8004730:	607a      	str	r2, [r7, #4]
 8004732:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004740:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	021a      	lsls	r2, r3, #8
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	431a      	orrs	r2, r3
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	4313      	orrs	r3, r2
 800474e:	697a      	ldr	r2, [r7, #20]
 8004750:	4313      	orrs	r3, r2
 8004752:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	609a      	str	r2, [r3, #8]
}
 800475a:	bf00      	nop
 800475c:	371c      	adds	r7, #28
 800475e:	46bd      	mov	sp, r7
 8004760:	bc80      	pop	{r7}
 8004762:	4770      	bx	lr

08004764 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004764:	b480      	push	{r7}
 8004766:	b087      	sub	sp, #28
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	f003 031f 	and.w	r3, r3, #31
 8004776:	2201      	movs	r2, #1
 8004778:	fa02 f303 	lsl.w	r3, r2, r3
 800477c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6a1a      	ldr	r2, [r3, #32]
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	43db      	mvns	r3, r3
 8004786:	401a      	ands	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6a1a      	ldr	r2, [r3, #32]
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	f003 031f 	and.w	r3, r3, #31
 8004796:	6879      	ldr	r1, [r7, #4]
 8004798:	fa01 f303 	lsl.w	r3, r1, r3
 800479c:	431a      	orrs	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	621a      	str	r2, [r3, #32]
}
 80047a2:	bf00      	nop
 80047a4:	371c      	adds	r7, #28
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bc80      	pop	{r7}
 80047aa:	4770      	bx	lr

080047ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d101      	bne.n	80047c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047c0:	2302      	movs	r3, #2
 80047c2:	e046      	b.n	8004852 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2202      	movs	r2, #2
 80047d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a16      	ldr	r2, [pc, #88]	@ (800485c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d00e      	beq.n	8004826 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004810:	d009      	beq.n	8004826 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a12      	ldr	r2, [pc, #72]	@ (8004860 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d004      	beq.n	8004826 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a10      	ldr	r2, [pc, #64]	@ (8004864 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d10c      	bne.n	8004840 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800482c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	68ba      	ldr	r2, [r7, #8]
 8004834:	4313      	orrs	r3, r2
 8004836:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3714      	adds	r7, #20
 8004856:	46bd      	mov	sp, r7
 8004858:	bc80      	pop	{r7}
 800485a:	4770      	bx	lr
 800485c:	40012c00 	.word	0x40012c00
 8004860:	40000400 	.word	0x40000400
 8004864:	40000800 	.word	0x40000800

08004868 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	bc80      	pop	{r7}
 8004878:	4770      	bx	lr

0800487a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800487a:	b480      	push	{r7}
 800487c:	b083      	sub	sp, #12
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004882:	bf00      	nop
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	bc80      	pop	{r7}
 800488a:	4770      	bx	lr

0800488c <memset>:
 800488c:	4603      	mov	r3, r0
 800488e:	4402      	add	r2, r0
 8004890:	4293      	cmp	r3, r2
 8004892:	d100      	bne.n	8004896 <memset+0xa>
 8004894:	4770      	bx	lr
 8004896:	f803 1b01 	strb.w	r1, [r3], #1
 800489a:	e7f9      	b.n	8004890 <memset+0x4>

0800489c <__libc_init_array>:
 800489c:	b570      	push	{r4, r5, r6, lr}
 800489e:	2600      	movs	r6, #0
 80048a0:	4d0c      	ldr	r5, [pc, #48]	@ (80048d4 <__libc_init_array+0x38>)
 80048a2:	4c0d      	ldr	r4, [pc, #52]	@ (80048d8 <__libc_init_array+0x3c>)
 80048a4:	1b64      	subs	r4, r4, r5
 80048a6:	10a4      	asrs	r4, r4, #2
 80048a8:	42a6      	cmp	r6, r4
 80048aa:	d109      	bne.n	80048c0 <__libc_init_array+0x24>
 80048ac:	f000 f81a 	bl	80048e4 <_init>
 80048b0:	2600      	movs	r6, #0
 80048b2:	4d0a      	ldr	r5, [pc, #40]	@ (80048dc <__libc_init_array+0x40>)
 80048b4:	4c0a      	ldr	r4, [pc, #40]	@ (80048e0 <__libc_init_array+0x44>)
 80048b6:	1b64      	subs	r4, r4, r5
 80048b8:	10a4      	asrs	r4, r4, #2
 80048ba:	42a6      	cmp	r6, r4
 80048bc:	d105      	bne.n	80048ca <__libc_init_array+0x2e>
 80048be:	bd70      	pop	{r4, r5, r6, pc}
 80048c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80048c4:	4798      	blx	r3
 80048c6:	3601      	adds	r6, #1
 80048c8:	e7ee      	b.n	80048a8 <__libc_init_array+0xc>
 80048ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80048ce:	4798      	blx	r3
 80048d0:	3601      	adds	r6, #1
 80048d2:	e7f2      	b.n	80048ba <__libc_init_array+0x1e>
 80048d4:	0800493c 	.word	0x0800493c
 80048d8:	0800493c 	.word	0x0800493c
 80048dc:	0800493c 	.word	0x0800493c
 80048e0:	08004940 	.word	0x08004940

080048e4 <_init>:
 80048e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048e6:	bf00      	nop
 80048e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ea:	bc08      	pop	{r3}
 80048ec:	469e      	mov	lr, r3
 80048ee:	4770      	bx	lr

080048f0 <_fini>:
 80048f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048f2:	bf00      	nop
 80048f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048f6:	bc08      	pop	{r3}
 80048f8:	469e      	mov	lr, r3
 80048fa:	4770      	bx	lr
