
CHOAM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047f4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004900  08004900  00005900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004940  08004940  00006014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004940  08004940  00006014  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004940  08004940  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004940  08004940  00005940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004944  08004944  00005944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08004948  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  20000014  0800495c  00006014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  0800495c  00006158  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a919  00000000  00000000  0000603d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fda  00000000  00000000  00010956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  00012930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008c9  00000000  00000000  000134a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001834a  00000000  00000000  00013d71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d132  00000000  00000000  0002c0bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d344  00000000  00000000  000391ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6531  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000314c  00000000  00000000  000c6574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000c96c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	080048e8 	.word	0x080048e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	080048e8 	.word	0x080048e8

0800014c <__aeabi_dmul>:
 800014c:	b570      	push	{r4, r5, r6, lr}
 800014e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000152:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000156:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015a:	bf1d      	ittte	ne
 800015c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000160:	ea94 0f0c 	teqne	r4, ip
 8000164:	ea95 0f0c 	teqne	r5, ip
 8000168:	f000 f8de 	bleq	8000328 <__aeabi_dmul+0x1dc>
 800016c:	442c      	add	r4, r5
 800016e:	ea81 0603 	eor.w	r6, r1, r3
 8000172:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000176:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800017e:	bf18      	it	ne
 8000180:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000184:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000188:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800018c:	d038      	beq.n	8000200 <__aeabi_dmul+0xb4>
 800018e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000192:	f04f 0500 	mov.w	r5, #0
 8000196:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800019e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a2:	f04f 0600 	mov.w	r6, #0
 80001a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001aa:	f09c 0f00 	teq	ip, #0
 80001ae:	bf18      	it	ne
 80001b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001b8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001bc:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001c0:	d204      	bcs.n	80001cc <__aeabi_dmul+0x80>
 80001c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001c6:	416d      	adcs	r5, r5
 80001c8:	eb46 0606 	adc.w	r6, r6, r6
 80001cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001e4:	bf88      	it	hi
 80001e6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001ea:	d81e      	bhi.n	800022a <__aeabi_dmul+0xde>
 80001ec:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80001f0:	bf08      	it	eq
 80001f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001f6:	f150 0000 	adcs.w	r0, r0, #0
 80001fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80001fe:	bd70      	pop	{r4, r5, r6, pc}
 8000200:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000204:	ea46 0101 	orr.w	r1, r6, r1
 8000208:	ea40 0002 	orr.w	r0, r0, r2
 800020c:	ea81 0103 	eor.w	r1, r1, r3
 8000210:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000214:	bfc2      	ittt	gt
 8000216:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800021e:	bd70      	popgt	{r4, r5, r6, pc}
 8000220:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000224:	f04f 0e00 	mov.w	lr, #0
 8000228:	3c01      	subs	r4, #1
 800022a:	f300 80ab 	bgt.w	8000384 <__aeabi_dmul+0x238>
 800022e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000232:	bfde      	ittt	le
 8000234:	2000      	movle	r0, #0
 8000236:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800023a:	bd70      	pople	{r4, r5, r6, pc}
 800023c:	f1c4 0400 	rsb	r4, r4, #0
 8000240:	3c20      	subs	r4, #32
 8000242:	da35      	bge.n	80002b0 <__aeabi_dmul+0x164>
 8000244:	340c      	adds	r4, #12
 8000246:	dc1b      	bgt.n	8000280 <__aeabi_dmul+0x134>
 8000248:	f104 0414 	add.w	r4, r4, #20
 800024c:	f1c4 0520 	rsb	r5, r4, #32
 8000250:	fa00 f305 	lsl.w	r3, r0, r5
 8000254:	fa20 f004 	lsr.w	r0, r0, r4
 8000258:	fa01 f205 	lsl.w	r2, r1, r5
 800025c:	ea40 0002 	orr.w	r0, r0, r2
 8000260:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000264:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000268:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800026c:	fa21 f604 	lsr.w	r6, r1, r4
 8000270:	eb42 0106 	adc.w	r1, r2, r6
 8000274:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000278:	bf08      	it	eq
 800027a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800027e:	bd70      	pop	{r4, r5, r6, pc}
 8000280:	f1c4 040c 	rsb	r4, r4, #12
 8000284:	f1c4 0520 	rsb	r5, r4, #32
 8000288:	fa00 f304 	lsl.w	r3, r0, r4
 800028c:	fa20 f005 	lsr.w	r0, r0, r5
 8000290:	fa01 f204 	lsl.w	r2, r1, r4
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800029c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a0:	f141 0100 	adc.w	r1, r1, #0
 80002a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002a8:	bf08      	it	eq
 80002aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ae:	bd70      	pop	{r4, r5, r6, pc}
 80002b0:	f1c4 0520 	rsb	r5, r4, #32
 80002b4:	fa00 f205 	lsl.w	r2, r0, r5
 80002b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80002bc:	fa20 f304 	lsr.w	r3, r0, r4
 80002c0:	fa01 f205 	lsl.w	r2, r1, r5
 80002c4:	ea43 0302 	orr.w	r3, r3, r2
 80002c8:	fa21 f004 	lsr.w	r0, r1, r4
 80002cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002d0:	fa21 f204 	lsr.w	r2, r1, r4
 80002d4:	ea20 0002 	bic.w	r0, r0, r2
 80002d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e0:	bf08      	it	eq
 80002e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002e6:	bd70      	pop	{r4, r5, r6, pc}
 80002e8:	f094 0f00 	teq	r4, #0
 80002ec:	d10f      	bne.n	800030e <__aeabi_dmul+0x1c2>
 80002ee:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80002f2:	0040      	lsls	r0, r0, #1
 80002f4:	eb41 0101 	adc.w	r1, r1, r1
 80002f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80002fc:	bf08      	it	eq
 80002fe:	3c01      	subeq	r4, #1
 8000300:	d0f7      	beq.n	80002f2 <__aeabi_dmul+0x1a6>
 8000302:	ea41 0106 	orr.w	r1, r1, r6
 8000306:	f095 0f00 	teq	r5, #0
 800030a:	bf18      	it	ne
 800030c:	4770      	bxne	lr
 800030e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000312:	0052      	lsls	r2, r2, #1
 8000314:	eb43 0303 	adc.w	r3, r3, r3
 8000318:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800031c:	bf08      	it	eq
 800031e:	3d01      	subeq	r5, #1
 8000320:	d0f7      	beq.n	8000312 <__aeabi_dmul+0x1c6>
 8000322:	ea43 0306 	orr.w	r3, r3, r6
 8000326:	4770      	bx	lr
 8000328:	ea94 0f0c 	teq	r4, ip
 800032c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000330:	bf18      	it	ne
 8000332:	ea95 0f0c 	teqne	r5, ip
 8000336:	d00c      	beq.n	8000352 <__aeabi_dmul+0x206>
 8000338:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800033c:	bf18      	it	ne
 800033e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000342:	d1d1      	bne.n	80002e8 <__aeabi_dmul+0x19c>
 8000344:	ea81 0103 	eor.w	r1, r1, r3
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	f04f 0000 	mov.w	r0, #0
 8000350:	bd70      	pop	{r4, r5, r6, pc}
 8000352:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000356:	bf06      	itte	eq
 8000358:	4610      	moveq	r0, r2
 800035a:	4619      	moveq	r1, r3
 800035c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000360:	d019      	beq.n	8000396 <__aeabi_dmul+0x24a>
 8000362:	ea94 0f0c 	teq	r4, ip
 8000366:	d102      	bne.n	800036e <__aeabi_dmul+0x222>
 8000368:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800036c:	d113      	bne.n	8000396 <__aeabi_dmul+0x24a>
 800036e:	ea95 0f0c 	teq	r5, ip
 8000372:	d105      	bne.n	8000380 <__aeabi_dmul+0x234>
 8000374:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000378:	bf1c      	itt	ne
 800037a:	4610      	movne	r0, r2
 800037c:	4619      	movne	r1, r3
 800037e:	d10a      	bne.n	8000396 <__aeabi_dmul+0x24a>
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000388:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800038c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000390:	f04f 0000 	mov.w	r0, #0
 8000394:	bd70      	pop	{r4, r5, r6, pc}
 8000396:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800039a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800039e:	bd70      	pop	{r4, r5, r6, pc}

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	@ 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__gedf2>:
 8000718:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800071c:	e006      	b.n	800072c <__cmpdf2+0x4>
 800071e:	bf00      	nop

08000720 <__ledf2>:
 8000720:	f04f 0c01 	mov.w	ip, #1
 8000724:	e002      	b.n	800072c <__cmpdf2+0x4>
 8000726:	bf00      	nop

08000728 <__cmpdf2>:
 8000728:	f04f 0c01 	mov.w	ip, #1
 800072c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000730:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000734:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000738:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800073c:	bf18      	it	ne
 800073e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000742:	d01b      	beq.n	800077c <__cmpdf2+0x54>
 8000744:	b001      	add	sp, #4
 8000746:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800074a:	bf0c      	ite	eq
 800074c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000750:	ea91 0f03 	teqne	r1, r3
 8000754:	bf02      	ittt	eq
 8000756:	ea90 0f02 	teqeq	r0, r2
 800075a:	2000      	moveq	r0, #0
 800075c:	4770      	bxeq	lr
 800075e:	f110 0f00 	cmn.w	r0, #0
 8000762:	ea91 0f03 	teq	r1, r3
 8000766:	bf58      	it	pl
 8000768:	4299      	cmppl	r1, r3
 800076a:	bf08      	it	eq
 800076c:	4290      	cmpeq	r0, r2
 800076e:	bf2c      	ite	cs
 8000770:	17d8      	asrcs	r0, r3, #31
 8000772:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000776:	f040 0001 	orr.w	r0, r0, #1
 800077a:	4770      	bx	lr
 800077c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000780:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000784:	d102      	bne.n	800078c <__cmpdf2+0x64>
 8000786:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800078a:	d107      	bne.n	800079c <__cmpdf2+0x74>
 800078c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000790:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000794:	d1d6      	bne.n	8000744 <__cmpdf2+0x1c>
 8000796:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800079a:	d0d3      	beq.n	8000744 <__cmpdf2+0x1c>
 800079c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop

080007a4 <__aeabi_cdrcmple>:
 80007a4:	4684      	mov	ip, r0
 80007a6:	4610      	mov	r0, r2
 80007a8:	4662      	mov	r2, ip
 80007aa:	468c      	mov	ip, r1
 80007ac:	4619      	mov	r1, r3
 80007ae:	4663      	mov	r3, ip
 80007b0:	e000      	b.n	80007b4 <__aeabi_cdcmpeq>
 80007b2:	bf00      	nop

080007b4 <__aeabi_cdcmpeq>:
 80007b4:	b501      	push	{r0, lr}
 80007b6:	f7ff ffb7 	bl	8000728 <__cmpdf2>
 80007ba:	2800      	cmp	r0, #0
 80007bc:	bf48      	it	mi
 80007be:	f110 0f00 	cmnmi.w	r0, #0
 80007c2:	bd01      	pop	{r0, pc}

080007c4 <__aeabi_dcmpeq>:
 80007c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007c8:	f7ff fff4 	bl	80007b4 <__aeabi_cdcmpeq>
 80007cc:	bf0c      	ite	eq
 80007ce:	2001      	moveq	r0, #1
 80007d0:	2000      	movne	r0, #0
 80007d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80007d6:	bf00      	nop

080007d8 <__aeabi_dcmplt>:
 80007d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007dc:	f7ff ffea 	bl	80007b4 <__aeabi_cdcmpeq>
 80007e0:	bf34      	ite	cc
 80007e2:	2001      	movcc	r0, #1
 80007e4:	2000      	movcs	r0, #0
 80007e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80007ea:	bf00      	nop

080007ec <__aeabi_dcmple>:
 80007ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007f0:	f7ff ffe0 	bl	80007b4 <__aeabi_cdcmpeq>
 80007f4:	bf94      	ite	ls
 80007f6:	2001      	movls	r0, #1
 80007f8:	2000      	movhi	r0, #0
 80007fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80007fe:	bf00      	nop

08000800 <__aeabi_dcmpge>:
 8000800:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000804:	f7ff ffce 	bl	80007a4 <__aeabi_cdrcmple>
 8000808:	bf94      	ite	ls
 800080a:	2001      	movls	r0, #1
 800080c:	2000      	movhi	r0, #0
 800080e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000812:	bf00      	nop

08000814 <__aeabi_dcmpgt>:
 8000814:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000818:	f7ff ffc4 	bl	80007a4 <__aeabi_cdrcmple>
 800081c:	bf34      	ite	cc
 800081e:	2001      	movcc	r0, #1
 8000820:	2000      	movcs	r0, #0
 8000822:	f85d fb08 	ldr.w	pc, [sp], #8
 8000826:	bf00      	nop

08000828 <__aeabi_frsub>:
 8000828:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 800082c:	e002      	b.n	8000834 <__addsf3>
 800082e:	bf00      	nop

08000830 <__aeabi_fsub>:
 8000830:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000834 <__addsf3>:
 8000834:	0042      	lsls	r2, r0, #1
 8000836:	bf1f      	itttt	ne
 8000838:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800083c:	ea92 0f03 	teqne	r2, r3
 8000840:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000844:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000848:	d06a      	beq.n	8000920 <__addsf3+0xec>
 800084a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800084e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000852:	bfc1      	itttt	gt
 8000854:	18d2      	addgt	r2, r2, r3
 8000856:	4041      	eorgt	r1, r0
 8000858:	4048      	eorgt	r0, r1
 800085a:	4041      	eorgt	r1, r0
 800085c:	bfb8      	it	lt
 800085e:	425b      	neglt	r3, r3
 8000860:	2b19      	cmp	r3, #25
 8000862:	bf88      	it	hi
 8000864:	4770      	bxhi	lr
 8000866:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800086a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800086e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000872:	bf18      	it	ne
 8000874:	4240      	negne	r0, r0
 8000876:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800087a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800087e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000882:	bf18      	it	ne
 8000884:	4249      	negne	r1, r1
 8000886:	ea92 0f03 	teq	r2, r3
 800088a:	d03f      	beq.n	800090c <__addsf3+0xd8>
 800088c:	f1a2 0201 	sub.w	r2, r2, #1
 8000890:	fa41 fc03 	asr.w	ip, r1, r3
 8000894:	eb10 000c 	adds.w	r0, r0, ip
 8000898:	f1c3 0320 	rsb	r3, r3, #32
 800089c:	fa01 f103 	lsl.w	r1, r1, r3
 80008a0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80008a4:	d502      	bpl.n	80008ac <__addsf3+0x78>
 80008a6:	4249      	negs	r1, r1
 80008a8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80008ac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80008b0:	d313      	bcc.n	80008da <__addsf3+0xa6>
 80008b2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80008b6:	d306      	bcc.n	80008c6 <__addsf3+0x92>
 80008b8:	0840      	lsrs	r0, r0, #1
 80008ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80008be:	f102 0201 	add.w	r2, r2, #1
 80008c2:	2afe      	cmp	r2, #254	@ 0xfe
 80008c4:	d251      	bcs.n	800096a <__addsf3+0x136>
 80008c6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80008ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008ce:	bf08      	it	eq
 80008d0:	f020 0001 	biceq.w	r0, r0, #1
 80008d4:	ea40 0003 	orr.w	r0, r0, r3
 80008d8:	4770      	bx	lr
 80008da:	0049      	lsls	r1, r1, #1
 80008dc:	eb40 0000 	adc.w	r0, r0, r0
 80008e0:	3a01      	subs	r2, #1
 80008e2:	bf28      	it	cs
 80008e4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80008e8:	d2ed      	bcs.n	80008c6 <__addsf3+0x92>
 80008ea:	fab0 fc80 	clz	ip, r0
 80008ee:	f1ac 0c08 	sub.w	ip, ip, #8
 80008f2:	ebb2 020c 	subs.w	r2, r2, ip
 80008f6:	fa00 f00c 	lsl.w	r0, r0, ip
 80008fa:	bfaa      	itet	ge
 80008fc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000900:	4252      	neglt	r2, r2
 8000902:	4318      	orrge	r0, r3
 8000904:	bfbc      	itt	lt
 8000906:	40d0      	lsrlt	r0, r2
 8000908:	4318      	orrlt	r0, r3
 800090a:	4770      	bx	lr
 800090c:	f092 0f00 	teq	r2, #0
 8000910:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000914:	bf06      	itte	eq
 8000916:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800091a:	3201      	addeq	r2, #1
 800091c:	3b01      	subne	r3, #1
 800091e:	e7b5      	b.n	800088c <__addsf3+0x58>
 8000920:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000924:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000928:	bf18      	it	ne
 800092a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800092e:	d021      	beq.n	8000974 <__addsf3+0x140>
 8000930:	ea92 0f03 	teq	r2, r3
 8000934:	d004      	beq.n	8000940 <__addsf3+0x10c>
 8000936:	f092 0f00 	teq	r2, #0
 800093a:	bf08      	it	eq
 800093c:	4608      	moveq	r0, r1
 800093e:	4770      	bx	lr
 8000940:	ea90 0f01 	teq	r0, r1
 8000944:	bf1c      	itt	ne
 8000946:	2000      	movne	r0, #0
 8000948:	4770      	bxne	lr
 800094a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800094e:	d104      	bne.n	800095a <__addsf3+0x126>
 8000950:	0040      	lsls	r0, r0, #1
 8000952:	bf28      	it	cs
 8000954:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000958:	4770      	bx	lr
 800095a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800095e:	bf3c      	itt	cc
 8000960:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000964:	4770      	bxcc	lr
 8000966:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800096a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800096e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000972:	4770      	bx	lr
 8000974:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000978:	bf16      	itet	ne
 800097a:	4608      	movne	r0, r1
 800097c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000980:	4601      	movne	r1, r0
 8000982:	0242      	lsls	r2, r0, #9
 8000984:	bf06      	itte	eq
 8000986:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800098a:	ea90 0f01 	teqeq	r0, r1
 800098e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000992:	4770      	bx	lr

08000994 <__aeabi_ui2f>:
 8000994:	f04f 0300 	mov.w	r3, #0
 8000998:	e004      	b.n	80009a4 <__aeabi_i2f+0x8>
 800099a:	bf00      	nop

0800099c <__aeabi_i2f>:
 800099c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80009a0:	bf48      	it	mi
 80009a2:	4240      	negmi	r0, r0
 80009a4:	ea5f 0c00 	movs.w	ip, r0
 80009a8:	bf08      	it	eq
 80009aa:	4770      	bxeq	lr
 80009ac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80009b0:	4601      	mov	r1, r0
 80009b2:	f04f 0000 	mov.w	r0, #0
 80009b6:	e01c      	b.n	80009f2 <__aeabi_l2f+0x2a>

080009b8 <__aeabi_ul2f>:
 80009b8:	ea50 0201 	orrs.w	r2, r0, r1
 80009bc:	bf08      	it	eq
 80009be:	4770      	bxeq	lr
 80009c0:	f04f 0300 	mov.w	r3, #0
 80009c4:	e00a      	b.n	80009dc <__aeabi_l2f+0x14>
 80009c6:	bf00      	nop

080009c8 <__aeabi_l2f>:
 80009c8:	ea50 0201 	orrs.w	r2, r0, r1
 80009cc:	bf08      	it	eq
 80009ce:	4770      	bxeq	lr
 80009d0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80009d4:	d502      	bpl.n	80009dc <__aeabi_l2f+0x14>
 80009d6:	4240      	negs	r0, r0
 80009d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009dc:	ea5f 0c01 	movs.w	ip, r1
 80009e0:	bf02      	ittt	eq
 80009e2:	4684      	moveq	ip, r0
 80009e4:	4601      	moveq	r1, r0
 80009e6:	2000      	moveq	r0, #0
 80009e8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80009ec:	bf08      	it	eq
 80009ee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80009f2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80009f6:	fabc f28c 	clz	r2, ip
 80009fa:	3a08      	subs	r2, #8
 80009fc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000a00:	db10      	blt.n	8000a24 <__aeabi_l2f+0x5c>
 8000a02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000a06:	4463      	add	r3, ip
 8000a08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a0c:	f1c2 0220 	rsb	r2, r2, #32
 8000a10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000a14:	fa20 f202 	lsr.w	r2, r0, r2
 8000a18:	eb43 0002 	adc.w	r0, r3, r2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f102 0220 	add.w	r2, r2, #32
 8000a28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000a2c:	f1c2 0220 	rsb	r2, r2, #32
 8000a30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000a34:	fa21 f202 	lsr.w	r2, r1, r2
 8000a38:	eb43 0002 	adc.w	r0, r3, r2
 8000a3c:	bf08      	it	eq
 8000a3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a42:	4770      	bx	lr

08000a44 <__aeabi_fmul>:
 8000a44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000a48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000a4c:	bf1e      	ittt	ne
 8000a4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000a52:	ea92 0f0c 	teqne	r2, ip
 8000a56:	ea93 0f0c 	teqne	r3, ip
 8000a5a:	d06f      	beq.n	8000b3c <__aeabi_fmul+0xf8>
 8000a5c:	441a      	add	r2, r3
 8000a5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000a62:	0240      	lsls	r0, r0, #9
 8000a64:	bf18      	it	ne
 8000a66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000a6a:	d01e      	beq.n	8000aaa <__aeabi_fmul+0x66>
 8000a6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000a70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000a74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000a78:	fba0 3101 	umull	r3, r1, r0, r1
 8000a7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000a80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000a84:	bf3e      	ittt	cc
 8000a86:	0049      	lslcc	r1, r1, #1
 8000a88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000a8c:	005b      	lslcc	r3, r3, #1
 8000a8e:	ea40 0001 	orr.w	r0, r0, r1
 8000a92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000a96:	2afd      	cmp	r2, #253	@ 0xfd
 8000a98:	d81d      	bhi.n	8000ad6 <__aeabi_fmul+0x92>
 8000a9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000a9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000aa2:	bf08      	it	eq
 8000aa4:	f020 0001 	biceq.w	r0, r0, #1
 8000aa8:	4770      	bx	lr
 8000aaa:	f090 0f00 	teq	r0, #0
 8000aae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ab2:	bf08      	it	eq
 8000ab4:	0249      	lsleq	r1, r1, #9
 8000ab6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000aba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000abe:	3a7f      	subs	r2, #127	@ 0x7f
 8000ac0:	bfc2      	ittt	gt
 8000ac2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ac6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000aca:	4770      	bxgt	lr
 8000acc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ad0:	f04f 0300 	mov.w	r3, #0
 8000ad4:	3a01      	subs	r2, #1
 8000ad6:	dc5d      	bgt.n	8000b94 <__aeabi_fmul+0x150>
 8000ad8:	f112 0f19 	cmn.w	r2, #25
 8000adc:	bfdc      	itt	le
 8000ade:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000ae2:	4770      	bxle	lr
 8000ae4:	f1c2 0200 	rsb	r2, r2, #0
 8000ae8:	0041      	lsls	r1, r0, #1
 8000aea:	fa21 f102 	lsr.w	r1, r1, r2
 8000aee:	f1c2 0220 	rsb	r2, r2, #32
 8000af2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000af6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000afa:	f140 0000 	adc.w	r0, r0, #0
 8000afe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000b02:	bf08      	it	eq
 8000b04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b08:	4770      	bx	lr
 8000b0a:	f092 0f00 	teq	r2, #0
 8000b0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000b12:	bf02      	ittt	eq
 8000b14:	0040      	lsleq	r0, r0, #1
 8000b16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000b1a:	3a01      	subeq	r2, #1
 8000b1c:	d0f9      	beq.n	8000b12 <__aeabi_fmul+0xce>
 8000b1e:	ea40 000c 	orr.w	r0, r0, ip
 8000b22:	f093 0f00 	teq	r3, #0
 8000b26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b2a:	bf02      	ittt	eq
 8000b2c:	0049      	lsleq	r1, r1, #1
 8000b2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000b32:	3b01      	subeq	r3, #1
 8000b34:	d0f9      	beq.n	8000b2a <__aeabi_fmul+0xe6>
 8000b36:	ea41 010c 	orr.w	r1, r1, ip
 8000b3a:	e78f      	b.n	8000a5c <__aeabi_fmul+0x18>
 8000b3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000b40:	ea92 0f0c 	teq	r2, ip
 8000b44:	bf18      	it	ne
 8000b46:	ea93 0f0c 	teqne	r3, ip
 8000b4a:	d00a      	beq.n	8000b62 <__aeabi_fmul+0x11e>
 8000b4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000b50:	bf18      	it	ne
 8000b52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000b56:	d1d8      	bne.n	8000b0a <__aeabi_fmul+0xc6>
 8000b58:	ea80 0001 	eor.w	r0, r0, r1
 8000b5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000b60:	4770      	bx	lr
 8000b62:	f090 0f00 	teq	r0, #0
 8000b66:	bf17      	itett	ne
 8000b68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000b6c:	4608      	moveq	r0, r1
 8000b6e:	f091 0f00 	teqne	r1, #0
 8000b72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000b76:	d014      	beq.n	8000ba2 <__aeabi_fmul+0x15e>
 8000b78:	ea92 0f0c 	teq	r2, ip
 8000b7c:	d101      	bne.n	8000b82 <__aeabi_fmul+0x13e>
 8000b7e:	0242      	lsls	r2, r0, #9
 8000b80:	d10f      	bne.n	8000ba2 <__aeabi_fmul+0x15e>
 8000b82:	ea93 0f0c 	teq	r3, ip
 8000b86:	d103      	bne.n	8000b90 <__aeabi_fmul+0x14c>
 8000b88:	024b      	lsls	r3, r1, #9
 8000b8a:	bf18      	it	ne
 8000b8c:	4608      	movne	r0, r1
 8000b8e:	d108      	bne.n	8000ba2 <__aeabi_fmul+0x15e>
 8000b90:	ea80 0001 	eor.w	r0, r0, r1
 8000b94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ba6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000baa:	4770      	bx	lr

08000bac <__aeabi_fdiv>:
 8000bac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000bb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bba:	ea92 0f0c 	teqne	r2, ip
 8000bbe:	ea93 0f0c 	teqne	r3, ip
 8000bc2:	d069      	beq.n	8000c98 <__aeabi_fdiv+0xec>
 8000bc4:	eba2 0203 	sub.w	r2, r2, r3
 8000bc8:	ea80 0c01 	eor.w	ip, r0, r1
 8000bcc:	0249      	lsls	r1, r1, #9
 8000bce:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000bd2:	d037      	beq.n	8000c44 <__aeabi_fdiv+0x98>
 8000bd4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000bd8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000bdc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000be4:	428b      	cmp	r3, r1
 8000be6:	bf38      	it	cc
 8000be8:	005b      	lslcc	r3, r3, #1
 8000bea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000bee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	bf24      	itt	cs
 8000bf6:	1a5b      	subcs	r3, r3, r1
 8000bf8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000bfc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000c00:	bf24      	itt	cs
 8000c02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000c06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000c0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000c0e:	bf24      	itt	cs
 8000c10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000c14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000c18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000c1c:	bf24      	itt	cs
 8000c1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000c22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000c26:	011b      	lsls	r3, r3, #4
 8000c28:	bf18      	it	ne
 8000c2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000c2e:	d1e0      	bne.n	8000bf2 <__aeabi_fdiv+0x46>
 8000c30:	2afd      	cmp	r2, #253	@ 0xfd
 8000c32:	f63f af50 	bhi.w	8000ad6 <__aeabi_fmul+0x92>
 8000c36:	428b      	cmp	r3, r1
 8000c38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c3c:	bf08      	it	eq
 8000c3e:	f020 0001 	biceq.w	r0, r0, #1
 8000c42:	4770      	bx	lr
 8000c44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c4c:	327f      	adds	r2, #127	@ 0x7f
 8000c4e:	bfc2      	ittt	gt
 8000c50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c58:	4770      	bxgt	lr
 8000c5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c5e:	f04f 0300 	mov.w	r3, #0
 8000c62:	3a01      	subs	r2, #1
 8000c64:	e737      	b.n	8000ad6 <__aeabi_fmul+0x92>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000c6e:	bf02      	ittt	eq
 8000c70:	0040      	lsleq	r0, r0, #1
 8000c72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000c76:	3a01      	subeq	r2, #1
 8000c78:	d0f9      	beq.n	8000c6e <__aeabi_fdiv+0xc2>
 8000c7a:	ea40 000c 	orr.w	r0, r0, ip
 8000c7e:	f093 0f00 	teq	r3, #0
 8000c82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c86:	bf02      	ittt	eq
 8000c88:	0049      	lsleq	r1, r1, #1
 8000c8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c8e:	3b01      	subeq	r3, #1
 8000c90:	d0f9      	beq.n	8000c86 <__aeabi_fdiv+0xda>
 8000c92:	ea41 010c 	orr.w	r1, r1, ip
 8000c96:	e795      	b.n	8000bc4 <__aeabi_fdiv+0x18>
 8000c98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c9c:	ea92 0f0c 	teq	r2, ip
 8000ca0:	d108      	bne.n	8000cb4 <__aeabi_fdiv+0x108>
 8000ca2:	0242      	lsls	r2, r0, #9
 8000ca4:	f47f af7d 	bne.w	8000ba2 <__aeabi_fmul+0x15e>
 8000ca8:	ea93 0f0c 	teq	r3, ip
 8000cac:	f47f af70 	bne.w	8000b90 <__aeabi_fmul+0x14c>
 8000cb0:	4608      	mov	r0, r1
 8000cb2:	e776      	b.n	8000ba2 <__aeabi_fmul+0x15e>
 8000cb4:	ea93 0f0c 	teq	r3, ip
 8000cb8:	d104      	bne.n	8000cc4 <__aeabi_fdiv+0x118>
 8000cba:	024b      	lsls	r3, r1, #9
 8000cbc:	f43f af4c 	beq.w	8000b58 <__aeabi_fmul+0x114>
 8000cc0:	4608      	mov	r0, r1
 8000cc2:	e76e      	b.n	8000ba2 <__aeabi_fmul+0x15e>
 8000cc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000cc8:	bf18      	it	ne
 8000cca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000cce:	d1ca      	bne.n	8000c66 <__aeabi_fdiv+0xba>
 8000cd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000cd4:	f47f af5c 	bne.w	8000b90 <__aeabi_fmul+0x14c>
 8000cd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000cdc:	f47f af3c 	bne.w	8000b58 <__aeabi_fmul+0x114>
 8000ce0:	e75f      	b.n	8000ba2 <__aeabi_fmul+0x15e>
 8000ce2:	bf00      	nop

08000ce4 <__gesf2>:
 8000ce4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000ce8:	e006      	b.n	8000cf8 <__cmpsf2+0x4>
 8000cea:	bf00      	nop

08000cec <__lesf2>:
 8000cec:	f04f 0c01 	mov.w	ip, #1
 8000cf0:	e002      	b.n	8000cf8 <__cmpsf2+0x4>
 8000cf2:	bf00      	nop

08000cf4 <__cmpsf2>:
 8000cf4:	f04f 0c01 	mov.w	ip, #1
 8000cf8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000cfc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d00:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d08:	bf18      	it	ne
 8000d0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d0e:	d011      	beq.n	8000d34 <__cmpsf2+0x40>
 8000d10:	b001      	add	sp, #4
 8000d12:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d16:	bf18      	it	ne
 8000d18:	ea90 0f01 	teqne	r0, r1
 8000d1c:	bf58      	it	pl
 8000d1e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d22:	bf88      	it	hi
 8000d24:	17c8      	asrhi	r0, r1, #31
 8000d26:	bf38      	it	cc
 8000d28:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d2c:	bf18      	it	ne
 8000d2e:	f040 0001 	orrne.w	r0, r0, #1
 8000d32:	4770      	bx	lr
 8000d34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d38:	d102      	bne.n	8000d40 <__cmpsf2+0x4c>
 8000d3a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d3e:	d105      	bne.n	8000d4c <__cmpsf2+0x58>
 8000d40:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d44:	d1e4      	bne.n	8000d10 <__cmpsf2+0x1c>
 8000d46:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d4a:	d0e1      	beq.n	8000d10 <__cmpsf2+0x1c>
 8000d4c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <__aeabi_cfrcmple>:
 8000d54:	4684      	mov	ip, r0
 8000d56:	4608      	mov	r0, r1
 8000d58:	4661      	mov	r1, ip
 8000d5a:	e7ff      	b.n	8000d5c <__aeabi_cfcmpeq>

08000d5c <__aeabi_cfcmpeq>:
 8000d5c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000d5e:	f7ff ffc9 	bl	8000cf4 <__cmpsf2>
 8000d62:	2800      	cmp	r0, #0
 8000d64:	bf48      	it	mi
 8000d66:	f110 0f00 	cmnmi.w	r0, #0
 8000d6a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d6c <__aeabi_fcmpeq>:
 8000d6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d70:	f7ff fff4 	bl	8000d5c <__aeabi_cfcmpeq>
 8000d74:	bf0c      	ite	eq
 8000d76:	2001      	moveq	r0, #1
 8000d78:	2000      	movne	r0, #0
 8000d7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d7e:	bf00      	nop

08000d80 <__aeabi_fcmplt>:
 8000d80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d84:	f7ff ffea 	bl	8000d5c <__aeabi_cfcmpeq>
 8000d88:	bf34      	ite	cc
 8000d8a:	2001      	movcc	r0, #1
 8000d8c:	2000      	movcs	r0, #0
 8000d8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d92:	bf00      	nop

08000d94 <__aeabi_fcmple>:
 8000d94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d98:	f7ff ffe0 	bl	8000d5c <__aeabi_cfcmpeq>
 8000d9c:	bf94      	ite	ls
 8000d9e:	2001      	movls	r0, #1
 8000da0:	2000      	movhi	r0, #0
 8000da2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000da6:	bf00      	nop

08000da8 <__aeabi_fcmpge>:
 8000da8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dac:	f7ff ffd2 	bl	8000d54 <__aeabi_cfrcmple>
 8000db0:	bf94      	ite	ls
 8000db2:	2001      	movls	r0, #1
 8000db4:	2000      	movhi	r0, #0
 8000db6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dba:	bf00      	nop

08000dbc <__aeabi_fcmpgt>:
 8000dbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dc0:	f7ff ffc8 	bl	8000d54 <__aeabi_cfrcmple>
 8000dc4:	bf34      	ite	cc
 8000dc6:	2001      	movcc	r0, #1
 8000dc8:	2000      	movcs	r0, #0
 8000dca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dce:	bf00      	nop

08000dd0 <__aeabi_f2iz>:
 8000dd0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000dd4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000dd8:	d30f      	bcc.n	8000dfa <__aeabi_f2iz+0x2a>
 8000dda:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000dde:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000de2:	d90d      	bls.n	8000e00 <__aeabi_f2iz+0x30>
 8000de4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000de8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000dec:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000df0:	fa23 f002 	lsr.w	r0, r3, r2
 8000df4:	bf18      	it	ne
 8000df6:	4240      	negne	r0, r0
 8000df8:	4770      	bx	lr
 8000dfa:	f04f 0000 	mov.w	r0, #0
 8000dfe:	4770      	bx	lr
 8000e00:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000e04:	d101      	bne.n	8000e0a <__aeabi_f2iz+0x3a>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	d105      	bne.n	8000e16 <__aeabi_f2iz+0x46>
 8000e0a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000e0e:	bf08      	it	eq
 8000e10:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000e14:	4770      	bx	lr
 8000e16:	f04f 0000 	mov.w	r0, #0
 8000e1a:	4770      	bx	lr

08000e1c <__aeabi_f2uiz>:
 8000e1c:	0042      	lsls	r2, r0, #1
 8000e1e:	d20e      	bcs.n	8000e3e <__aeabi_f2uiz+0x22>
 8000e20:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000e24:	d30b      	bcc.n	8000e3e <__aeabi_f2uiz+0x22>
 8000e26:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000e2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e2e:	d409      	bmi.n	8000e44 <__aeabi_f2uiz+0x28>
 8000e30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e34:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000e38:	fa23 f002 	lsr.w	r0, r3, r2
 8000e3c:	4770      	bx	lr
 8000e3e:	f04f 0000 	mov.w	r0, #0
 8000e42:	4770      	bx	lr
 8000e44:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000e48:	d101      	bne.n	8000e4e <__aeabi_f2uiz+0x32>
 8000e4a:	0242      	lsls	r2, r0, #9
 8000e4c:	d102      	bne.n	8000e54 <__aeabi_f2uiz+0x38>
 8000e4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e52:	4770      	bx	lr
 8000e54:	f04f 0000 	mov.w	r0, #0
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <ADC1_Select_CH4>:
#include "adc_manager.h"
#include "main.h"

void ADC1_Select_CH4(void){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_4;
 8000e6c:	2304      	movs	r3, #4
 8000e6e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e70:	2301      	movs	r3, #1
 8000e72:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000e74:	2301      	movs	r3, #1
 8000e76:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4805      	ldr	r0, [pc, #20]	@ (8000e94 <ADC1_Select_CH4+0x38>)
 8000e7e:	f001 faa7 	bl	80023d0 <HAL_ADC_ConfigChannel>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <ADC1_Select_CH4+0x30>
	{
		Error_Handler();
 8000e88:	f000 fc32 	bl	80016f0 <Error_Handler>
	}
}
 8000e8c:	bf00      	nop
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000030 	.word	0x20000030

08000e98 <ADC1_Select_CH5>:
void ADC1_Select_CH5(void){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000e9e:	1d3b      	adds	r3, r7, #4
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_5;
 8000ea8:	2305      	movs	r3, #5
 8000eaa:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eac:	2301      	movs	r3, #1
 8000eae:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4805      	ldr	r0, [pc, #20]	@ (8000ed0 <ADC1_Select_CH5+0x38>)
 8000eba:	f001 fa89 	bl	80023d0 <HAL_ADC_ConfigChannel>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <ADC1_Select_CH5+0x30>
	{
		Error_Handler();
 8000ec4:	f000 fc14 	bl	80016f0 <Error_Handler>
	}
}
 8000ec8:	bf00      	nop
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000030 	.word	0x20000030

08000ed4 <ADC1_Select_CH8>:
void ADC1_Select_CH8(void){
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_8;
 8000ee4:	2308      	movs	r3, #8
 8000ee6:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000eec:	2301      	movs	r3, #1
 8000eee:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ef0:	1d3b      	adds	r3, r7, #4
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4805      	ldr	r0, [pc, #20]	@ (8000f0c <ADC1_Select_CH8+0x38>)
 8000ef6:	f001 fa6b 	bl	80023d0 <HAL_ADC_ConfigChannel>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <ADC1_Select_CH8+0x30>
	{
		Error_Handler();
 8000f00:	f000 fbf6 	bl	80016f0 <Error_Handler>
	}
}
 8000f04:	bf00      	nop
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000030 	.word	0x20000030

08000f10 <ADC1_Select_CH9>:
void ADC1_Select_CH9(void){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_9;
 8000f20:	2309      	movs	r3, #9
 8000f22:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f24:	2301      	movs	r3, #1
 8000f26:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4805      	ldr	r0, [pc, #20]	@ (8000f48 <ADC1_Select_CH9+0x38>)
 8000f32:	f001 fa4d 	bl	80023d0 <HAL_ADC_ConfigChannel>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <ADC1_Select_CH9+0x30>
	{
		Error_Handler();
 8000f3c:	f000 fbd8 	bl	80016f0 <Error_Handler>
	}
}
 8000f40:	bf00      	nop
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000030 	.word	0x20000030

08000f4c <measure_dist>:
#include <stdint.h>
#include "distance.h"
#include "main.h"
#include "adc_manager.h"

uint16_t measure_dist(dist_t dist){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
	uint16_t emitter_pin;
	GPIO_TypeDef* receiver_port;
	uint16_t receiver_pin;

	//switch case to change emitter/receiver pair
	switch(dist) {
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	2b03      	cmp	r3, #3
 8000f5a:	d83a      	bhi.n	8000fd2 <measure_dist+0x86>
 8000f5c:	a201      	add	r2, pc, #4	@ (adr r2, 8000f64 <measure_dist+0x18>)
 8000f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f62:	bf00      	nop
 8000f64:	08000f75 	.word	0x08000f75
 8000f68:	08000f8d 	.word	0x08000f8d
 8000f6c:	08000fbb 	.word	0x08000fbb
 8000f70:	08000fa3 	.word	0x08000fa3
		case DIST_FL:
			emitter_port = EMIT_FL_GPIO_Port;
 8000f74:	4b28      	ldr	r3, [pc, #160]	@ (8001018 <measure_dist+0xcc>)
 8000f76:	617b      	str	r3, [r7, #20]
			emitter_pin = EMIT_FL_Pin;
 8000f78:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000f7c:	827b      	strh	r3, [r7, #18]
			receiver_port = REC_FL_GPIO_Port;
 8000f7e:	4b26      	ldr	r3, [pc, #152]	@ (8001018 <measure_dist+0xcc>)
 8000f80:	60fb      	str	r3, [r7, #12]
			receiver_pin = REC_FL_Pin;
 8000f82:	2301      	movs	r3, #1
 8000f84:	817b      	strh	r3, [r7, #10]
			ADC1_Select_CH8();
 8000f86:	f7ff ffa5 	bl	8000ed4 <ADC1_Select_CH8>
			break;
 8000f8a:	e023      	b.n	8000fd4 <measure_dist+0x88>
		case DIST_FR:
			emitter_port = EMIT_FR_GPIO_Port;
 8000f8c:	4b22      	ldr	r3, [pc, #136]	@ (8001018 <measure_dist+0xcc>)
 8000f8e:	617b      	str	r3, [r7, #20]
			emitter_pin = EMIT_FR_Pin;
 8000f90:	2320      	movs	r3, #32
 8000f92:	827b      	strh	r3, [r7, #18]
			receiver_port = REC_FR_GPIO_Port;
 8000f94:	4b21      	ldr	r3, [pc, #132]	@ (800101c <measure_dist+0xd0>)
 8000f96:	60fb      	str	r3, [r7, #12]
			receiver_pin = REC_FR_Pin;
 8000f98:	2310      	movs	r3, #16
 8000f9a:	817b      	strh	r3, [r7, #10]
			ADC1_Select_CH4();
 8000f9c:	f7ff ff5e 	bl	8000e5c <ADC1_Select_CH4>
			break;
 8000fa0:	e018      	b.n	8000fd4 <measure_dist+0x88>
		case DIST_SR:
			emitter_port = EMIT_SR_GPIO_Port;
 8000fa2:	4b1d      	ldr	r3, [pc, #116]	@ (8001018 <measure_dist+0xcc>)
 8000fa4:	617b      	str	r3, [r7, #20]
			emitter_pin = EMIT_SR_Pin;
 8000fa6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000faa:	827b      	strh	r3, [r7, #18]
			receiver_port = REC_SR_GPIO_Port;
 8000fac:	4b1b      	ldr	r3, [pc, #108]	@ (800101c <measure_dist+0xd0>)
 8000fae:	60fb      	str	r3, [r7, #12]
			receiver_pin = REC_SR_Pin;
 8000fb0:	2320      	movs	r3, #32
 8000fb2:	817b      	strh	r3, [r7, #10]
			ADC1_Select_CH5();
 8000fb4:	f7ff ff70 	bl	8000e98 <ADC1_Select_CH5>
			break;
 8000fb8:	e00c      	b.n	8000fd4 <measure_dist+0x88>
		case DIST_SL:
			emitter_port = EMIT_SL_GPIO_Port;
 8000fba:	4b17      	ldr	r3, [pc, #92]	@ (8001018 <measure_dist+0xcc>)
 8000fbc:	617b      	str	r3, [r7, #20]
			emitter_pin = EMIT_SL_Pin;
 8000fbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fc2:	827b      	strh	r3, [r7, #18]
			receiver_port = REC_SL_GPIO_Port;
 8000fc4:	4b14      	ldr	r3, [pc, #80]	@ (8001018 <measure_dist+0xcc>)
 8000fc6:	60fb      	str	r3, [r7, #12]
			receiver_pin = REC_SL_Pin;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	817b      	strh	r3, [r7, #10]
			ADC1_Select_CH9();
 8000fcc:	f7ff ffa0 	bl	8000f10 <ADC1_Select_CH9>
			break;
 8000fd0:	e000      	b.n	8000fd4 <measure_dist+0x88>
		default:
			break;
 8000fd2:	bf00      	nop
	}

	HAL_GPIO_WritePin(emitter_port, emitter_pin, GPIO_PIN_SET);
 8000fd4:	8a7b      	ldrh	r3, [r7, #18]
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	4619      	mov	r1, r3
 8000fda:	6978      	ldr	r0, [r7, #20]
 8000fdc:	f001 fe1e 	bl	8002c1c <HAL_GPIO_WritePin>
//	HAL_Delay(5);

	HAL_ADC_Start(&hadc1);
 8000fe0:	480f      	ldr	r0, [pc, #60]	@ (8001020 <measure_dist+0xd4>)
 8000fe2:	f001 f809 	bl	8001ff8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000fe6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000fea:	480d      	ldr	r0, [pc, #52]	@ (8001020 <measure_dist+0xd4>)
 8000fec:	f001 f8de 	bl	80021ac <HAL_ADC_PollForConversion>
	uint16_t adc_val = HAL_ADC_GetValue(&hadc1);
 8000ff0:	480b      	ldr	r0, [pc, #44]	@ (8001020 <measure_dist+0xd4>)
 8000ff2:	f001 f9e1 	bl	80023b8 <HAL_ADC_GetValue>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	813b      	strh	r3, [r7, #8]
	HAL_ADC_Stop(&hadc1);
 8000ffa:	4809      	ldr	r0, [pc, #36]	@ (8001020 <measure_dist+0xd4>)
 8000ffc:	f001 f8aa 	bl	8002154 <HAL_ADC_Stop>

	HAL_GPIO_WritePin(emitter_port, emitter_pin, GPIO_PIN_RESET);
 8001000:	8a7b      	ldrh	r3, [r7, #18]
 8001002:	2200      	movs	r2, #0
 8001004:	4619      	mov	r1, r3
 8001006:	6978      	ldr	r0, [r7, #20]
 8001008:	f001 fe08 	bl	8002c1c <HAL_GPIO_WritePin>

	return adc_val;
 800100c:	893b      	ldrh	r3, [r7, #8]
}
 800100e:	4618      	mov	r0, r3
 8001010:	3718      	adds	r7, #24
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40010c00 	.word	0x40010c00
 800101c:	40010800 	.word	0x40010800
 8001020:	20000030 	.word	0x20000030

08001024 <HAL_TIM_IC_CaptureCallback>:
uint16_t encL = 0, encR = 0; //counter for left and right encoder value
uint16_t prevEncL = 0, prevEncR = 0; // counter for previous left and right encoder values
float encLmm, encRmm;	// distance traveled in mm
int16_t dL, dR;		// change in ticks traveled since last update

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 //left encoder timer
	if (htim->Instance == TIM3){
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a2f      	ldr	r2, [pc, #188]	@ (80010f0 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d129      	bne.n	800108a <HAL_TIM_IC_CaptureCallback+0x66>
		encL = __HAL_TIM_GET_COUNTER(htim);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800103c:	b29a      	uxth	r2, r3
 800103e:	4b2d      	ldr	r3, [pc, #180]	@ (80010f4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001040:	801a      	strh	r2, [r3, #0]
		dL = (int16_t)(prevEncL - encL);
 8001042:	4b2d      	ldr	r3, [pc, #180]	@ (80010f8 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8001044:	881a      	ldrh	r2, [r3, #0]
 8001046:	4b2b      	ldr	r3, [pc, #172]	@ (80010f4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001048:	881b      	ldrh	r3, [r3, #0]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	b29b      	uxth	r3, r3
 800104e:	b21a      	sxth	r2, r3
 8001050:	4b2a      	ldr	r3, [pc, #168]	@ (80010fc <HAL_TIM_IC_CaptureCallback+0xd8>)
 8001052:	801a      	strh	r2, [r3, #0]
		encLmm += dL / tickConvertL;		// every 5.74125 ticks is 1 mm
 8001054:	4b29      	ldr	r3, [pc, #164]	@ (80010fc <HAL_TIM_IC_CaptureCallback+0xd8>)
 8001056:	f9b3 3000 	ldrsh.w	r3, [r3]
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fc9e 	bl	800099c <__aeabi_i2f>
 8001060:	4603      	mov	r3, r0
 8001062:	4927      	ldr	r1, [pc, #156]	@ (8001100 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff fda1 	bl	8000bac <__aeabi_fdiv>
 800106a:	4603      	mov	r3, r0
 800106c:	461a      	mov	r2, r3
 800106e:	4b25      	ldr	r3, [pc, #148]	@ (8001104 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4619      	mov	r1, r3
 8001074:	4610      	mov	r0, r2
 8001076:	f7ff fbdd 	bl	8000834 <__addsf3>
 800107a:	4603      	mov	r3, r0
 800107c:	461a      	mov	r2, r3
 800107e:	4b21      	ldr	r3, [pc, #132]	@ (8001104 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8001080:	601a      	str	r2, [r3, #0]
		prevEncL = encL;
 8001082:	4b1c      	ldr	r3, [pc, #112]	@ (80010f4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001084:	881a      	ldrh	r2, [r3, #0]
 8001086:	4b1c      	ldr	r3, [pc, #112]	@ (80010f8 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8001088:	801a      	strh	r2, [r3, #0]
	}

	if (htim->Instance == TIM4) {
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a1e      	ldr	r2, [pc, #120]	@ (8001108 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d129      	bne.n	80010e8 <HAL_TIM_IC_CaptureCallback+0xc4>
		encR = __HAL_TIM_GET_COUNTER(htim);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800109a:	b29a      	uxth	r2, r3
 800109c:	4b1b      	ldr	r3, [pc, #108]	@ (800110c <HAL_TIM_IC_CaptureCallback+0xe8>)
 800109e:	801a      	strh	r2, [r3, #0]
		dR = (int16_t)(prevEncR - encR);
 80010a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001110 <HAL_TIM_IC_CaptureCallback+0xec>)
 80010a2:	881a      	ldrh	r2, [r3, #0]
 80010a4:	4b19      	ldr	r3, [pc, #100]	@ (800110c <HAL_TIM_IC_CaptureCallback+0xe8>)
 80010a6:	881b      	ldrh	r3, [r3, #0]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	4b19      	ldr	r3, [pc, #100]	@ (8001114 <HAL_TIM_IC_CaptureCallback+0xf0>)
 80010b0:	801a      	strh	r2, [r3, #0]
		encRmm += dR / tickConvertR;	//every 2.90833 ticks is 1mm
 80010b2:	4b18      	ldr	r3, [pc, #96]	@ (8001114 <HAL_TIM_IC_CaptureCallback+0xf0>)
 80010b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fc6f 	bl	800099c <__aeabi_i2f>
 80010be:	4603      	mov	r3, r0
 80010c0:	4915      	ldr	r1, [pc, #84]	@ (8001118 <HAL_TIM_IC_CaptureCallback+0xf4>)
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fd72 	bl	8000bac <__aeabi_fdiv>
 80010c8:	4603      	mov	r3, r0
 80010ca:	461a      	mov	r2, r3
 80010cc:	4b13      	ldr	r3, [pc, #76]	@ (800111c <HAL_TIM_IC_CaptureCallback+0xf8>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4619      	mov	r1, r3
 80010d2:	4610      	mov	r0, r2
 80010d4:	f7ff fbae 	bl	8000834 <__addsf3>
 80010d8:	4603      	mov	r3, r0
 80010da:	461a      	mov	r2, r3
 80010dc:	4b0f      	ldr	r3, [pc, #60]	@ (800111c <HAL_TIM_IC_CaptureCallback+0xf8>)
 80010de:	601a      	str	r2, [r3, #0]
		prevEncR = encR;
 80010e0:	4b0a      	ldr	r3, [pc, #40]	@ (800110c <HAL_TIM_IC_CaptureCallback+0xe8>)
 80010e2:	881a      	ldrh	r2, [r3, #0]
 80010e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001110 <HAL_TIM_IC_CaptureCallback+0xec>)
 80010e6:	801a      	strh	r2, [r3, #0]
	}
}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40000400 	.word	0x40000400
 80010f4:	20000140 	.word	0x20000140
 80010f8:	20000144 	.word	0x20000144
 80010fc:	20000150 	.word	0x20000150
 8001100:	40b7b852 	.word	0x40b7b852
 8001104:	20000148 	.word	0x20000148
 8001108:	40000800 	.word	0x40000800
 800110c:	20000142 	.word	0x20000142
 8001110:	20000146 	.word	0x20000146
 8001114:	20000152 	.word	0x20000152
 8001118:	403a2214 	.word	0x403a2214
 800111c:	2000014c 	.word	0x2000014c

08001120 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001124:	f000 fe0a 	bl	8001d3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001128:	f000 f83a 	bl	80011a0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_GPIO_Init();
 800112c:	f000 f9fc 	bl	8001528 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001130:	f000 f8d0 	bl	80012d4 <MX_TIM2_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001134:	f000 f9f8 	bl	8001528 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001138:	f000 f8cc 	bl	80012d4 <MX_TIM2_Init>
  MX_ADC1_Init();
 800113c:	f000 f88c 	bl	8001258 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001140:	f000 f94a 	bl	80013d8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001144:	f000 f99c 	bl	8001480 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  //start motors
  //question: are we in interrupt mode? do we need it? how to do it?
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001148:	2108      	movs	r1, #8
 800114a:	4810      	ldr	r0, [pc, #64]	@ (800118c <main+0x6c>)
 800114c:	f002 fbfa 	bl	8003944 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001150:	210c      	movs	r1, #12
 8001152:	480e      	ldr	r0, [pc, #56]	@ (800118c <main+0x6c>)
 8001154:	f002 fbf6 	bl	8003944 <HAL_TIM_PWM_Start>

  //start left encoder
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8001158:	213c      	movs	r1, #60	@ 0x3c
 800115a:	480d      	ldr	r0, [pc, #52]	@ (8001190 <main+0x70>)
 800115c:	f002 fd36 	bl	8003bcc <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8001160:	213c      	movs	r1, #60	@ 0x3c
 8001162:	480c      	ldr	r0, [pc, #48]	@ (8001194 <main+0x74>)
 8001164:	f002 fd32 	bl	8003bcc <HAL_TIM_Encoder_Start_IT>

  HAL_TIM_Base_Start_IT(&htim2);
 8001168:	4808      	ldr	r0, [pc, #32]	@ (800118c <main+0x6c>)
 800116a:	f002 fb41 	bl	80037f0 <HAL_TIM_Base_Start_IT>

//  turn180();
  move_dist(200);
 800116e:	480a      	ldr	r0, [pc, #40]	@ (8001198 <main+0x78>)
 8001170:	f000 fb44 	bl	80017fc <move_dist>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001174:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001178:	4808      	ldr	r0, [pc, #32]	@ (800119c <main+0x7c>)
 800117a:	f001 fd67 	bl	8002c4c <HAL_GPIO_TogglePin>
	  HAL_Delay(2000);
 800117e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001182:	f000 fe3d 	bl	8001e00 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001186:	bf00      	nop
 8001188:	e7f4      	b.n	8001174 <main+0x54>
 800118a:	bf00      	nop
 800118c:	20000060 	.word	0x20000060
 8001190:	200000a8 	.word	0x200000a8
 8001194:	200000f0 	.word	0x200000f0
 8001198:	43480000 	.word	0x43480000
 800119c:	40011000 	.word	0x40011000

080011a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b094      	sub	sp, #80	@ 0x50
 80011a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011aa:	2228      	movs	r2, #40	@ 0x28
 80011ac:	2100      	movs	r1, #0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f003 fb6e 	bl	8004890 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011d0:	2301      	movs	r3, #1
 80011d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011da:	2300      	movs	r3, #0
 80011dc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011de:	2301      	movs	r3, #1
 80011e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e2:	2302      	movs	r3, #2
 80011e4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011ec:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80011f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011f6:	4618      	mov	r0, r3
 80011f8:	f001 fd42 	bl	8002c80 <HAL_RCC_OscConfig>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001202:	f000 fa75 	bl	80016f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001206:	230f      	movs	r3, #15
 8001208:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800120a:	2302      	movs	r3, #2
 800120c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001212:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001216:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001218:	2300      	movs	r3, #0
 800121a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	2102      	movs	r1, #2
 8001222:	4618      	mov	r0, r3
 8001224:	f001 ffae 	bl	8003184 <HAL_RCC_ClockConfig>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800122e:	f000 fa5f 	bl	80016f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001232:	2302      	movs	r3, #2
 8001234:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001236:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800123a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	4618      	mov	r0, r3
 8001240:	f002 f91a 	bl	8003478 <HAL_RCCEx_PeriphCLKConfig>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800124a:	f000 fa51 	bl	80016f0 <Error_Handler>
  }
}
 800124e:	bf00      	nop
 8001250:	3750      	adds	r7, #80	@ 0x50
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
	...

08001258 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001268:	4b18      	ldr	r3, [pc, #96]	@ (80012cc <MX_ADC1_Init+0x74>)
 800126a:	4a19      	ldr	r2, [pc, #100]	@ (80012d0 <MX_ADC1_Init+0x78>)
 800126c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800126e:	4b17      	ldr	r3, [pc, #92]	@ (80012cc <MX_ADC1_Init+0x74>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001274:	4b15      	ldr	r3, [pc, #84]	@ (80012cc <MX_ADC1_Init+0x74>)
 8001276:	2200      	movs	r2, #0
 8001278:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800127a:	4b14      	ldr	r3, [pc, #80]	@ (80012cc <MX_ADC1_Init+0x74>)
 800127c:	2200      	movs	r2, #0
 800127e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001280:	4b12      	ldr	r3, [pc, #72]	@ (80012cc <MX_ADC1_Init+0x74>)
 8001282:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001286:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001288:	4b10      	ldr	r3, [pc, #64]	@ (80012cc <MX_ADC1_Init+0x74>)
 800128a:	2200      	movs	r2, #0
 800128c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800128e:	4b0f      	ldr	r3, [pc, #60]	@ (80012cc <MX_ADC1_Init+0x74>)
 8001290:	2201      	movs	r2, #1
 8001292:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001294:	480d      	ldr	r0, [pc, #52]	@ (80012cc <MX_ADC1_Init+0x74>)
 8001296:	f000 fdd7 	bl	8001e48 <HAL_ADC_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80012a0:	f000 fa26 	bl	80016f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012a4:	2301      	movs	r3, #1
 80012a6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012a8:	2301      	movs	r3, #1
 80012aa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80012ac:	2300      	movs	r3, #0
 80012ae:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012b0:	1d3b      	adds	r3, r7, #4
 80012b2:	4619      	mov	r1, r3
 80012b4:	4805      	ldr	r0, [pc, #20]	@ (80012cc <MX_ADC1_Init+0x74>)
 80012b6:	f001 f88b 	bl	80023d0 <HAL_ADC_ConfigChannel>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80012c0:	f000 fa16 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012c4:	bf00      	nop
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000030 	.word	0x20000030
 80012d0:	40012400 	.word	0x40012400

080012d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08e      	sub	sp, #56	@ 0x38
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e8:	f107 0320 	add.w	r3, r7, #32
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
 8001300:	615a      	str	r2, [r3, #20]
 8001302:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001304:	4b33      	ldr	r3, [pc, #204]	@ (80013d4 <MX_TIM2_Init+0x100>)
 8001306:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800130a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 800130c:	4b31      	ldr	r3, [pc, #196]	@ (80013d4 <MX_TIM2_Init+0x100>)
 800130e:	2248      	movs	r2, #72	@ 0x48
 8001310:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001312:	4b30      	ldr	r3, [pc, #192]	@ (80013d4 <MX_TIM2_Init+0x100>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001318:	4b2e      	ldr	r3, [pc, #184]	@ (80013d4 <MX_TIM2_Init+0x100>)
 800131a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800131e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001320:	4b2c      	ldr	r3, [pc, #176]	@ (80013d4 <MX_TIM2_Init+0x100>)
 8001322:	2200      	movs	r2, #0
 8001324:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001326:	4b2b      	ldr	r3, [pc, #172]	@ (80013d4 <MX_TIM2_Init+0x100>)
 8001328:	2280      	movs	r2, #128	@ 0x80
 800132a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800132c:	4829      	ldr	r0, [pc, #164]	@ (80013d4 <MX_TIM2_Init+0x100>)
 800132e:	f002 fa0f 	bl	8003750 <HAL_TIM_Base_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001338:	f000 f9da 	bl	80016f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800133c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001340:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001342:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001346:	4619      	mov	r1, r3
 8001348:	4822      	ldr	r0, [pc, #136]	@ (80013d4 <MX_TIM2_Init+0x100>)
 800134a:	f002 fe9f 	bl	800408c <HAL_TIM_ConfigClockSource>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001354:	f000 f9cc 	bl	80016f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001358:	481e      	ldr	r0, [pc, #120]	@ (80013d4 <MX_TIM2_Init+0x100>)
 800135a:	f002 fa9b 	bl	8003894 <HAL_TIM_PWM_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001364:	f000 f9c4 	bl	80016f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001368:	2300      	movs	r3, #0
 800136a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800136c:	2300      	movs	r3, #0
 800136e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001370:	f107 0320 	add.w	r3, r7, #32
 8001374:	4619      	mov	r1, r3
 8001376:	4817      	ldr	r0, [pc, #92]	@ (80013d4 <MX_TIM2_Init+0x100>)
 8001378:	f003 fa1a 	bl	80047b0 <HAL_TIMEx_MasterConfigSynchronization>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001382:	f000 f9b5 	bl	80016f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001386:	2360      	movs	r3, #96	@ 0x60
 8001388:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 800138a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800138e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	2208      	movs	r2, #8
 800139c:	4619      	mov	r1, r3
 800139e:	480d      	ldr	r0, [pc, #52]	@ (80013d4 <MX_TIM2_Init+0x100>)
 80013a0:	f002 fdb2 	bl	8003f08 <HAL_TIM_PWM_ConfigChannel>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80013aa:	f000 f9a1 	bl	80016f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	220c      	movs	r2, #12
 80013b2:	4619      	mov	r1, r3
 80013b4:	4807      	ldr	r0, [pc, #28]	@ (80013d4 <MX_TIM2_Init+0x100>)
 80013b6:	f002 fda7 	bl	8003f08 <HAL_TIM_PWM_ConfigChannel>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80013c0:	f000 f996 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013c4:	4803      	ldr	r0, [pc, #12]	@ (80013d4 <MX_TIM2_Init+0x100>)
 80013c6:	f000 fc13 	bl	8001bf0 <HAL_TIM_MspPostInit>

}
 80013ca:	bf00      	nop
 80013cc:	3738      	adds	r7, #56	@ 0x38
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000060 	.word	0x20000060

080013d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08c      	sub	sp, #48	@ 0x30
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013de:	f107 030c 	add.w	r3, r7, #12
 80013e2:	2224      	movs	r2, #36	@ 0x24
 80013e4:	2100      	movs	r1, #0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f003 fa52 	bl	8004890 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013f4:	4b20      	ldr	r3, [pc, #128]	@ (8001478 <MX_TIM3_Init+0xa0>)
 80013f6:	4a21      	ldr	r2, [pc, #132]	@ (800147c <MX_TIM3_Init+0xa4>)
 80013f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001478 <MX_TIM3_Init+0xa0>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001400:	4b1d      	ldr	r3, [pc, #116]	@ (8001478 <MX_TIM3_Init+0xa0>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001406:	4b1c      	ldr	r3, [pc, #112]	@ (8001478 <MX_TIM3_Init+0xa0>)
 8001408:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800140c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800140e:	4b1a      	ldr	r3, [pc, #104]	@ (8001478 <MX_TIM3_Init+0xa0>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001414:	4b18      	ldr	r3, [pc, #96]	@ (8001478 <MX_TIM3_Init+0xa0>)
 8001416:	2200      	movs	r2, #0
 8001418:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800141a:	2303      	movs	r3, #3
 800141c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800141e:	2302      	movs	r3, #2
 8001420:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001422:	2301      	movs	r3, #1
 8001424:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001426:	2300      	movs	r3, #0
 8001428:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800142e:	2302      	movs	r3, #2
 8001430:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001432:	2301      	movs	r3, #1
 8001434:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001436:	2300      	movs	r3, #0
 8001438:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800143a:	2300      	movs	r3, #0
 800143c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800143e:	f107 030c 	add.w	r3, r7, #12
 8001442:	4619      	mov	r1, r3
 8001444:	480c      	ldr	r0, [pc, #48]	@ (8001478 <MX_TIM3_Init+0xa0>)
 8001446:	f002 fb1f 	bl	8003a88 <HAL_TIM_Encoder_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001450:	f000 f94e 	bl	80016f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001454:	2300      	movs	r3, #0
 8001456:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001458:	2300      	movs	r3, #0
 800145a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	4619      	mov	r1, r3
 8001460:	4805      	ldr	r0, [pc, #20]	@ (8001478 <MX_TIM3_Init+0xa0>)
 8001462:	f003 f9a5 	bl	80047b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800146c:	f000 f940 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001470:	bf00      	nop
 8001472:	3730      	adds	r7, #48	@ 0x30
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	200000a8 	.word	0x200000a8
 800147c:	40000400 	.word	0x40000400

08001480 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08c      	sub	sp, #48	@ 0x30
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001486:	f107 030c 	add.w	r3, r7, #12
 800148a:	2224      	movs	r2, #36	@ 0x24
 800148c:	2100      	movs	r1, #0
 800148e:	4618      	mov	r0, r3
 8001490:	f003 f9fe 	bl	8004890 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001494:	1d3b      	adds	r3, r7, #4
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800149c:	4b20      	ldr	r3, [pc, #128]	@ (8001520 <MX_TIM4_Init+0xa0>)
 800149e:	4a21      	ldr	r2, [pc, #132]	@ (8001524 <MX_TIM4_Init+0xa4>)
 80014a0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80014a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001520 <MX_TIM4_Init+0xa0>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001520 <MX_TIM4_Init+0xa0>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80014ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001520 <MX_TIM4_Init+0xa0>)
 80014b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014b4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001520 <MX_TIM4_Init+0xa0>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014bc:	4b18      	ldr	r3, [pc, #96]	@ (8001520 <MX_TIM4_Init+0xa0>)
 80014be:	2200      	movs	r2, #0
 80014c0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80014c2:	2301      	movs	r3, #1
 80014c4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80014c6:	2302      	movs	r3, #2
 80014c8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014ca:	2301      	movs	r3, #1
 80014cc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80014d6:	2302      	movs	r3, #2
 80014d8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014da:	2301      	movs	r3, #1
 80014dc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014de:	2300      	movs	r3, #0
 80014e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80014e6:	f107 030c 	add.w	r3, r7, #12
 80014ea:	4619      	mov	r1, r3
 80014ec:	480c      	ldr	r0, [pc, #48]	@ (8001520 <MX_TIM4_Init+0xa0>)
 80014ee:	f002 facb 	bl	8003a88 <HAL_TIM_Encoder_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80014f8:	f000 f8fa 	bl	80016f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014fc:	2300      	movs	r3, #0
 80014fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001500:	2300      	movs	r3, #0
 8001502:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	4619      	mov	r1, r3
 8001508:	4805      	ldr	r0, [pc, #20]	@ (8001520 <MX_TIM4_Init+0xa0>)
 800150a:	f003 f951 	bl	80047b0 <HAL_TIMEx_MasterConfigSynchronization>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001514:	f000 f8ec 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001518:	bf00      	nop
 800151a:	3730      	adds	r7, #48	@ 0x30
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	200000f0 	.word	0x200000f0
 8001524:	40000800 	.word	0x40000800

08001528 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152e:	f107 0310 	add.w	r3, r7, #16
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800153c:	4b52      	ldr	r3, [pc, #328]	@ (8001688 <MX_GPIO_Init+0x160>)
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	4a51      	ldr	r2, [pc, #324]	@ (8001688 <MX_GPIO_Init+0x160>)
 8001542:	f043 0310 	orr.w	r3, r3, #16
 8001546:	6193      	str	r3, [r2, #24]
 8001548:	4b4f      	ldr	r3, [pc, #316]	@ (8001688 <MX_GPIO_Init+0x160>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	f003 0310 	and.w	r3, r3, #16
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001554:	4b4c      	ldr	r3, [pc, #304]	@ (8001688 <MX_GPIO_Init+0x160>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	4a4b      	ldr	r2, [pc, #300]	@ (8001688 <MX_GPIO_Init+0x160>)
 800155a:	f043 0320 	orr.w	r3, r3, #32
 800155e:	6193      	str	r3, [r2, #24]
 8001560:	4b49      	ldr	r3, [pc, #292]	@ (8001688 <MX_GPIO_Init+0x160>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	f003 0320 	and.w	r3, r3, #32
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800156c:	4b46      	ldr	r3, [pc, #280]	@ (8001688 <MX_GPIO_Init+0x160>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	4a45      	ldr	r2, [pc, #276]	@ (8001688 <MX_GPIO_Init+0x160>)
 8001572:	f043 0304 	orr.w	r3, r3, #4
 8001576:	6193      	str	r3, [r2, #24]
 8001578:	4b43      	ldr	r3, [pc, #268]	@ (8001688 <MX_GPIO_Init+0x160>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001584:	4b40      	ldr	r3, [pc, #256]	@ (8001688 <MX_GPIO_Init+0x160>)
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	4a3f      	ldr	r2, [pc, #252]	@ (8001688 <MX_GPIO_Init+0x160>)
 800158a:	f043 0308 	orr.w	r3, r3, #8
 800158e:	6193      	str	r3, [r2, #24]
 8001590:	4b3d      	ldr	r3, [pc, #244]	@ (8001688 <MX_GPIO_Init+0x160>)
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	f003 0308 	and.w	r3, r3, #8
 8001598:	603b      	str	r3, [r7, #0]
 800159a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800159c:	2200      	movs	r2, #0
 800159e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015a2:	483a      	ldr	r0, [pc, #232]	@ (800168c <MX_GPIO_Init+0x164>)
 80015a4:	f001 fb3a 	bl	8002c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BLE_STATE_Pin|ML_FWD_Pin|LED_RED_Pin|LED_BLUE_Pin
 80015a8:	2200      	movs	r2, #0
 80015aa:	f649 1101 	movw	r1, #39169	@ 0x9901
 80015ae:	4838      	ldr	r0, [pc, #224]	@ (8001690 <MX_GPIO_Init+0x168>)
 80015b0:	f001 fb34 	bl	8002c1c <HAL_GPIO_WritePin>
                          |LED_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EMIT_SR_Pin|EMIT_FL_Pin|EMIT_SL_Pin|MR_FWD_Pin
 80015b4:	2200      	movs	r2, #0
 80015b6:	f64f 5128 	movw	r1, #64808	@ 0xfd28
 80015ba:	4836      	ldr	r0, [pc, #216]	@ (8001694 <MX_GPIO_Init+0x16c>)
 80015bc:	f001 fb2e 	bl	8002c1c <HAL_GPIO_WritePin>
                          |ML_BWD_Pin|MR_BWD_Pin|SWO_Pin|EMIT_FR_Pin
                          |BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c6:	2301      	movs	r3, #1
 80015c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2302      	movs	r3, #2
 80015d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d2:	f107 0310 	add.w	r3, r7, #16
 80015d6:	4619      	mov	r1, r3
 80015d8:	482c      	ldr	r0, [pc, #176]	@ (800168c <MX_GPIO_Init+0x164>)
 80015da:	f001 f99b 	bl	8002914 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80015de:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80015e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ec:	f107 0310 	add.w	r3, r7, #16
 80015f0:	4619      	mov	r1, r3
 80015f2:	4826      	ldr	r0, [pc, #152]	@ (800168c <MX_GPIO_Init+0x164>)
 80015f4:	f001 f98e 	bl	8002914 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLE_STATE_Pin ML_FWD_Pin LED_RED_Pin LED_BLUE_Pin
                           LED_GREEN_Pin */
  GPIO_InitStruct.Pin = BLE_STATE_Pin|ML_FWD_Pin|LED_RED_Pin|LED_BLUE_Pin
 80015f8:	f649 1301 	movw	r3, #39169	@ 0x9901
 80015fc:	613b      	str	r3, [r7, #16]
                          |LED_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fe:	2301      	movs	r3, #1
 8001600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001606:	2302      	movs	r3, #2
 8001608:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160a:	f107 0310 	add.w	r3, r7, #16
 800160e:	4619      	mov	r1, r3
 8001610:	481f      	ldr	r0, [pc, #124]	@ (8001690 <MX_GPIO_Init+0x168>)
 8001612:	f001 f97f 	bl	8002914 <HAL_GPIO_Init>

  /*Configure GPIO pins : EMIT_SR_Pin EMIT_FL_Pin EMIT_SL_Pin MR_FWD_Pin
                           ML_BWD_Pin MR_BWD_Pin SWO_Pin EMIT_FR_Pin
                           BUZZER_Pin */
  GPIO_InitStruct.Pin = EMIT_SR_Pin|EMIT_FL_Pin|EMIT_SL_Pin|MR_FWD_Pin
 8001616:	f64f 5328 	movw	r3, #64808	@ 0xfd28
 800161a:	613b      	str	r3, [r7, #16]
                          |ML_BWD_Pin|MR_BWD_Pin|SWO_Pin|EMIT_FR_Pin
                          |BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161c:	2301      	movs	r3, #1
 800161e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	2302      	movs	r3, #2
 8001626:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001628:	f107 0310 	add.w	r3, r7, #16
 800162c:	4619      	mov	r1, r3
 800162e:	4819      	ldr	r0, [pc, #100]	@ (8001694 <MX_GPIO_Init+0x16c>)
 8001630:	f001 f970 	bl	8002914 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001634:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001638:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163a:	2302      	movs	r3, #2
 800163c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800163e:	2303      	movs	r3, #3
 8001640:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001642:	f107 0310 	add.w	r3, r7, #16
 8001646:	4619      	mov	r1, r3
 8001648:	4811      	ldr	r0, [pc, #68]	@ (8001690 <MX_GPIO_Init+0x168>)
 800164a:	f001 f963 	bl	8002914 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800164e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001652:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165c:	f107 0310 	add.w	r3, r7, #16
 8001660:	4619      	mov	r1, r3
 8001662:	480b      	ldr	r0, [pc, #44]	@ (8001690 <MX_GPIO_Init+0x168>)
 8001664:	f001 f956 	bl	8002914 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001668:	2310      	movs	r3, #16
 800166a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001674:	f107 0310 	add.w	r3, r7, #16
 8001678:	4619      	mov	r1, r3
 800167a:	4806      	ldr	r0, [pc, #24]	@ (8001694 <MX_GPIO_Init+0x16c>)
 800167c:	f001 f94a 	bl	8002914 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001680:	bf00      	nop
 8001682:	3720      	adds	r7, #32
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40021000 	.word	0x40021000
 800168c:	40011000 	.word	0x40011000
 8001690:	40010800 	.word	0x40010800
 8001694:	40010c00 	.word	0x40010c00

08001698 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	dis_SR = measure_dist(DIST_SR);
 80016a0:	2003      	movs	r0, #3
 80016a2:	f7ff fc53 	bl	8000f4c <measure_dist>
 80016a6:	4603      	mov	r3, r0
 80016a8:	461a      	mov	r2, r3
 80016aa:	4b0d      	ldr	r3, [pc, #52]	@ (80016e0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80016ac:	801a      	strh	r2, [r3, #0]
	dis_FR = measure_dist(DIST_FR);
 80016ae:	2001      	movs	r0, #1
 80016b0:	f7ff fc4c 	bl	8000f4c <measure_dist>
 80016b4:	4603      	mov	r3, r0
 80016b6:	461a      	mov	r2, r3
 80016b8:	4b0a      	ldr	r3, [pc, #40]	@ (80016e4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80016ba:	801a      	strh	r2, [r3, #0]
	dis_FL = measure_dist(DIST_FL);
 80016bc:	2000      	movs	r0, #0
 80016be:	f7ff fc45 	bl	8000f4c <measure_dist>
 80016c2:	4603      	mov	r3, r0
 80016c4:	461a      	mov	r2, r3
 80016c6:	4b08      	ldr	r3, [pc, #32]	@ (80016e8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80016c8:	801a      	strh	r2, [r3, #0]
	dis_SL = measure_dist(DIST_SL);
 80016ca:	2002      	movs	r0, #2
 80016cc:	f7ff fc3e 	bl	8000f4c <measure_dist>
 80016d0:	4603      	mov	r3, r0
 80016d2:	461a      	mov	r2, r3
 80016d4:	4b05      	ldr	r3, [pc, #20]	@ (80016ec <HAL_TIM_PeriodElapsedCallback+0x54>)
 80016d6:	801a      	strh	r2, [r3, #0]
}
 80016d8:	bf00      	nop
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	2000013e 	.word	0x2000013e
 80016e4:	2000013a 	.word	0x2000013a
 80016e8:	20000138 	.word	0x20000138
 80016ec:	2000013c 	.word	0x2000013c

080016f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016f4:	b672      	cpsid	i
}
 80016f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f8:	bf00      	nop
 80016fa:	e7fd      	b.n	80016f8 <Error_Handler+0x8>

080016fc <SetLMotorDirection>:
#include <stdint.h>
#include "main.h"
#include "motors.h"

void SetLMotorDirection(int forward){
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	if (forward){
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d00c      	beq.n	8001724 <SetLMotorDirection+0x28>
		//ML Forward HIGH
		HAL_GPIO_WritePin(GPIOA, ML_FWD_Pin, GPIO_PIN_SET);
		*/

		//ML Backwards LOW
		HAL_GPIO_WritePin(ML_BWD_GPIO_Port, ML_BWD_Pin, GPIO_PIN_RESET);
 800170a:	2200      	movs	r2, #0
 800170c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001710:	480c      	ldr	r0, [pc, #48]	@ (8001744 <SetLMotorDirection+0x48>)
 8001712:	f001 fa83 	bl	8002c1c <HAL_GPIO_WritePin>
		//ML Forward HIGH
		HAL_GPIO_WritePin(ML_FWD_GPIO_Port, ML_FWD_Pin, GPIO_PIN_SET);
 8001716:	2201      	movs	r2, #1
 8001718:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800171c:	480a      	ldr	r0, [pc, #40]	@ (8001748 <SetLMotorDirection+0x4c>)
 800171e:	f001 fa7d 	bl	8002c1c <HAL_GPIO_WritePin>
		//ML Backwards HIGH
		HAL_GPIO_WritePin(ML_BWD_GPIO_Port, ML_BWD_Pin, GPIO_PIN_SET);
		//ML Forward LOW
		HAL_GPIO_WritePin(ML_FWD_GPIO_Port, ML_FWD_Pin, GPIO_PIN_RESET);
	}
}
 8001722:	e00b      	b.n	800173c <SetLMotorDirection+0x40>
		HAL_GPIO_WritePin(ML_BWD_GPIO_Port, ML_BWD_Pin, GPIO_PIN_SET);
 8001724:	2201      	movs	r2, #1
 8001726:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800172a:	4806      	ldr	r0, [pc, #24]	@ (8001744 <SetLMotorDirection+0x48>)
 800172c:	f001 fa76 	bl	8002c1c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ML_FWD_GPIO_Port, ML_FWD_Pin, GPIO_PIN_RESET);
 8001730:	2200      	movs	r2, #0
 8001732:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001736:	4804      	ldr	r0, [pc, #16]	@ (8001748 <SetLMotorDirection+0x4c>)
 8001738:	f001 fa70 	bl	8002c1c <HAL_GPIO_WritePin>
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40010c00 	.word	0x40010c00
 8001748:	40010800 	.word	0x40010800

0800174c <SetRMotorDirection>:

void SetRMotorDirection(int forward){
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
	if (!forward){
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d10c      	bne.n	8001774 <SetRMotorDirection+0x28>
		//MR Backwards LOW
		HAL_GPIO_WritePin(MR_BWD_GPIO_Port, MR_BWD_Pin, GPIO_PIN_RESET);
 800175a:	2200      	movs	r2, #0
 800175c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001760:	480c      	ldr	r0, [pc, #48]	@ (8001794 <SetRMotorDirection+0x48>)
 8001762:	f001 fa5b 	bl	8002c1c <HAL_GPIO_WritePin>
		//MR Forward HIGH
		HAL_GPIO_WritePin(MR_FWD_GPIO_Port, MR_FWD_Pin, GPIO_PIN_SET);
 8001766:	2201      	movs	r2, #1
 8001768:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800176c:	4809      	ldr	r0, [pc, #36]	@ (8001794 <SetRMotorDirection+0x48>)
 800176e:	f001 fa55 	bl	8002c1c <HAL_GPIO_WritePin>
		//MR Backwards HIGH
		HAL_GPIO_WritePin(MR_BWD_GPIO_Port, MR_BWD_Pin, GPIO_PIN_SET);
		//MR Forward LOW
		HAL_GPIO_WritePin(MR_FWD_GPIO_Port, MR_FWD_Pin, GPIO_PIN_RESET);
	}
}
 8001772:	e00b      	b.n	800178c <SetRMotorDirection+0x40>
		HAL_GPIO_WritePin(MR_BWD_GPIO_Port, MR_BWD_Pin, GPIO_PIN_SET);
 8001774:	2201      	movs	r2, #1
 8001776:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800177a:	4806      	ldr	r0, [pc, #24]	@ (8001794 <SetRMotorDirection+0x48>)
 800177c:	f001 fa4e 	bl	8002c1c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MR_FWD_GPIO_Port, MR_FWD_Pin, GPIO_PIN_RESET);
 8001780:	2200      	movs	r2, #0
 8001782:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001786:	4803      	ldr	r0, [pc, #12]	@ (8001794 <SetRMotorDirection+0x48>)
 8001788:	f001 fa48 	bl	8002c1c <HAL_GPIO_WritePin>
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40010c00 	.word	0x40010c00

08001798 <moveLeftMotor>:
#include "main.h"
#include "motors.h"
#include "values.h"
#include <math.h>

void moveLeftMotor(int direction, int speed) {
 8001798:	b590      	push	{r4, r7, lr}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
	SetLMotorDirection(direction);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff ffaa 	bl	80016fc <SetLMotorDirection>
	TIM2->CCR4 = fabsf(speed);
 80017a8:	6838      	ldr	r0, [r7, #0]
 80017aa:	f7ff f8f7 	bl	800099c <__aeabi_i2f>
 80017ae:	4603      	mov	r3, r0
 80017b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80017b4:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fb2f 	bl	8000e1c <__aeabi_f2uiz>
 80017be:	4603      	mov	r3, r0
 80017c0:	6423      	str	r3, [r4, #64]	@ 0x40
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd90      	pop	{r4, r7, pc}

080017ca <moveRightMotor>:

void moveRightMotor(int direction, int speed) {
 80017ca:	b590      	push	{r4, r7, lr}
 80017cc:	b083      	sub	sp, #12
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
 80017d2:	6039      	str	r1, [r7, #0]
	SetRMotorDirection(direction);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff ffb9 	bl	800174c <SetRMotorDirection>
	TIM2->CCR3 = fabsf(speed);
 80017da:	6838      	ldr	r0, [r7, #0]
 80017dc:	f7ff f8de 	bl	800099c <__aeabi_i2f>
 80017e0:	4603      	mov	r3, r0
 80017e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80017e6:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff fb16 	bl	8000e1c <__aeabi_f2uiz>
 80017f0:	4603      	mov	r3, r0
 80017f2:	63e3      	str	r3, [r4, #60]	@ 0x3c
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd90      	pop	{r4, r7, pc}

080017fc <move_dist>:

int move_dist(float dist) {
 80017fc:	b5b0      	push	{r4, r5, r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
	int targetL = encLmm + dist;
 8001804:	4b62      	ldr	r3, [pc, #392]	@ (8001990 <move_dist+0x194>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6879      	ldr	r1, [r7, #4]
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff f812 	bl	8000834 <__addsf3>
 8001810:	4603      	mov	r3, r0
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff fadc 	bl	8000dd0 <__aeabi_f2iz>
 8001818:	4603      	mov	r3, r0
 800181a:	617b      	str	r3, [r7, #20]
	int targetR = encRmm + dist;
 800181c:	4b5d      	ldr	r3, [pc, #372]	@ (8001994 <move_dist+0x198>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	6879      	ldr	r1, [r7, #4]
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff f806 	bl	8000834 <__addsf3>
 8001828:	4603      	mov	r3, r0
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fad0 	bl	8000dd0 <__aeabi_f2iz>
 8001830:	4603      	mov	r3, r0
 8001832:	613b      	str	r3, [r7, #16]
	int direction = (dist > 0) ? 1 : 0;
 8001834:	2301      	movs	r3, #1
 8001836:	461c      	mov	r4, r3
 8001838:	f04f 0100 	mov.w	r1, #0
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff fabd 	bl	8000dbc <__aeabi_fcmpgt>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d101      	bne.n	800184c <move_dist+0x50>
 8001848:	2300      	movs	r3, #0
 800184a:	461c      	mov	r4, r3
 800184c:	b2e3      	uxtb	r3, r4
 800184e:	60fb      	str	r3, [r7, #12]

	//int overshoot_dist = 10;

	while (encRmm < targetR || encLmm < targetL){
 8001850:	e060      	b.n	8001914 <move_dist+0x118>
		if (encRmm < targetR * .75){
 8001852:	4b50      	ldr	r3, [pc, #320]	@ (8001994 <move_dist+0x198>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe ff06 	bl	8000668 <__aeabi_f2d>
 800185c:	4604      	mov	r4, r0
 800185e:	460d      	mov	r5, r1
 8001860:	6938      	ldr	r0, [r7, #16]
 8001862:	f7fe feef 	bl	8000644 <__aeabi_i2d>
 8001866:	f04f 0200 	mov.w	r2, #0
 800186a:	4b4b      	ldr	r3, [pc, #300]	@ (8001998 <move_dist+0x19c>)
 800186c:	f7fe fc6e 	bl	800014c <__aeabi_dmul>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4620      	mov	r0, r4
 8001876:	4629      	mov	r1, r5
 8001878:	f7fe ffae 	bl	80007d8 <__aeabi_dcmplt>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d006      	beq.n	8001890 <move_dist+0x94>
			moveRightMotor(direction, mouseSpeedR);
 8001882:	4b46      	ldr	r3, [pc, #280]	@ (800199c <move_dist+0x1a0>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4619      	mov	r1, r3
 8001888:	68f8      	ldr	r0, [r7, #12]
 800188a:	f7ff ff9e 	bl	80017ca <moveRightMotor>
 800188e:	e010      	b.n	80018b2 <move_dist+0xb6>
		}
		else if (encRmm < targetR){
 8001890:	6938      	ldr	r0, [r7, #16]
 8001892:	f7ff f883 	bl	800099c <__aeabi_i2f>
 8001896:	4602      	mov	r2, r0
 8001898:	4b3e      	ldr	r3, [pc, #248]	@ (8001994 <move_dist+0x198>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4619      	mov	r1, r3
 800189e:	4610      	mov	r0, r2
 80018a0:	f7ff fa8c 	bl	8000dbc <__aeabi_fcmpgt>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <move_dist+0xb6>
			moveRightMotor(direction, biasVoltageR);
 80018aa:	21aa      	movs	r1, #170	@ 0xaa
 80018ac:	68f8      	ldr	r0, [r7, #12]
 80018ae:	f7ff ff8c 	bl	80017ca <moveRightMotor>
		}
		if (encLmm < targetL * .75) {
 80018b2:	4b37      	ldr	r3, [pc, #220]	@ (8001990 <move_dist+0x194>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7fe fed6 	bl	8000668 <__aeabi_f2d>
 80018bc:	4604      	mov	r4, r0
 80018be:	460d      	mov	r5, r1
 80018c0:	6978      	ldr	r0, [r7, #20]
 80018c2:	f7fe febf 	bl	8000644 <__aeabi_i2d>
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	4b33      	ldr	r3, [pc, #204]	@ (8001998 <move_dist+0x19c>)
 80018cc:	f7fe fc3e 	bl	800014c <__aeabi_dmul>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4620      	mov	r0, r4
 80018d6:	4629      	mov	r1, r5
 80018d8:	f7fe ff7e 	bl	80007d8 <__aeabi_dcmplt>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d006      	beq.n	80018f0 <move_dist+0xf4>
			moveLeftMotor(direction, mouseSpeedL);
 80018e2:	4b2f      	ldr	r3, [pc, #188]	@ (80019a0 <move_dist+0x1a4>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4619      	mov	r1, r3
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	f7ff ff55 	bl	8001798 <moveLeftMotor>
 80018ee:	e010      	b.n	8001912 <move_dist+0x116>
		}
		else if (encLmm < targetL) {
 80018f0:	6978      	ldr	r0, [r7, #20]
 80018f2:	f7ff f853 	bl	800099c <__aeabi_i2f>
 80018f6:	4602      	mov	r2, r0
 80018f8:	4b25      	ldr	r3, [pc, #148]	@ (8001990 <move_dist+0x194>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4619      	mov	r1, r3
 80018fe:	4610      	mov	r0, r2
 8001900:	f7ff fa5c 	bl	8000dbc <__aeabi_fcmpgt>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <move_dist+0x116>
			moveLeftMotor(direction , biasVoltageL);
 800190a:	21aa      	movs	r1, #170	@ 0xaa
 800190c:	68f8      	ldr	r0, [r7, #12]
 800190e:	f7ff ff43 	bl	8001798 <moveLeftMotor>
		}
		continue;
 8001912:	bf00      	nop
	while (encRmm < targetR || encLmm < targetL){
 8001914:	6938      	ldr	r0, [r7, #16]
 8001916:	f7ff f841 	bl	800099c <__aeabi_i2f>
 800191a:	4602      	mov	r2, r0
 800191c:	4b1d      	ldr	r3, [pc, #116]	@ (8001994 <move_dist+0x198>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4619      	mov	r1, r3
 8001922:	4610      	mov	r0, r2
 8001924:	f7ff fa4a 	bl	8000dbc <__aeabi_fcmpgt>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d191      	bne.n	8001852 <move_dist+0x56>
 800192e:	6978      	ldr	r0, [r7, #20]
 8001930:	f7ff f834 	bl	800099c <__aeabi_i2f>
 8001934:	4602      	mov	r2, r0
 8001936:	4b16      	ldr	r3, [pc, #88]	@ (8001990 <move_dist+0x194>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4619      	mov	r1, r3
 800193c:	4610      	mov	r0, r2
 800193e:	f7ff fa3d 	bl	8000dbc <__aeabi_fcmpgt>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d184      	bne.n	8001852 <move_dist+0x56>
	}

	TIM2->CCR4 = fabsf(0);	// right channel
 8001948:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800194c:	2200      	movs	r2, #0
 800194e:	641a      	str	r2, [r3, #64]	@ 0x40
	TIM2->CCR3 = fabsf(0);	// left channel
 8001950:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001954:	2200      	movs	r2, #0
 8001956:	63da      	str	r2, [r3, #60]	@ 0x3c


	while (encRmm > targetR) {
 8001958:	e003      	b.n	8001962 <move_dist+0x166>
		moveRightMotor(0, biasVoltageR);
 800195a:	21aa      	movs	r1, #170	@ 0xaa
 800195c:	2000      	movs	r0, #0
 800195e:	f7ff ff34 	bl	80017ca <moveRightMotor>
	while (encRmm > targetR) {
 8001962:	6938      	ldr	r0, [r7, #16]
 8001964:	f7ff f81a 	bl	800099c <__aeabi_i2f>
 8001968:	4602      	mov	r2, r0
 800196a:	4b0a      	ldr	r3, [pc, #40]	@ (8001994 <move_dist+0x198>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4619      	mov	r1, r3
 8001970:	4610      	mov	r0, r2
 8001972:	f7ff fa05 	bl	8000d80 <__aeabi_fcmplt>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1ee      	bne.n	800195a <move_dist+0x15e>
	}
	TIM2->CCR4 = fabsf(0);	// right channel
 800197c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001980:	2200      	movs	r2, #0
 8001982:	641a      	str	r2, [r3, #64]	@ 0x40

	return 0;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	bdb0      	pop	{r4, r5, r7, pc}
 800198e:	bf00      	nop
 8001990:	20000148 	.word	0x20000148
 8001994:	2000014c 	.word	0x2000014c
 8001998:	3fe80000 	.word	0x3fe80000
 800199c:	20000004 	.word	0x20000004
 80019a0:	20000000 	.word	0x20000000

080019a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019aa:	4b15      	ldr	r3, [pc, #84]	@ (8001a00 <HAL_MspInit+0x5c>)
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	4a14      	ldr	r2, [pc, #80]	@ (8001a00 <HAL_MspInit+0x5c>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	6193      	str	r3, [r2, #24]
 80019b6:	4b12      	ldr	r3, [pc, #72]	@ (8001a00 <HAL_MspInit+0x5c>)
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	60bb      	str	r3, [r7, #8]
 80019c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a00 <HAL_MspInit+0x5c>)
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001a00 <HAL_MspInit+0x5c>)
 80019c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019cc:	61d3      	str	r3, [r2, #28]
 80019ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001a00 <HAL_MspInit+0x5c>)
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019d6:	607b      	str	r3, [r7, #4]
 80019d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019da:	4b0a      	ldr	r3, [pc, #40]	@ (8001a04 <HAL_MspInit+0x60>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	4a04      	ldr	r2, [pc, #16]	@ (8001a04 <HAL_MspInit+0x60>)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019f6:	bf00      	nop
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr
 8001a00:	40021000 	.word	0x40021000
 8001a04:	40010000 	.word	0x40010000

08001a08 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08a      	sub	sp, #40	@ 0x28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a10:	f107 0318 	add.w	r3, r7, #24
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a1f      	ldr	r2, [pc, #124]	@ (8001aa0 <HAL_ADC_MspInit+0x98>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d137      	bne.n	8001a98 <HAL_ADC_MspInit+0x90>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a28:	4b1e      	ldr	r3, [pc, #120]	@ (8001aa4 <HAL_ADC_MspInit+0x9c>)
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	4a1d      	ldr	r2, [pc, #116]	@ (8001aa4 <HAL_ADC_MspInit+0x9c>)
 8001a2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a32:	6193      	str	r3, [r2, #24]
 8001a34:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa4 <HAL_ADC_MspInit+0x9c>)
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a40:	4b18      	ldr	r3, [pc, #96]	@ (8001aa4 <HAL_ADC_MspInit+0x9c>)
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	4a17      	ldr	r2, [pc, #92]	@ (8001aa4 <HAL_ADC_MspInit+0x9c>)
 8001a46:	f043 0304 	orr.w	r3, r3, #4
 8001a4a:	6193      	str	r3, [r2, #24]
 8001a4c:	4b15      	ldr	r3, [pc, #84]	@ (8001aa4 <HAL_ADC_MspInit+0x9c>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	f003 0304 	and.w	r3, r3, #4
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a58:	4b12      	ldr	r3, [pc, #72]	@ (8001aa4 <HAL_ADC_MspInit+0x9c>)
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	4a11      	ldr	r2, [pc, #68]	@ (8001aa4 <HAL_ADC_MspInit+0x9c>)
 8001a5e:	f043 0308 	orr.w	r3, r3, #8
 8001a62:	6193      	str	r3, [r2, #24]
 8001a64:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa4 <HAL_ADC_MspInit+0x9c>)
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	f003 0308 	and.w	r3, r3, #8
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|REC_FR_Pin|REC_SR_Pin;
 8001a70:	2332      	movs	r3, #50	@ 0x32
 8001a72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a74:	2303      	movs	r3, #3
 8001a76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a78:	f107 0318 	add.w	r3, r7, #24
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	480a      	ldr	r0, [pc, #40]	@ (8001aa8 <HAL_ADC_MspInit+0xa0>)
 8001a80:	f000 ff48 	bl	8002914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = REC_FL_Pin|REC_SL_Pin;
 8001a84:	2303      	movs	r3, #3
 8001a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a8c:	f107 0318 	add.w	r3, r7, #24
 8001a90:	4619      	mov	r1, r3
 8001a92:	4806      	ldr	r0, [pc, #24]	@ (8001aac <HAL_ADC_MspInit+0xa4>)
 8001a94:	f000 ff3e 	bl	8002914 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001a98:	bf00      	nop
 8001a9a:	3728      	adds	r7, #40	@ 0x28
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40012400 	.word	0x40012400
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40010800 	.word	0x40010800
 8001aac:	40010c00 	.word	0x40010c00

08001ab0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ac0:	d113      	bne.n	8001aea <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8001af4 <HAL_TIM_Base_MspInit+0x44>)
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	4a0b      	ldr	r2, [pc, #44]	@ (8001af4 <HAL_TIM_Base_MspInit+0x44>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	61d3      	str	r3, [r2, #28]
 8001ace:	4b09      	ldr	r3, [pc, #36]	@ (8001af4 <HAL_TIM_Base_MspInit+0x44>)
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ada:	2200      	movs	r2, #0
 8001adc:	2100      	movs	r1, #0
 8001ade:	201c      	movs	r0, #28
 8001ae0:	f000 fee1 	bl	80028a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ae4:	201c      	movs	r0, #28
 8001ae6:	f000 fefa 	bl	80028de <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001aea:	bf00      	nop
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40021000 	.word	0x40021000

08001af8 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08a      	sub	sp, #40	@ 0x28
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b00:	f107 0318 	add.w	r3, r7, #24
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a32      	ldr	r2, [pc, #200]	@ (8001bdc <HAL_TIM_Encoder_MspInit+0xe4>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d12c      	bne.n	8001b72 <HAL_TIM_Encoder_MspInit+0x7a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b18:	4b31      	ldr	r3, [pc, #196]	@ (8001be0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001b1a:	69db      	ldr	r3, [r3, #28]
 8001b1c:	4a30      	ldr	r2, [pc, #192]	@ (8001be0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001b1e:	f043 0302 	orr.w	r3, r3, #2
 8001b22:	61d3      	str	r3, [r2, #28]
 8001b24:	4b2e      	ldr	r3, [pc, #184]	@ (8001be0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001b26:	69db      	ldr	r3, [r3, #28]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b30:	4b2b      	ldr	r3, [pc, #172]	@ (8001be0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	4a2a      	ldr	r2, [pc, #168]	@ (8001be0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001b36:	f043 0304 	orr.w	r3, r3, #4
 8001b3a:	6193      	str	r3, [r2, #24]
 8001b3c:	4b28      	ldr	r3, [pc, #160]	@ (8001be0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	613b      	str	r3, [r7, #16]
 8001b46:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ML_ENC_A_Pin|ML_ENC_B_Pin;
 8001b48:	23c0      	movs	r3, #192	@ 0xc0
 8001b4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b54:	f107 0318 	add.w	r3, r7, #24
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4822      	ldr	r0, [pc, #136]	@ (8001be4 <HAL_TIM_Encoder_MspInit+0xec>)
 8001b5c:	f000 feda 	bl	8002914 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b60:	2200      	movs	r2, #0
 8001b62:	2100      	movs	r1, #0
 8001b64:	201d      	movs	r0, #29
 8001b66:	f000 fe9e 	bl	80028a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b6a:	201d      	movs	r0, #29
 8001b6c:	f000 feb7 	bl	80028de <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001b70:	e030      	b.n	8001bd4 <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM4)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a1c      	ldr	r2, [pc, #112]	@ (8001be8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d12b      	bne.n	8001bd4 <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b7c:	4b18      	ldr	r3, [pc, #96]	@ (8001be0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001b7e:	69db      	ldr	r3, [r3, #28]
 8001b80:	4a17      	ldr	r2, [pc, #92]	@ (8001be0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001b82:	f043 0304 	orr.w	r3, r3, #4
 8001b86:	61d3      	str	r3, [r2, #28]
 8001b88:	4b15      	ldr	r3, [pc, #84]	@ (8001be0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001b8a:	69db      	ldr	r3, [r3, #28]
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b94:	4b12      	ldr	r3, [pc, #72]	@ (8001be0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	4a11      	ldr	r2, [pc, #68]	@ (8001be0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001b9a:	f043 0308 	orr.w	r3, r3, #8
 8001b9e:	6193      	str	r3, [r2, #24]
 8001ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8001be0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	f003 0308 	and.w	r3, r3, #8
 8001ba8:	60bb      	str	r3, [r7, #8]
 8001baa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MR_ENC_B_Pin|MR_ENC_A_Pin;
 8001bac:	23c0      	movs	r3, #192	@ 0xc0
 8001bae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb8:	f107 0318 	add.w	r3, r7, #24
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	480b      	ldr	r0, [pc, #44]	@ (8001bec <HAL_TIM_Encoder_MspInit+0xf4>)
 8001bc0:	f000 fea8 	bl	8002914 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	201e      	movs	r0, #30
 8001bca:	f000 fe6c 	bl	80028a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001bce:	201e      	movs	r0, #30
 8001bd0:	f000 fe85 	bl	80028de <HAL_NVIC_EnableIRQ>
}
 8001bd4:	bf00      	nop
 8001bd6:	3728      	adds	r7, #40	@ 0x28
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40000400 	.word	0x40000400
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40010800 	.word	0x40010800
 8001be8:	40000800 	.word	0x40000800
 8001bec:	40010c00 	.word	0x40010c00

08001bf0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b088      	sub	sp, #32
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf8:	f107 0310 	add.w	r3, r7, #16
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c0e:	d117      	bne.n	8001c40 <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c10:	4b0d      	ldr	r3, [pc, #52]	@ (8001c48 <HAL_TIM_MspPostInit+0x58>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	4a0c      	ldr	r2, [pc, #48]	@ (8001c48 <HAL_TIM_MspPostInit+0x58>)
 8001c16:	f043 0304 	orr.w	r3, r3, #4
 8001c1a:	6193      	str	r3, [r2, #24]
 8001c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c48 <HAL_TIM_MspPostInit+0x58>)
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MR_PWM_Pin|ML_PWM_Pin;
 8001c28:	230c      	movs	r3, #12
 8001c2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c30:	2302      	movs	r3, #2
 8001c32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c34:	f107 0310 	add.w	r3, r7, #16
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4804      	ldr	r0, [pc, #16]	@ (8001c4c <HAL_TIM_MspPostInit+0x5c>)
 8001c3c:	f000 fe6a 	bl	8002914 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c40:	bf00      	nop
 8001c42:	3720      	adds	r7, #32
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	40010800 	.word	0x40010800

08001c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c54:	bf00      	nop
 8001c56:	e7fd      	b.n	8001c54 <NMI_Handler+0x4>

08001c58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c5c:	bf00      	nop
 8001c5e:	e7fd      	b.n	8001c5c <HardFault_Handler+0x4>

08001c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c64:	bf00      	nop
 8001c66:	e7fd      	b.n	8001c64 <MemManage_Handler+0x4>

08001c68 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c6c:	bf00      	nop
 8001c6e:	e7fd      	b.n	8001c6c <BusFault_Handler+0x4>

08001c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c74:	bf00      	nop
 8001c76:	e7fd      	b.n	8001c74 <UsageFault_Handler+0x4>

08001c78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr

08001c84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr

08001c90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr

08001c9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ca0:	f000 f892 	bl	8001dc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ca4:	bf00      	nop
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001cac:	4802      	ldr	r0, [pc, #8]	@ (8001cb8 <TIM2_IRQHandler+0x10>)
 8001cae:	f002 f83b 	bl	8003d28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000060 	.word	0x20000060

08001cbc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001cc0:	4802      	ldr	r0, [pc, #8]	@ (8001ccc <TIM3_IRQHandler+0x10>)
 8001cc2:	f002 f831 	bl	8003d28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	200000a8 	.word	0x200000a8

08001cd0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001cd4:	4802      	ldr	r0, [pc, #8]	@ (8001ce0 <TIM4_IRQHandler+0x10>)
 8001cd6:	f002 f827 	bl	8003d28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	200000f0 	.word	0x200000f0

08001ce4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr

08001cf0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cf0:	f7ff fff8 	bl	8001ce4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cf4:	480b      	ldr	r0, [pc, #44]	@ (8001d24 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001cf6:	490c      	ldr	r1, [pc, #48]	@ (8001d28 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001cf8:	4a0c      	ldr	r2, [pc, #48]	@ (8001d2c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001cfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cfc:	e002      	b.n	8001d04 <LoopCopyDataInit>

08001cfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d02:	3304      	adds	r3, #4

08001d04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d08:	d3f9      	bcc.n	8001cfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d0a:	4a09      	ldr	r2, [pc, #36]	@ (8001d30 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d0c:	4c09      	ldr	r4, [pc, #36]	@ (8001d34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d10:	e001      	b.n	8001d16 <LoopFillZerobss>

08001d12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d14:	3204      	adds	r2, #4

08001d16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d18:	d3fb      	bcc.n	8001d12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d1a:	f002 fdc1 	bl	80048a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d1e:	f7ff f9ff 	bl	8001120 <main>
  bx lr
 8001d22:	4770      	bx	lr
  ldr r0, =_sdata
 8001d24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d28:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001d2c:	08004948 	.word	0x08004948
  ldr r2, =_sbss
 8001d30:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001d34:	20000158 	.word	0x20000158

08001d38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d38:	e7fe      	b.n	8001d38 <ADC1_2_IRQHandler>
	...

08001d3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d40:	4b08      	ldr	r3, [pc, #32]	@ (8001d64 <HAL_Init+0x28>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a07      	ldr	r2, [pc, #28]	@ (8001d64 <HAL_Init+0x28>)
 8001d46:	f043 0310 	orr.w	r3, r3, #16
 8001d4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d4c:	2003      	movs	r0, #3
 8001d4e:	f000 fd9f 	bl	8002890 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d52:	200f      	movs	r0, #15
 8001d54:	f000 f808 	bl	8001d68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d58:	f7ff fe24 	bl	80019a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40022000 	.word	0x40022000

08001d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d70:	4b12      	ldr	r3, [pc, #72]	@ (8001dbc <HAL_InitTick+0x54>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	4b12      	ldr	r3, [pc, #72]	@ (8001dc0 <HAL_InitTick+0x58>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	4619      	mov	r1, r3
 8001d7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d86:	4618      	mov	r0, r3
 8001d88:	f000 fdb7 	bl	80028fa <HAL_SYSTICK_Config>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e00e      	b.n	8001db4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b0f      	cmp	r3, #15
 8001d9a:	d80a      	bhi.n	8001db2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001da4:	f000 fd7f 	bl	80028a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001da8:	4a06      	ldr	r2, [pc, #24]	@ (8001dc4 <HAL_InitTick+0x5c>)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
 8001db0:	e000      	b.n	8001db4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20000008 	.word	0x20000008
 8001dc0:	20000010 	.word	0x20000010
 8001dc4:	2000000c 	.word	0x2000000c

08001dc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dcc:	4b05      	ldr	r3, [pc, #20]	@ (8001de4 <HAL_IncTick+0x1c>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4b05      	ldr	r3, [pc, #20]	@ (8001de8 <HAL_IncTick+0x20>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	4a03      	ldr	r2, [pc, #12]	@ (8001de8 <HAL_IncTick+0x20>)
 8001dda:	6013      	str	r3, [r2, #0]
}
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr
 8001de4:	20000010 	.word	0x20000010
 8001de8:	20000154 	.word	0x20000154

08001dec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  return uwTick;
 8001df0:	4b02      	ldr	r3, [pc, #8]	@ (8001dfc <HAL_GetTick+0x10>)
 8001df2:	681b      	ldr	r3, [r3, #0]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr
 8001dfc:	20000154 	.word	0x20000154

08001e00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e08:	f7ff fff0 	bl	8001dec <HAL_GetTick>
 8001e0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e18:	d005      	beq.n	8001e26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e44 <HAL_Delay+0x44>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	4413      	add	r3, r2
 8001e24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e26:	bf00      	nop
 8001e28:	f7ff ffe0 	bl	8001dec <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d8f7      	bhi.n	8001e28 <HAL_Delay+0x28>
  {
  }
}
 8001e38:	bf00      	nop
 8001e3a:	bf00      	nop
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20000010 	.word	0x20000010

08001e48 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e50:	2300      	movs	r3, #0
 8001e52:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001e54:	2300      	movs	r3, #0
 8001e56:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e0be      	b.n	8001fe8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d109      	bne.n	8001e8c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7ff fdbe 	bl	8001a08 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 fbf1 	bl	8002674 <ADC_ConversionStop_Disable>
 8001e92:	4603      	mov	r3, r0
 8001e94:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e9a:	f003 0310 	and.w	r3, r3, #16
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f040 8099 	bne.w	8001fd6 <HAL_ADC_Init+0x18e>
 8001ea4:	7dfb      	ldrb	r3, [r7, #23]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f040 8095 	bne.w	8001fd6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001eb4:	f023 0302 	bic.w	r3, r3, #2
 8001eb8:	f043 0202 	orr.w	r2, r3, #2
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ec8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	7b1b      	ldrb	r3, [r3, #12]
 8001ece:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ed0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ed2:	68ba      	ldr	r2, [r7, #8]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ee0:	d003      	beq.n	8001eea <HAL_ADC_Init+0xa2>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d102      	bne.n	8001ef0 <HAL_ADC_Init+0xa8>
 8001eea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001eee:	e000      	b.n	8001ef2 <HAL_ADC_Init+0xaa>
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	7d1b      	ldrb	r3, [r3, #20]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d119      	bne.n	8001f34 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	7b1b      	ldrb	r3, [r3, #12]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d109      	bne.n	8001f1c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	035a      	lsls	r2, r3, #13
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	e00b      	b.n	8001f34 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f20:	f043 0220 	orr.w	r2, r3, #32
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f2c:	f043 0201 	orr.w	r2, r3, #1
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	430a      	orrs	r2, r1
 8001f46:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	689a      	ldr	r2, [r3, #8]
 8001f4e:	4b28      	ldr	r3, [pc, #160]	@ (8001ff0 <HAL_ADC_Init+0x1a8>)
 8001f50:	4013      	ands	r3, r2
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	6812      	ldr	r2, [r2, #0]
 8001f56:	68b9      	ldr	r1, [r7, #8]
 8001f58:	430b      	orrs	r3, r1
 8001f5a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f64:	d003      	beq.n	8001f6e <HAL_ADC_Init+0x126>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d104      	bne.n	8001f78 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	3b01      	subs	r3, #1
 8001f74:	051b      	lsls	r3, r3, #20
 8001f76:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f7e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	689a      	ldr	r2, [r3, #8]
 8001f92:	4b18      	ldr	r3, [pc, #96]	@ (8001ff4 <HAL_ADC_Init+0x1ac>)
 8001f94:	4013      	ands	r3, r2
 8001f96:	68ba      	ldr	r2, [r7, #8]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d10b      	bne.n	8001fb4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa6:	f023 0303 	bic.w	r3, r3, #3
 8001faa:	f043 0201 	orr.w	r2, r3, #1
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001fb2:	e018      	b.n	8001fe6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb8:	f023 0312 	bic.w	r3, r3, #18
 8001fbc:	f043 0210 	orr.w	r2, r3, #16
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc8:	f043 0201 	orr.w	r2, r3, #1
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001fd4:	e007      	b.n	8001fe6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fda:	f043 0210 	orr.w	r2, r3, #16
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3718      	adds	r7, #24
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	ffe1f7fd 	.word	0xffe1f7fd
 8001ff4:	ff1f0efe 	.word	0xff1f0efe

08001ff8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002000:	2300      	movs	r3, #0
 8002002:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800200a:	2b01      	cmp	r3, #1
 800200c:	d101      	bne.n	8002012 <HAL_ADC_Start+0x1a>
 800200e:	2302      	movs	r3, #2
 8002010:	e098      	b.n	8002144 <HAL_ADC_Start+0x14c>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 fad0 	bl	80025c0 <ADC_Enable>
 8002020:	4603      	mov	r3, r0
 8002022:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002024:	7bfb      	ldrb	r3, [r7, #15]
 8002026:	2b00      	cmp	r3, #0
 8002028:	f040 8087 	bne.w	800213a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002030:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002034:	f023 0301 	bic.w	r3, r3, #1
 8002038:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a41      	ldr	r2, [pc, #260]	@ (800214c <HAL_ADC_Start+0x154>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d105      	bne.n	8002056 <HAL_ADC_Start+0x5e>
 800204a:	4b41      	ldr	r3, [pc, #260]	@ (8002150 <HAL_ADC_Start+0x158>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d115      	bne.n	8002082 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800205a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800206c:	2b00      	cmp	r3, #0
 800206e:	d026      	beq.n	80020be <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002074:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002078:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002080:	e01d      	b.n	80020be <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002086:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a2f      	ldr	r2, [pc, #188]	@ (8002150 <HAL_ADC_Start+0x158>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d004      	beq.n	80020a2 <HAL_ADC_Start+0xaa>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a2b      	ldr	r2, [pc, #172]	@ (800214c <HAL_ADC_Start+0x154>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d10d      	bne.n	80020be <HAL_ADC_Start+0xc6>
 80020a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002150 <HAL_ADC_Start+0x158>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d007      	beq.n	80020be <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80020b6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d006      	beq.n	80020d8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ce:	f023 0206 	bic.w	r2, r3, #6
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80020d6:	e002      	b.n	80020de <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f06f 0202 	mvn.w	r2, #2
 80020ee:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80020fa:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80020fe:	d113      	bne.n	8002128 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002104:	4a11      	ldr	r2, [pc, #68]	@ (800214c <HAL_ADC_Start+0x154>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d105      	bne.n	8002116 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800210a:	4b11      	ldr	r3, [pc, #68]	@ (8002150 <HAL_ADC_Start+0x158>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002112:	2b00      	cmp	r3, #0
 8002114:	d108      	bne.n	8002128 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002124:	609a      	str	r2, [r3, #8]
 8002126:	e00c      	b.n	8002142 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	689a      	ldr	r2, [r3, #8]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	e003      	b.n	8002142 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002142:	7bfb      	ldrb	r3, [r7, #15]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40012800 	.word	0x40012800
 8002150:	40012400 	.word	0x40012400

08002154 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800215c:	2300      	movs	r3, #0
 800215e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002166:	2b01      	cmp	r3, #1
 8002168:	d101      	bne.n	800216e <HAL_ADC_Stop+0x1a>
 800216a:	2302      	movs	r3, #2
 800216c:	e01a      	b.n	80021a4 <HAL_ADC_Stop+0x50>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 fa7c 	bl	8002674 <ADC_ConversionStop_Disable>
 800217c:	4603      	mov	r3, r0
 800217e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002180:	7bfb      	ldrb	r3, [r7, #15]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d109      	bne.n	800219a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800218a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800218e:	f023 0301 	bic.w	r3, r3, #1
 8002192:	f043 0201 	orr.w	r2, r3, #1
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80021a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80021ac:	b590      	push	{r4, r7, lr}
 80021ae:	b087      	sub	sp, #28
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80021be:	2300      	movs	r3, #0
 80021c0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80021c2:	f7ff fe13 	bl	8001dec <HAL_GetTick>
 80021c6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00b      	beq.n	80021ee <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021da:	f043 0220 	orr.w	r2, r3, #32
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e0d3      	b.n	8002396 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d131      	bne.n	8002260 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002202:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002206:	2b00      	cmp	r3, #0
 8002208:	d12a      	bne.n	8002260 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800220a:	e021      	b.n	8002250 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002212:	d01d      	beq.n	8002250 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d007      	beq.n	800222a <HAL_ADC_PollForConversion+0x7e>
 800221a:	f7ff fde7 	bl	8001dec <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	429a      	cmp	r2, r3
 8002228:	d212      	bcs.n	8002250 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10b      	bne.n	8002250 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800223c:	f043 0204 	orr.w	r2, r3, #4
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e0a2      	b.n	8002396 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d0d6      	beq.n	800220c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800225e:	e070      	b.n	8002342 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002260:	4b4f      	ldr	r3, [pc, #316]	@ (80023a0 <HAL_ADC_PollForConversion+0x1f4>)
 8002262:	681c      	ldr	r4, [r3, #0]
 8002264:	2002      	movs	r0, #2
 8002266:	f001 f9bd 	bl	80035e4 <HAL_RCCEx_GetPeriphCLKFreq>
 800226a:	4603      	mov	r3, r0
 800226c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6919      	ldr	r1, [r3, #16]
 8002276:	4b4b      	ldr	r3, [pc, #300]	@ (80023a4 <HAL_ADC_PollForConversion+0x1f8>)
 8002278:	400b      	ands	r3, r1
 800227a:	2b00      	cmp	r3, #0
 800227c:	d118      	bne.n	80022b0 <HAL_ADC_PollForConversion+0x104>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68d9      	ldr	r1, [r3, #12]
 8002284:	4b48      	ldr	r3, [pc, #288]	@ (80023a8 <HAL_ADC_PollForConversion+0x1fc>)
 8002286:	400b      	ands	r3, r1
 8002288:	2b00      	cmp	r3, #0
 800228a:	d111      	bne.n	80022b0 <HAL_ADC_PollForConversion+0x104>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6919      	ldr	r1, [r3, #16]
 8002292:	4b46      	ldr	r3, [pc, #280]	@ (80023ac <HAL_ADC_PollForConversion+0x200>)
 8002294:	400b      	ands	r3, r1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d108      	bne.n	80022ac <HAL_ADC_PollForConversion+0x100>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68d9      	ldr	r1, [r3, #12]
 80022a0:	4b43      	ldr	r3, [pc, #268]	@ (80023b0 <HAL_ADC_PollForConversion+0x204>)
 80022a2:	400b      	ands	r3, r1
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <HAL_ADC_PollForConversion+0x100>
 80022a8:	2314      	movs	r3, #20
 80022aa:	e020      	b.n	80022ee <HAL_ADC_PollForConversion+0x142>
 80022ac:	2329      	movs	r3, #41	@ 0x29
 80022ae:	e01e      	b.n	80022ee <HAL_ADC_PollForConversion+0x142>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6919      	ldr	r1, [r3, #16]
 80022b6:	4b3d      	ldr	r3, [pc, #244]	@ (80023ac <HAL_ADC_PollForConversion+0x200>)
 80022b8:	400b      	ands	r3, r1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d106      	bne.n	80022cc <HAL_ADC_PollForConversion+0x120>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68d9      	ldr	r1, [r3, #12]
 80022c4:	4b3a      	ldr	r3, [pc, #232]	@ (80023b0 <HAL_ADC_PollForConversion+0x204>)
 80022c6:	400b      	ands	r3, r1
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00d      	beq.n	80022e8 <HAL_ADC_PollForConversion+0x13c>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6919      	ldr	r1, [r3, #16]
 80022d2:	4b38      	ldr	r3, [pc, #224]	@ (80023b4 <HAL_ADC_PollForConversion+0x208>)
 80022d4:	400b      	ands	r3, r1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d108      	bne.n	80022ec <HAL_ADC_PollForConversion+0x140>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68d9      	ldr	r1, [r3, #12]
 80022e0:	4b34      	ldr	r3, [pc, #208]	@ (80023b4 <HAL_ADC_PollForConversion+0x208>)
 80022e2:	400b      	ands	r3, r1
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_ADC_PollForConversion+0x140>
 80022e8:	2354      	movs	r3, #84	@ 0x54
 80022ea:	e000      	b.n	80022ee <HAL_ADC_PollForConversion+0x142>
 80022ec:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80022ee:	fb02 f303 	mul.w	r3, r2, r3
 80022f2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80022f4:	e021      	b.n	800233a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80022fc:	d01a      	beq.n	8002334 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d007      	beq.n	8002314 <HAL_ADC_PollForConversion+0x168>
 8002304:	f7ff fd72 	bl	8001dec <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	429a      	cmp	r2, r3
 8002312:	d20f      	bcs.n	8002334 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	429a      	cmp	r2, r3
 800231a:	d90b      	bls.n	8002334 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002320:	f043 0204 	orr.w	r2, r3, #4
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e030      	b.n	8002396 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	3301      	adds	r3, #1
 8002338:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	429a      	cmp	r2, r3
 8002340:	d8d9      	bhi.n	80022f6 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f06f 0212 	mvn.w	r2, #18
 800234a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002350:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002362:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002366:	d115      	bne.n	8002394 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800236c:	2b00      	cmp	r3, #0
 800236e:	d111      	bne.n	8002394 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002374:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002380:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d105      	bne.n	8002394 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800238c:	f043 0201 	orr.w	r2, r3, #1
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	371c      	adds	r7, #28
 800239a:	46bd      	mov	sp, r7
 800239c:	bd90      	pop	{r4, r7, pc}
 800239e:	bf00      	nop
 80023a0:	20000008 	.word	0x20000008
 80023a4:	24924924 	.word	0x24924924
 80023a8:	00924924 	.word	0x00924924
 80023ac:	12492492 	.word	0x12492492
 80023b0:	00492492 	.word	0x00492492
 80023b4:	00249249 	.word	0x00249249

080023b8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr

080023d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023da:	2300      	movs	r3, #0
 80023dc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80023de:	2300      	movs	r3, #0
 80023e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d101      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x20>
 80023ec:	2302      	movs	r3, #2
 80023ee:	e0dc      	b.n	80025aa <HAL_ADC_ConfigChannel+0x1da>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	2b06      	cmp	r3, #6
 80023fe:	d81c      	bhi.n	800243a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	4613      	mov	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	3b05      	subs	r3, #5
 8002412:	221f      	movs	r2, #31
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	4019      	ands	r1, r3
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	6818      	ldr	r0, [r3, #0]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685a      	ldr	r2, [r3, #4]
 8002424:	4613      	mov	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	3b05      	subs	r3, #5
 800242c:	fa00 f203 	lsl.w	r2, r0, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	430a      	orrs	r2, r1
 8002436:	635a      	str	r2, [r3, #52]	@ 0x34
 8002438:	e03c      	b.n	80024b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b0c      	cmp	r3, #12
 8002440:	d81c      	bhi.n	800247c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	4613      	mov	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4413      	add	r3, r2
 8002452:	3b23      	subs	r3, #35	@ 0x23
 8002454:	221f      	movs	r2, #31
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43db      	mvns	r3, r3
 800245c:	4019      	ands	r1, r3
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	6818      	ldr	r0, [r3, #0]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	4613      	mov	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	3b23      	subs	r3, #35	@ 0x23
 800246e:	fa00 f203 	lsl.w	r2, r0, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	430a      	orrs	r2, r1
 8002478:	631a      	str	r2, [r3, #48]	@ 0x30
 800247a:	e01b      	b.n	80024b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4413      	add	r3, r2
 800248c:	3b41      	subs	r3, #65	@ 0x41
 800248e:	221f      	movs	r2, #31
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	4019      	ands	r1, r3
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	6818      	ldr	r0, [r3, #0]
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685a      	ldr	r2, [r3, #4]
 80024a0:	4613      	mov	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4413      	add	r3, r2
 80024a6:	3b41      	subs	r3, #65	@ 0x41
 80024a8:	fa00 f203 	lsl.w	r2, r0, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	430a      	orrs	r2, r1
 80024b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2b09      	cmp	r3, #9
 80024ba:	d91c      	bls.n	80024f6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68d9      	ldr	r1, [r3, #12]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	4613      	mov	r3, r2
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	4413      	add	r3, r2
 80024cc:	3b1e      	subs	r3, #30
 80024ce:	2207      	movs	r2, #7
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	4019      	ands	r1, r3
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	6898      	ldr	r0, [r3, #8]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	4613      	mov	r3, r2
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	4413      	add	r3, r2
 80024e6:	3b1e      	subs	r3, #30
 80024e8:	fa00 f203 	lsl.w	r2, r0, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	60da      	str	r2, [r3, #12]
 80024f4:	e019      	b.n	800252a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6919      	ldr	r1, [r3, #16]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	4613      	mov	r3, r2
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	4413      	add	r3, r2
 8002506:	2207      	movs	r2, #7
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	4019      	ands	r1, r3
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	6898      	ldr	r0, [r3, #8]
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	4613      	mov	r3, r2
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	4413      	add	r3, r2
 800251e:	fa00 f203 	lsl.w	r2, r0, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	430a      	orrs	r2, r1
 8002528:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2b10      	cmp	r3, #16
 8002530:	d003      	beq.n	800253a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002536:	2b11      	cmp	r3, #17
 8002538:	d132      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a1d      	ldr	r2, [pc, #116]	@ (80025b4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d125      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d126      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002560:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2b10      	cmp	r3, #16
 8002568:	d11a      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800256a:	4b13      	ldr	r3, [pc, #76]	@ (80025b8 <HAL_ADC_ConfigChannel+0x1e8>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a13      	ldr	r2, [pc, #76]	@ (80025bc <HAL_ADC_ConfigChannel+0x1ec>)
 8002570:	fba2 2303 	umull	r2, r3, r2, r3
 8002574:	0c9a      	lsrs	r2, r3, #18
 8002576:	4613      	mov	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4413      	add	r3, r2
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002580:	e002      	b.n	8002588 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	3b01      	subs	r3, #1
 8002586:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1f9      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x1b2>
 800258e:	e007      	b.n	80025a0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002594:	f043 0220 	orr.w	r2, r3, #32
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80025a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3714      	adds	r7, #20
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr
 80025b4:	40012400 	.word	0x40012400
 80025b8:	20000008 	.word	0x20000008
 80025bc:	431bde83 	.word	0x431bde83

080025c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d040      	beq.n	8002660 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f042 0201 	orr.w	r2, r2, #1
 80025ec:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025ee:	4b1f      	ldr	r3, [pc, #124]	@ (800266c <ADC_Enable+0xac>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a1f      	ldr	r2, [pc, #124]	@ (8002670 <ADC_Enable+0xb0>)
 80025f4:	fba2 2303 	umull	r2, r3, r2, r3
 80025f8:	0c9b      	lsrs	r3, r3, #18
 80025fa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80025fc:	e002      	b.n	8002604 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	3b01      	subs	r3, #1
 8002602:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1f9      	bne.n	80025fe <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800260a:	f7ff fbef 	bl	8001dec <HAL_GetTick>
 800260e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002610:	e01f      	b.n	8002652 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002612:	f7ff fbeb 	bl	8001dec <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d918      	bls.n	8002652 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b01      	cmp	r3, #1
 800262c:	d011      	beq.n	8002652 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002632:	f043 0210 	orr.w	r2, r3, #16
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800263e:	f043 0201 	orr.w	r2, r3, #1
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e007      	b.n	8002662 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	2b01      	cmp	r3, #1
 800265e:	d1d8      	bne.n	8002612 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	20000008 	.word	0x20000008
 8002670:	431bde83 	.word	0x431bde83

08002674 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800267c:	2300      	movs	r3, #0
 800267e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b01      	cmp	r3, #1
 800268c:	d12e      	bne.n	80026ec <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f022 0201 	bic.w	r2, r2, #1
 800269c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800269e:	f7ff fba5 	bl	8001dec <HAL_GetTick>
 80026a2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026a4:	e01b      	b.n	80026de <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80026a6:	f7ff fba1 	bl	8001dec <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d914      	bls.n	80026de <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d10d      	bne.n	80026de <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c6:	f043 0210 	orr.w	r2, r3, #16
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d2:	f043 0201 	orr.w	r2, r3, #1
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e007      	b.n	80026ee <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d0dc      	beq.n	80026a6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
	...

080026f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002708:	4b0c      	ldr	r3, [pc, #48]	@ (800273c <__NVIC_SetPriorityGrouping+0x44>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800270e:	68ba      	ldr	r2, [r7, #8]
 8002710:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002714:	4013      	ands	r3, r2
 8002716:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002720:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002724:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800272a:	4a04      	ldr	r2, [pc, #16]	@ (800273c <__NVIC_SetPriorityGrouping+0x44>)
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	60d3      	str	r3, [r2, #12]
}
 8002730:	bf00      	nop
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	bc80      	pop	{r7}
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	e000ed00 	.word	0xe000ed00

08002740 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002744:	4b04      	ldr	r3, [pc, #16]	@ (8002758 <__NVIC_GetPriorityGrouping+0x18>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	0a1b      	lsrs	r3, r3, #8
 800274a:	f003 0307 	and.w	r3, r3, #7
}
 800274e:	4618      	mov	r0, r3
 8002750:	46bd      	mov	sp, r7
 8002752:	bc80      	pop	{r7}
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	e000ed00 	.word	0xe000ed00

0800275c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	4603      	mov	r3, r0
 8002764:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276a:	2b00      	cmp	r3, #0
 800276c:	db0b      	blt.n	8002786 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800276e:	79fb      	ldrb	r3, [r7, #7]
 8002770:	f003 021f 	and.w	r2, r3, #31
 8002774:	4906      	ldr	r1, [pc, #24]	@ (8002790 <__NVIC_EnableIRQ+0x34>)
 8002776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277a:	095b      	lsrs	r3, r3, #5
 800277c:	2001      	movs	r0, #1
 800277e:	fa00 f202 	lsl.w	r2, r0, r2
 8002782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr
 8002790:	e000e100 	.word	0xe000e100

08002794 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	6039      	str	r1, [r7, #0]
 800279e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	db0a      	blt.n	80027be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	490c      	ldr	r1, [pc, #48]	@ (80027e0 <__NVIC_SetPriority+0x4c>)
 80027ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b2:	0112      	lsls	r2, r2, #4
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	440b      	add	r3, r1
 80027b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027bc:	e00a      	b.n	80027d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	4908      	ldr	r1, [pc, #32]	@ (80027e4 <__NVIC_SetPriority+0x50>)
 80027c4:	79fb      	ldrb	r3, [r7, #7]
 80027c6:	f003 030f 	and.w	r3, r3, #15
 80027ca:	3b04      	subs	r3, #4
 80027cc:	0112      	lsls	r2, r2, #4
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	440b      	add	r3, r1
 80027d2:	761a      	strb	r2, [r3, #24]
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc80      	pop	{r7}
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	e000e100 	.word	0xe000e100
 80027e4:	e000ed00 	.word	0xe000ed00

080027e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b089      	sub	sp, #36	@ 0x24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	f1c3 0307 	rsb	r3, r3, #7
 8002802:	2b04      	cmp	r3, #4
 8002804:	bf28      	it	cs
 8002806:	2304      	movcs	r3, #4
 8002808:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	3304      	adds	r3, #4
 800280e:	2b06      	cmp	r3, #6
 8002810:	d902      	bls.n	8002818 <NVIC_EncodePriority+0x30>
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	3b03      	subs	r3, #3
 8002816:	e000      	b.n	800281a <NVIC_EncodePriority+0x32>
 8002818:	2300      	movs	r3, #0
 800281a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800281c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	43da      	mvns	r2, r3
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	401a      	ands	r2, r3
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002830:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	fa01 f303 	lsl.w	r3, r1, r3
 800283a:	43d9      	mvns	r1, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002840:	4313      	orrs	r3, r2
         );
}
 8002842:	4618      	mov	r0, r3
 8002844:	3724      	adds	r7, #36	@ 0x24
 8002846:	46bd      	mov	sp, r7
 8002848:	bc80      	pop	{r7}
 800284a:	4770      	bx	lr

0800284c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3b01      	subs	r3, #1
 8002858:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800285c:	d301      	bcc.n	8002862 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800285e:	2301      	movs	r3, #1
 8002860:	e00f      	b.n	8002882 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002862:	4a0a      	ldr	r2, [pc, #40]	@ (800288c <SysTick_Config+0x40>)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3b01      	subs	r3, #1
 8002868:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800286a:	210f      	movs	r1, #15
 800286c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002870:	f7ff ff90 	bl	8002794 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002874:	4b05      	ldr	r3, [pc, #20]	@ (800288c <SysTick_Config+0x40>)
 8002876:	2200      	movs	r2, #0
 8002878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800287a:	4b04      	ldr	r3, [pc, #16]	@ (800288c <SysTick_Config+0x40>)
 800287c:	2207      	movs	r2, #7
 800287e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	e000e010 	.word	0xe000e010

08002890 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7ff ff2d 	bl	80026f8 <__NVIC_SetPriorityGrouping>
}
 800289e:	bf00      	nop
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b086      	sub	sp, #24
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	4603      	mov	r3, r0
 80028ae:	60b9      	str	r1, [r7, #8]
 80028b0:	607a      	str	r2, [r7, #4]
 80028b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028b8:	f7ff ff42 	bl	8002740 <__NVIC_GetPriorityGrouping>
 80028bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	68b9      	ldr	r1, [r7, #8]
 80028c2:	6978      	ldr	r0, [r7, #20]
 80028c4:	f7ff ff90 	bl	80027e8 <NVIC_EncodePriority>
 80028c8:	4602      	mov	r2, r0
 80028ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ce:	4611      	mov	r1, r2
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff ff5f 	bl	8002794 <__NVIC_SetPriority>
}
 80028d6:	bf00      	nop
 80028d8:	3718      	adds	r7, #24
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b082      	sub	sp, #8
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	4603      	mov	r3, r0
 80028e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff ff35 	bl	800275c <__NVIC_EnableIRQ>
}
 80028f2:	bf00      	nop
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b082      	sub	sp, #8
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f7ff ffa2 	bl	800284c <SysTick_Config>
 8002908:	4603      	mov	r3, r0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
	...

08002914 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002914:	b480      	push	{r7}
 8002916:	b08b      	sub	sp, #44	@ 0x2c
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800291e:	2300      	movs	r3, #0
 8002920:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002922:	2300      	movs	r3, #0
 8002924:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002926:	e169      	b.n	8002bfc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002928:	2201      	movs	r2, #1
 800292a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	69fa      	ldr	r2, [r7, #28]
 8002938:	4013      	ands	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	429a      	cmp	r2, r3
 8002942:	f040 8158 	bne.w	8002bf6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	4a9a      	ldr	r2, [pc, #616]	@ (8002bb4 <HAL_GPIO_Init+0x2a0>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d05e      	beq.n	8002a0e <HAL_GPIO_Init+0xfa>
 8002950:	4a98      	ldr	r2, [pc, #608]	@ (8002bb4 <HAL_GPIO_Init+0x2a0>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d875      	bhi.n	8002a42 <HAL_GPIO_Init+0x12e>
 8002956:	4a98      	ldr	r2, [pc, #608]	@ (8002bb8 <HAL_GPIO_Init+0x2a4>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d058      	beq.n	8002a0e <HAL_GPIO_Init+0xfa>
 800295c:	4a96      	ldr	r2, [pc, #600]	@ (8002bb8 <HAL_GPIO_Init+0x2a4>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d86f      	bhi.n	8002a42 <HAL_GPIO_Init+0x12e>
 8002962:	4a96      	ldr	r2, [pc, #600]	@ (8002bbc <HAL_GPIO_Init+0x2a8>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d052      	beq.n	8002a0e <HAL_GPIO_Init+0xfa>
 8002968:	4a94      	ldr	r2, [pc, #592]	@ (8002bbc <HAL_GPIO_Init+0x2a8>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d869      	bhi.n	8002a42 <HAL_GPIO_Init+0x12e>
 800296e:	4a94      	ldr	r2, [pc, #592]	@ (8002bc0 <HAL_GPIO_Init+0x2ac>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d04c      	beq.n	8002a0e <HAL_GPIO_Init+0xfa>
 8002974:	4a92      	ldr	r2, [pc, #584]	@ (8002bc0 <HAL_GPIO_Init+0x2ac>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d863      	bhi.n	8002a42 <HAL_GPIO_Init+0x12e>
 800297a:	4a92      	ldr	r2, [pc, #584]	@ (8002bc4 <HAL_GPIO_Init+0x2b0>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d046      	beq.n	8002a0e <HAL_GPIO_Init+0xfa>
 8002980:	4a90      	ldr	r2, [pc, #576]	@ (8002bc4 <HAL_GPIO_Init+0x2b0>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d85d      	bhi.n	8002a42 <HAL_GPIO_Init+0x12e>
 8002986:	2b12      	cmp	r3, #18
 8002988:	d82a      	bhi.n	80029e0 <HAL_GPIO_Init+0xcc>
 800298a:	2b12      	cmp	r3, #18
 800298c:	d859      	bhi.n	8002a42 <HAL_GPIO_Init+0x12e>
 800298e:	a201      	add	r2, pc, #4	@ (adr r2, 8002994 <HAL_GPIO_Init+0x80>)
 8002990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002994:	08002a0f 	.word	0x08002a0f
 8002998:	080029e9 	.word	0x080029e9
 800299c:	080029fb 	.word	0x080029fb
 80029a0:	08002a3d 	.word	0x08002a3d
 80029a4:	08002a43 	.word	0x08002a43
 80029a8:	08002a43 	.word	0x08002a43
 80029ac:	08002a43 	.word	0x08002a43
 80029b0:	08002a43 	.word	0x08002a43
 80029b4:	08002a43 	.word	0x08002a43
 80029b8:	08002a43 	.word	0x08002a43
 80029bc:	08002a43 	.word	0x08002a43
 80029c0:	08002a43 	.word	0x08002a43
 80029c4:	08002a43 	.word	0x08002a43
 80029c8:	08002a43 	.word	0x08002a43
 80029cc:	08002a43 	.word	0x08002a43
 80029d0:	08002a43 	.word	0x08002a43
 80029d4:	08002a43 	.word	0x08002a43
 80029d8:	080029f1 	.word	0x080029f1
 80029dc:	08002a05 	.word	0x08002a05
 80029e0:	4a79      	ldr	r2, [pc, #484]	@ (8002bc8 <HAL_GPIO_Init+0x2b4>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d013      	beq.n	8002a0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80029e6:	e02c      	b.n	8002a42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	623b      	str	r3, [r7, #32]
          break;
 80029ee:	e029      	b.n	8002a44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	3304      	adds	r3, #4
 80029f6:	623b      	str	r3, [r7, #32]
          break;
 80029f8:	e024      	b.n	8002a44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	3308      	adds	r3, #8
 8002a00:	623b      	str	r3, [r7, #32]
          break;
 8002a02:	e01f      	b.n	8002a44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	330c      	adds	r3, #12
 8002a0a:	623b      	str	r3, [r7, #32]
          break;
 8002a0c:	e01a      	b.n	8002a44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d102      	bne.n	8002a1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a16:	2304      	movs	r3, #4
 8002a18:	623b      	str	r3, [r7, #32]
          break;
 8002a1a:	e013      	b.n	8002a44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d105      	bne.n	8002a30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a24:	2308      	movs	r3, #8
 8002a26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	69fa      	ldr	r2, [r7, #28]
 8002a2c:	611a      	str	r2, [r3, #16]
          break;
 8002a2e:	e009      	b.n	8002a44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a30:	2308      	movs	r3, #8
 8002a32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	69fa      	ldr	r2, [r7, #28]
 8002a38:	615a      	str	r2, [r3, #20]
          break;
 8002a3a:	e003      	b.n	8002a44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	623b      	str	r3, [r7, #32]
          break;
 8002a40:	e000      	b.n	8002a44 <HAL_GPIO_Init+0x130>
          break;
 8002a42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	2bff      	cmp	r3, #255	@ 0xff
 8002a48:	d801      	bhi.n	8002a4e <HAL_GPIO_Init+0x13a>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	e001      	b.n	8002a52 <HAL_GPIO_Init+0x13e>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	3304      	adds	r3, #4
 8002a52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	2bff      	cmp	r3, #255	@ 0xff
 8002a58:	d802      	bhi.n	8002a60 <HAL_GPIO_Init+0x14c>
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	e002      	b.n	8002a66 <HAL_GPIO_Init+0x152>
 8002a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a62:	3b08      	subs	r3, #8
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	210f      	movs	r1, #15
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	fa01 f303 	lsl.w	r3, r1, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	401a      	ands	r2, r3
 8002a78:	6a39      	ldr	r1, [r7, #32]
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a80:	431a      	orrs	r2, r3
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 80b1 	beq.w	8002bf6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a94:	4b4d      	ldr	r3, [pc, #308]	@ (8002bcc <HAL_GPIO_Init+0x2b8>)
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	4a4c      	ldr	r2, [pc, #304]	@ (8002bcc <HAL_GPIO_Init+0x2b8>)
 8002a9a:	f043 0301 	orr.w	r3, r3, #1
 8002a9e:	6193      	str	r3, [r2, #24]
 8002aa0:	4b4a      	ldr	r3, [pc, #296]	@ (8002bcc <HAL_GPIO_Init+0x2b8>)
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	60bb      	str	r3, [r7, #8]
 8002aaa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002aac:	4a48      	ldr	r2, [pc, #288]	@ (8002bd0 <HAL_GPIO_Init+0x2bc>)
 8002aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab0:	089b      	lsrs	r3, r3, #2
 8002ab2:	3302      	adds	r3, #2
 8002ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002abc:	f003 0303 	and.w	r3, r3, #3
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	220f      	movs	r2, #15
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	4013      	ands	r3, r2
 8002ace:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a40      	ldr	r2, [pc, #256]	@ (8002bd4 <HAL_GPIO_Init+0x2c0>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d013      	beq.n	8002b00 <HAL_GPIO_Init+0x1ec>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a3f      	ldr	r2, [pc, #252]	@ (8002bd8 <HAL_GPIO_Init+0x2c4>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d00d      	beq.n	8002afc <HAL_GPIO_Init+0x1e8>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a3e      	ldr	r2, [pc, #248]	@ (8002bdc <HAL_GPIO_Init+0x2c8>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d007      	beq.n	8002af8 <HAL_GPIO_Init+0x1e4>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a3d      	ldr	r2, [pc, #244]	@ (8002be0 <HAL_GPIO_Init+0x2cc>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d101      	bne.n	8002af4 <HAL_GPIO_Init+0x1e0>
 8002af0:	2303      	movs	r3, #3
 8002af2:	e006      	b.n	8002b02 <HAL_GPIO_Init+0x1ee>
 8002af4:	2304      	movs	r3, #4
 8002af6:	e004      	b.n	8002b02 <HAL_GPIO_Init+0x1ee>
 8002af8:	2302      	movs	r3, #2
 8002afa:	e002      	b.n	8002b02 <HAL_GPIO_Init+0x1ee>
 8002afc:	2301      	movs	r3, #1
 8002afe:	e000      	b.n	8002b02 <HAL_GPIO_Init+0x1ee>
 8002b00:	2300      	movs	r3, #0
 8002b02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b04:	f002 0203 	and.w	r2, r2, #3
 8002b08:	0092      	lsls	r2, r2, #2
 8002b0a:	4093      	lsls	r3, r2
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b12:	492f      	ldr	r1, [pc, #188]	@ (8002bd0 <HAL_GPIO_Init+0x2bc>)
 8002b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b16:	089b      	lsrs	r3, r3, #2
 8002b18:	3302      	adds	r3, #2
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d006      	beq.n	8002b3a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b2c:	4b2d      	ldr	r3, [pc, #180]	@ (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	492c      	ldr	r1, [pc, #176]	@ (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	608b      	str	r3, [r1, #8]
 8002b38:	e006      	b.n	8002b48 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b3a:	4b2a      	ldr	r3, [pc, #168]	@ (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002b3c:	689a      	ldr	r2, [r3, #8]
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	43db      	mvns	r3, r3
 8002b42:	4928      	ldr	r1, [pc, #160]	@ (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002b44:	4013      	ands	r3, r2
 8002b46:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d006      	beq.n	8002b62 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b54:	4b23      	ldr	r3, [pc, #140]	@ (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002b56:	68da      	ldr	r2, [r3, #12]
 8002b58:	4922      	ldr	r1, [pc, #136]	@ (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	60cb      	str	r3, [r1, #12]
 8002b60:	e006      	b.n	8002b70 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b62:	4b20      	ldr	r3, [pc, #128]	@ (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002b64:	68da      	ldr	r2, [r3, #12]
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	491e      	ldr	r1, [pc, #120]	@ (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d006      	beq.n	8002b8a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b7c:	4b19      	ldr	r3, [pc, #100]	@ (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	4918      	ldr	r1, [pc, #96]	@ (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	604b      	str	r3, [r1, #4]
 8002b88:	e006      	b.n	8002b98 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b8a:	4b16      	ldr	r3, [pc, #88]	@ (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	43db      	mvns	r3, r3
 8002b92:	4914      	ldr	r1, [pc, #80]	@ (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002b94:	4013      	ands	r3, r2
 8002b96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d021      	beq.n	8002be8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	490e      	ldr	r1, [pc, #56]	@ (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	600b      	str	r3, [r1, #0]
 8002bb0:	e021      	b.n	8002bf6 <HAL_GPIO_Init+0x2e2>
 8002bb2:	bf00      	nop
 8002bb4:	10320000 	.word	0x10320000
 8002bb8:	10310000 	.word	0x10310000
 8002bbc:	10220000 	.word	0x10220000
 8002bc0:	10210000 	.word	0x10210000
 8002bc4:	10120000 	.word	0x10120000
 8002bc8:	10110000 	.word	0x10110000
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	40010000 	.word	0x40010000
 8002bd4:	40010800 	.word	0x40010800
 8002bd8:	40010c00 	.word	0x40010c00
 8002bdc:	40011000 	.word	0x40011000
 8002be0:	40011400 	.word	0x40011400
 8002be4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002be8:	4b0b      	ldr	r3, [pc, #44]	@ (8002c18 <HAL_GPIO_Init+0x304>)
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	4909      	ldr	r1, [pc, #36]	@ (8002c18 <HAL_GPIO_Init+0x304>)
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c02:	fa22 f303 	lsr.w	r3, r2, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f47f ae8e 	bne.w	8002928 <HAL_GPIO_Init+0x14>
  }
}
 8002c0c:	bf00      	nop
 8002c0e:	bf00      	nop
 8002c10:	372c      	adds	r7, #44	@ 0x2c
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr
 8002c18:	40010400 	.word	0x40010400

08002c1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	460b      	mov	r3, r1
 8002c26:	807b      	strh	r3, [r7, #2]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c2c:	787b      	ldrb	r3, [r7, #1]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c32:	887a      	ldrh	r2, [r7, #2]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c38:	e003      	b.n	8002c42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c3a:	887b      	ldrh	r3, [r7, #2]
 8002c3c:	041a      	lsls	r2, r3, #16
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	611a      	str	r2, [r3, #16]
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr

08002c4c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	460b      	mov	r3, r1
 8002c56:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c5e:	887a      	ldrh	r2, [r7, #2]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	4013      	ands	r3, r2
 8002c64:	041a      	lsls	r2, r3, #16
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	43d9      	mvns	r1, r3
 8002c6a:	887b      	ldrh	r3, [r7, #2]
 8002c6c:	400b      	ands	r3, r1
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	611a      	str	r2, [r3, #16]
}
 8002c74:	bf00      	nop
 8002c76:	3714      	adds	r7, #20
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bc80      	pop	{r7}
 8002c7c:	4770      	bx	lr
	...

08002c80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e272      	b.n	8003178 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f000 8087 	beq.w	8002dae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ca0:	4b92      	ldr	r3, [pc, #584]	@ (8002eec <HAL_RCC_OscConfig+0x26c>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f003 030c 	and.w	r3, r3, #12
 8002ca8:	2b04      	cmp	r3, #4
 8002caa:	d00c      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cac:	4b8f      	ldr	r3, [pc, #572]	@ (8002eec <HAL_RCC_OscConfig+0x26c>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f003 030c 	and.w	r3, r3, #12
 8002cb4:	2b08      	cmp	r3, #8
 8002cb6:	d112      	bne.n	8002cde <HAL_RCC_OscConfig+0x5e>
 8002cb8:	4b8c      	ldr	r3, [pc, #560]	@ (8002eec <HAL_RCC_OscConfig+0x26c>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cc4:	d10b      	bne.n	8002cde <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc6:	4b89      	ldr	r3, [pc, #548]	@ (8002eec <HAL_RCC_OscConfig+0x26c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d06c      	beq.n	8002dac <HAL_RCC_OscConfig+0x12c>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d168      	bne.n	8002dac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e24c      	b.n	8003178 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ce6:	d106      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x76>
 8002ce8:	4b80      	ldr	r3, [pc, #512]	@ (8002eec <HAL_RCC_OscConfig+0x26c>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a7f      	ldr	r2, [pc, #508]	@ (8002eec <HAL_RCC_OscConfig+0x26c>)
 8002cee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cf2:	6013      	str	r3, [r2, #0]
 8002cf4:	e02e      	b.n	8002d54 <HAL_RCC_OscConfig+0xd4>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10c      	bne.n	8002d18 <HAL_RCC_OscConfig+0x98>
 8002cfe:	4b7b      	ldr	r3, [pc, #492]	@ (8002eec <HAL_RCC_OscConfig+0x26c>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a7a      	ldr	r2, [pc, #488]	@ (8002eec <HAL_RCC_OscConfig+0x26c>)
 8002d04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d08:	6013      	str	r3, [r2, #0]
 8002d0a:	4b78      	ldr	r3, [pc, #480]	@ (8002eec <HAL_RCC_OscConfig+0x26c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a77      	ldr	r2, [pc, #476]	@ (8002eec <HAL_RCC_OscConfig+0x26c>)
 8002d10:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	e01d      	b.n	8002d54 <HAL_RCC_OscConfig+0xd4>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d20:	d10c      	bne.n	8002d3c <HAL_RCC_OscConfig+0xbc>
 8002d22:	4b72      	ldr	r3, [pc, #456]	@ (8002eec <HAL_RCC_OscConfig+0x26c>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a71      	ldr	r2, [pc, #452]	@ (8002eec <HAL_RCC_OscConfig+0x26c>)
 8002d28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	4b6f      	ldr	r3, [pc, #444]	@ (8002eec <HAL_RCC_OscConfig+0x26c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a6e      	ldr	r2, [pc, #440]	@ (8002eec <HAL_RCC_OscConfig+0x26c>)
 8002d34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d38:	6013      	str	r3, [r2, #0]
 8002d3a:	e00b      	b.n	8002d54 <HAL_RCC_OscConfig+0xd4>
 8002d3c:	4b6b      	ldr	r3, [pc, #428]	@ (8002eec <HAL_RCC_OscConfig+0x26c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a6a      	ldr	r2, [pc, #424]	@ (8002eec <HAL_RCC_OscConfig+0x26c>)
 8002d42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d46:	6013      	str	r3, [r2, #0]
 8002d48:	4b68      	ldr	r3, [pc, #416]	@ (8002eec <HAL_RCC_OscConfig+0x26c>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a67      	ldr	r2, [pc, #412]	@ (8002eec <HAL_RCC_OscConfig+0x26c>)
 8002d4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d013      	beq.n	8002d84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5c:	f7ff f846 	bl	8001dec <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d64:	f7ff f842 	bl	8001dec <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b64      	cmp	r3, #100	@ 0x64
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e200      	b.n	8003178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d76:	4b5d      	ldr	r3, [pc, #372]	@ (8002eec <HAL_RCC_OscConfig+0x26c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0f0      	beq.n	8002d64 <HAL_RCC_OscConfig+0xe4>
 8002d82:	e014      	b.n	8002dae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d84:	f7ff f832 	bl	8001dec <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d8c:	f7ff f82e 	bl	8001dec <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b64      	cmp	r3, #100	@ 0x64
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e1ec      	b.n	8003178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d9e:	4b53      	ldr	r3, [pc, #332]	@ (8002eec <HAL_RCC_OscConfig+0x26c>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1f0      	bne.n	8002d8c <HAL_RCC_OscConfig+0x10c>
 8002daa:	e000      	b.n	8002dae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d063      	beq.n	8002e82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dba:	4b4c      	ldr	r3, [pc, #304]	@ (8002eec <HAL_RCC_OscConfig+0x26c>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f003 030c 	and.w	r3, r3, #12
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00b      	beq.n	8002dde <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002dc6:	4b49      	ldr	r3, [pc, #292]	@ (8002eec <HAL_RCC_OscConfig+0x26c>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f003 030c 	and.w	r3, r3, #12
 8002dce:	2b08      	cmp	r3, #8
 8002dd0:	d11c      	bne.n	8002e0c <HAL_RCC_OscConfig+0x18c>
 8002dd2:	4b46      	ldr	r3, [pc, #280]	@ (8002eec <HAL_RCC_OscConfig+0x26c>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d116      	bne.n	8002e0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dde:	4b43      	ldr	r3, [pc, #268]	@ (8002eec <HAL_RCC_OscConfig+0x26c>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d005      	beq.n	8002df6 <HAL_RCC_OscConfig+0x176>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d001      	beq.n	8002df6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e1c0      	b.n	8003178 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df6:	4b3d      	ldr	r3, [pc, #244]	@ (8002eec <HAL_RCC_OscConfig+0x26c>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	4939      	ldr	r1, [pc, #228]	@ (8002eec <HAL_RCC_OscConfig+0x26c>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e0a:	e03a      	b.n	8002e82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d020      	beq.n	8002e56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e14:	4b36      	ldr	r3, [pc, #216]	@ (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002e16:	2201      	movs	r2, #1
 8002e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1a:	f7fe ffe7 	bl	8001dec <HAL_GetTick>
 8002e1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e20:	e008      	b.n	8002e34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e22:	f7fe ffe3 	bl	8001dec <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e1a1      	b.n	8003178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e34:	4b2d      	ldr	r3, [pc, #180]	@ (8002eec <HAL_RCC_OscConfig+0x26c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0f0      	beq.n	8002e22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e40:	4b2a      	ldr	r3, [pc, #168]	@ (8002eec <HAL_RCC_OscConfig+0x26c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	4927      	ldr	r1, [pc, #156]	@ (8002eec <HAL_RCC_OscConfig+0x26c>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	600b      	str	r3, [r1, #0]
 8002e54:	e015      	b.n	8002e82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e56:	4b26      	ldr	r3, [pc, #152]	@ (8002ef0 <HAL_RCC_OscConfig+0x270>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5c:	f7fe ffc6 	bl	8001dec <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e64:	f7fe ffc2 	bl	8001dec <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e180      	b.n	8003178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e76:	4b1d      	ldr	r3, [pc, #116]	@ (8002eec <HAL_RCC_OscConfig+0x26c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1f0      	bne.n	8002e64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d03a      	beq.n	8002f04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d019      	beq.n	8002eca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e96:	4b17      	ldr	r3, [pc, #92]	@ (8002ef4 <HAL_RCC_OscConfig+0x274>)
 8002e98:	2201      	movs	r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e9c:	f7fe ffa6 	bl	8001dec <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ea4:	f7fe ffa2 	bl	8001dec <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e160      	b.n	8003178 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8002eec <HAL_RCC_OscConfig+0x26c>)
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0f0      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ec2:	2001      	movs	r0, #1
 8002ec4:	f000 faba 	bl	800343c <RCC_Delay>
 8002ec8:	e01c      	b.n	8002f04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eca:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef4 <HAL_RCC_OscConfig+0x274>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ed0:	f7fe ff8c 	bl	8001dec <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed6:	e00f      	b.n	8002ef8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ed8:	f7fe ff88 	bl	8001dec <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d908      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e146      	b.n	8003178 <HAL_RCC_OscConfig+0x4f8>
 8002eea:	bf00      	nop
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	42420000 	.word	0x42420000
 8002ef4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef8:	4b92      	ldr	r3, [pc, #584]	@ (8003144 <HAL_RCC_OscConfig+0x4c4>)
 8002efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1e9      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f000 80a6 	beq.w	800305e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f12:	2300      	movs	r3, #0
 8002f14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f16:	4b8b      	ldr	r3, [pc, #556]	@ (8003144 <HAL_RCC_OscConfig+0x4c4>)
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10d      	bne.n	8002f3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f22:	4b88      	ldr	r3, [pc, #544]	@ (8003144 <HAL_RCC_OscConfig+0x4c4>)
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	4a87      	ldr	r2, [pc, #540]	@ (8003144 <HAL_RCC_OscConfig+0x4c4>)
 8002f28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f2c:	61d3      	str	r3, [r2, #28]
 8002f2e:	4b85      	ldr	r3, [pc, #532]	@ (8003144 <HAL_RCC_OscConfig+0x4c4>)
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f36:	60bb      	str	r3, [r7, #8]
 8002f38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3e:	4b82      	ldr	r3, [pc, #520]	@ (8003148 <HAL_RCC_OscConfig+0x4c8>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d118      	bne.n	8002f7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f4a:	4b7f      	ldr	r3, [pc, #508]	@ (8003148 <HAL_RCC_OscConfig+0x4c8>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a7e      	ldr	r2, [pc, #504]	@ (8003148 <HAL_RCC_OscConfig+0x4c8>)
 8002f50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f56:	f7fe ff49 	bl	8001dec <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f5c:	e008      	b.n	8002f70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f5e:	f7fe ff45 	bl	8001dec <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b64      	cmp	r3, #100	@ 0x64
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e103      	b.n	8003178 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f70:	4b75      	ldr	r3, [pc, #468]	@ (8003148 <HAL_RCC_OscConfig+0x4c8>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0f0      	beq.n	8002f5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d106      	bne.n	8002f92 <HAL_RCC_OscConfig+0x312>
 8002f84:	4b6f      	ldr	r3, [pc, #444]	@ (8003144 <HAL_RCC_OscConfig+0x4c4>)
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	4a6e      	ldr	r2, [pc, #440]	@ (8003144 <HAL_RCC_OscConfig+0x4c4>)
 8002f8a:	f043 0301 	orr.w	r3, r3, #1
 8002f8e:	6213      	str	r3, [r2, #32]
 8002f90:	e02d      	b.n	8002fee <HAL_RCC_OscConfig+0x36e>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10c      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x334>
 8002f9a:	4b6a      	ldr	r3, [pc, #424]	@ (8003144 <HAL_RCC_OscConfig+0x4c4>)
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	4a69      	ldr	r2, [pc, #420]	@ (8003144 <HAL_RCC_OscConfig+0x4c4>)
 8002fa0:	f023 0301 	bic.w	r3, r3, #1
 8002fa4:	6213      	str	r3, [r2, #32]
 8002fa6:	4b67      	ldr	r3, [pc, #412]	@ (8003144 <HAL_RCC_OscConfig+0x4c4>)
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	4a66      	ldr	r2, [pc, #408]	@ (8003144 <HAL_RCC_OscConfig+0x4c4>)
 8002fac:	f023 0304 	bic.w	r3, r3, #4
 8002fb0:	6213      	str	r3, [r2, #32]
 8002fb2:	e01c      	b.n	8002fee <HAL_RCC_OscConfig+0x36e>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	2b05      	cmp	r3, #5
 8002fba:	d10c      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x356>
 8002fbc:	4b61      	ldr	r3, [pc, #388]	@ (8003144 <HAL_RCC_OscConfig+0x4c4>)
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	4a60      	ldr	r2, [pc, #384]	@ (8003144 <HAL_RCC_OscConfig+0x4c4>)
 8002fc2:	f043 0304 	orr.w	r3, r3, #4
 8002fc6:	6213      	str	r3, [r2, #32]
 8002fc8:	4b5e      	ldr	r3, [pc, #376]	@ (8003144 <HAL_RCC_OscConfig+0x4c4>)
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	4a5d      	ldr	r2, [pc, #372]	@ (8003144 <HAL_RCC_OscConfig+0x4c4>)
 8002fce:	f043 0301 	orr.w	r3, r3, #1
 8002fd2:	6213      	str	r3, [r2, #32]
 8002fd4:	e00b      	b.n	8002fee <HAL_RCC_OscConfig+0x36e>
 8002fd6:	4b5b      	ldr	r3, [pc, #364]	@ (8003144 <HAL_RCC_OscConfig+0x4c4>)
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	4a5a      	ldr	r2, [pc, #360]	@ (8003144 <HAL_RCC_OscConfig+0x4c4>)
 8002fdc:	f023 0301 	bic.w	r3, r3, #1
 8002fe0:	6213      	str	r3, [r2, #32]
 8002fe2:	4b58      	ldr	r3, [pc, #352]	@ (8003144 <HAL_RCC_OscConfig+0x4c4>)
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	4a57      	ldr	r2, [pc, #348]	@ (8003144 <HAL_RCC_OscConfig+0x4c4>)
 8002fe8:	f023 0304 	bic.w	r3, r3, #4
 8002fec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d015      	beq.n	8003022 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff6:	f7fe fef9 	bl	8001dec <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ffc:	e00a      	b.n	8003014 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ffe:	f7fe fef5 	bl	8001dec <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	f241 3288 	movw	r2, #5000	@ 0x1388
 800300c:	4293      	cmp	r3, r2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e0b1      	b.n	8003178 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003014:	4b4b      	ldr	r3, [pc, #300]	@ (8003144 <HAL_RCC_OscConfig+0x4c4>)
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0ee      	beq.n	8002ffe <HAL_RCC_OscConfig+0x37e>
 8003020:	e014      	b.n	800304c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003022:	f7fe fee3 	bl	8001dec <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003028:	e00a      	b.n	8003040 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800302a:	f7fe fedf 	bl	8001dec <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003038:	4293      	cmp	r3, r2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e09b      	b.n	8003178 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003040:	4b40      	ldr	r3, [pc, #256]	@ (8003144 <HAL_RCC_OscConfig+0x4c4>)
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1ee      	bne.n	800302a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800304c:	7dfb      	ldrb	r3, [r7, #23]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d105      	bne.n	800305e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003052:	4b3c      	ldr	r3, [pc, #240]	@ (8003144 <HAL_RCC_OscConfig+0x4c4>)
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	4a3b      	ldr	r2, [pc, #236]	@ (8003144 <HAL_RCC_OscConfig+0x4c4>)
 8003058:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800305c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	2b00      	cmp	r3, #0
 8003064:	f000 8087 	beq.w	8003176 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003068:	4b36      	ldr	r3, [pc, #216]	@ (8003144 <HAL_RCC_OscConfig+0x4c4>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f003 030c 	and.w	r3, r3, #12
 8003070:	2b08      	cmp	r3, #8
 8003072:	d061      	beq.n	8003138 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	69db      	ldr	r3, [r3, #28]
 8003078:	2b02      	cmp	r3, #2
 800307a:	d146      	bne.n	800310a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800307c:	4b33      	ldr	r3, [pc, #204]	@ (800314c <HAL_RCC_OscConfig+0x4cc>)
 800307e:	2200      	movs	r2, #0
 8003080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003082:	f7fe feb3 	bl	8001dec <HAL_GetTick>
 8003086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003088:	e008      	b.n	800309c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800308a:	f7fe feaf 	bl	8001dec <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d901      	bls.n	800309c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e06d      	b.n	8003178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800309c:	4b29      	ldr	r3, [pc, #164]	@ (8003144 <HAL_RCC_OscConfig+0x4c4>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1f0      	bne.n	800308a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030b0:	d108      	bne.n	80030c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030b2:	4b24      	ldr	r3, [pc, #144]	@ (8003144 <HAL_RCC_OscConfig+0x4c4>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	4921      	ldr	r1, [pc, #132]	@ (8003144 <HAL_RCC_OscConfig+0x4c4>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030c4:	4b1f      	ldr	r3, [pc, #124]	@ (8003144 <HAL_RCC_OscConfig+0x4c4>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a19      	ldr	r1, [r3, #32]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d4:	430b      	orrs	r3, r1
 80030d6:	491b      	ldr	r1, [pc, #108]	@ (8003144 <HAL_RCC_OscConfig+0x4c4>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030dc:	4b1b      	ldr	r3, [pc, #108]	@ (800314c <HAL_RCC_OscConfig+0x4cc>)
 80030de:	2201      	movs	r2, #1
 80030e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e2:	f7fe fe83 	bl	8001dec <HAL_GetTick>
 80030e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030e8:	e008      	b.n	80030fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ea:	f7fe fe7f 	bl	8001dec <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e03d      	b.n	8003178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030fc:	4b11      	ldr	r3, [pc, #68]	@ (8003144 <HAL_RCC_OscConfig+0x4c4>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d0f0      	beq.n	80030ea <HAL_RCC_OscConfig+0x46a>
 8003108:	e035      	b.n	8003176 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800310a:	4b10      	ldr	r3, [pc, #64]	@ (800314c <HAL_RCC_OscConfig+0x4cc>)
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003110:	f7fe fe6c 	bl	8001dec <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003118:	f7fe fe68 	bl	8001dec <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e026      	b.n	8003178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800312a:	4b06      	ldr	r3, [pc, #24]	@ (8003144 <HAL_RCC_OscConfig+0x4c4>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1f0      	bne.n	8003118 <HAL_RCC_OscConfig+0x498>
 8003136:	e01e      	b.n	8003176 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d107      	bne.n	8003150 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e019      	b.n	8003178 <HAL_RCC_OscConfig+0x4f8>
 8003144:	40021000 	.word	0x40021000
 8003148:	40007000 	.word	0x40007000
 800314c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003150:	4b0b      	ldr	r3, [pc, #44]	@ (8003180 <HAL_RCC_OscConfig+0x500>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	429a      	cmp	r2, r3
 8003162:	d106      	bne.n	8003172 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800316e:	429a      	cmp	r2, r3
 8003170:	d001      	beq.n	8003176 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e000      	b.n	8003178 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3718      	adds	r7, #24
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40021000 	.word	0x40021000

08003184 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e0d0      	b.n	800333a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003198:	4b6a      	ldr	r3, [pc, #424]	@ (8003344 <HAL_RCC_ClockConfig+0x1c0>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d910      	bls.n	80031c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031a6:	4b67      	ldr	r3, [pc, #412]	@ (8003344 <HAL_RCC_ClockConfig+0x1c0>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f023 0207 	bic.w	r2, r3, #7
 80031ae:	4965      	ldr	r1, [pc, #404]	@ (8003344 <HAL_RCC_ClockConfig+0x1c0>)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b6:	4b63      	ldr	r3, [pc, #396]	@ (8003344 <HAL_RCC_ClockConfig+0x1c0>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d001      	beq.n	80031c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e0b8      	b.n	800333a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d020      	beq.n	8003216 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d005      	beq.n	80031ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031e0:	4b59      	ldr	r3, [pc, #356]	@ (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	4a58      	ldr	r2, [pc, #352]	@ (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 80031e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80031ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0308 	and.w	r3, r3, #8
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d005      	beq.n	8003204 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031f8:	4b53      	ldr	r3, [pc, #332]	@ (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	4a52      	ldr	r2, [pc, #328]	@ (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 80031fe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003202:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003204:	4b50      	ldr	r3, [pc, #320]	@ (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	494d      	ldr	r1, [pc, #308]	@ (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 8003212:	4313      	orrs	r3, r2
 8003214:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d040      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d107      	bne.n	800323a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800322a:	4b47      	ldr	r3, [pc, #284]	@ (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d115      	bne.n	8003262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e07f      	b.n	800333a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b02      	cmp	r3, #2
 8003240:	d107      	bne.n	8003252 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003242:	4b41      	ldr	r3, [pc, #260]	@ (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d109      	bne.n	8003262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e073      	b.n	800333a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003252:	4b3d      	ldr	r3, [pc, #244]	@ (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e06b      	b.n	800333a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003262:	4b39      	ldr	r3, [pc, #228]	@ (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f023 0203 	bic.w	r2, r3, #3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	4936      	ldr	r1, [pc, #216]	@ (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 8003270:	4313      	orrs	r3, r2
 8003272:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003274:	f7fe fdba 	bl	8001dec <HAL_GetTick>
 8003278:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800327a:	e00a      	b.n	8003292 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800327c:	f7fe fdb6 	bl	8001dec <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	f241 3288 	movw	r2, #5000	@ 0x1388
 800328a:	4293      	cmp	r3, r2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e053      	b.n	800333a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003292:	4b2d      	ldr	r3, [pc, #180]	@ (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f003 020c 	and.w	r2, r3, #12
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d1eb      	bne.n	800327c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032a4:	4b27      	ldr	r3, [pc, #156]	@ (8003344 <HAL_RCC_ClockConfig+0x1c0>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d210      	bcs.n	80032d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b2:	4b24      	ldr	r3, [pc, #144]	@ (8003344 <HAL_RCC_ClockConfig+0x1c0>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f023 0207 	bic.w	r2, r3, #7
 80032ba:	4922      	ldr	r1, [pc, #136]	@ (8003344 <HAL_RCC_ClockConfig+0x1c0>)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	4313      	orrs	r3, r2
 80032c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c2:	4b20      	ldr	r3, [pc, #128]	@ (8003344 <HAL_RCC_ClockConfig+0x1c0>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d001      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e032      	b.n	800333a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d008      	beq.n	80032f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032e0:	4b19      	ldr	r3, [pc, #100]	@ (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	4916      	ldr	r1, [pc, #88]	@ (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0308 	and.w	r3, r3, #8
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d009      	beq.n	8003312 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032fe:	4b12      	ldr	r3, [pc, #72]	@ (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	490e      	ldr	r1, [pc, #56]	@ (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 800330e:	4313      	orrs	r3, r2
 8003310:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003312:	f000 f821 	bl	8003358 <HAL_RCC_GetSysClockFreq>
 8003316:	4602      	mov	r2, r0
 8003318:	4b0b      	ldr	r3, [pc, #44]	@ (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	091b      	lsrs	r3, r3, #4
 800331e:	f003 030f 	and.w	r3, r3, #15
 8003322:	490a      	ldr	r1, [pc, #40]	@ (800334c <HAL_RCC_ClockConfig+0x1c8>)
 8003324:	5ccb      	ldrb	r3, [r1, r3]
 8003326:	fa22 f303 	lsr.w	r3, r2, r3
 800332a:	4a09      	ldr	r2, [pc, #36]	@ (8003350 <HAL_RCC_ClockConfig+0x1cc>)
 800332c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800332e:	4b09      	ldr	r3, [pc, #36]	@ (8003354 <HAL_RCC_ClockConfig+0x1d0>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f7fe fd18 	bl	8001d68 <HAL_InitTick>

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	40022000 	.word	0x40022000
 8003348:	40021000 	.word	0x40021000
 800334c:	08004900 	.word	0x08004900
 8003350:	20000008 	.word	0x20000008
 8003354:	2000000c 	.word	0x2000000c

08003358 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003358:	b480      	push	{r7}
 800335a:	b087      	sub	sp, #28
 800335c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800335e:	2300      	movs	r3, #0
 8003360:	60fb      	str	r3, [r7, #12]
 8003362:	2300      	movs	r3, #0
 8003364:	60bb      	str	r3, [r7, #8]
 8003366:	2300      	movs	r3, #0
 8003368:	617b      	str	r3, [r7, #20]
 800336a:	2300      	movs	r3, #0
 800336c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800336e:	2300      	movs	r3, #0
 8003370:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003372:	4b1e      	ldr	r3, [pc, #120]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x94>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f003 030c 	and.w	r3, r3, #12
 800337e:	2b04      	cmp	r3, #4
 8003380:	d002      	beq.n	8003388 <HAL_RCC_GetSysClockFreq+0x30>
 8003382:	2b08      	cmp	r3, #8
 8003384:	d003      	beq.n	800338e <HAL_RCC_GetSysClockFreq+0x36>
 8003386:	e027      	b.n	80033d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003388:	4b19      	ldr	r3, [pc, #100]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800338a:	613b      	str	r3, [r7, #16]
      break;
 800338c:	e027      	b.n	80033de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	0c9b      	lsrs	r3, r3, #18
 8003392:	f003 030f 	and.w	r3, r3, #15
 8003396:	4a17      	ldr	r2, [pc, #92]	@ (80033f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003398:	5cd3      	ldrb	r3, [r2, r3]
 800339a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d010      	beq.n	80033c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033a6:	4b11      	ldr	r3, [pc, #68]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x94>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	0c5b      	lsrs	r3, r3, #17
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	4a11      	ldr	r2, [pc, #68]	@ (80033f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80033b2:	5cd3      	ldrb	r3, [r2, r3]
 80033b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a0d      	ldr	r2, [pc, #52]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80033ba:	fb03 f202 	mul.w	r2, r3, r2
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c4:	617b      	str	r3, [r7, #20]
 80033c6:	e004      	b.n	80033d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a0c      	ldr	r2, [pc, #48]	@ (80033fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80033cc:	fb02 f303 	mul.w	r3, r2, r3
 80033d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	613b      	str	r3, [r7, #16]
      break;
 80033d6:	e002      	b.n	80033de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033d8:	4b05      	ldr	r3, [pc, #20]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80033da:	613b      	str	r3, [r7, #16]
      break;
 80033dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033de:	693b      	ldr	r3, [r7, #16]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	371c      	adds	r7, #28
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bc80      	pop	{r7}
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	40021000 	.word	0x40021000
 80033f0:	007a1200 	.word	0x007a1200
 80033f4:	08004918 	.word	0x08004918
 80033f8:	08004928 	.word	0x08004928
 80033fc:	003d0900 	.word	0x003d0900

08003400 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003404:	4b02      	ldr	r3, [pc, #8]	@ (8003410 <HAL_RCC_GetHCLKFreq+0x10>)
 8003406:	681b      	ldr	r3, [r3, #0]
}
 8003408:	4618      	mov	r0, r3
 800340a:	46bd      	mov	sp, r7
 800340c:	bc80      	pop	{r7}
 800340e:	4770      	bx	lr
 8003410:	20000008 	.word	0x20000008

08003414 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003418:	f7ff fff2 	bl	8003400 <HAL_RCC_GetHCLKFreq>
 800341c:	4602      	mov	r2, r0
 800341e:	4b05      	ldr	r3, [pc, #20]	@ (8003434 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	0adb      	lsrs	r3, r3, #11
 8003424:	f003 0307 	and.w	r3, r3, #7
 8003428:	4903      	ldr	r1, [pc, #12]	@ (8003438 <HAL_RCC_GetPCLK2Freq+0x24>)
 800342a:	5ccb      	ldrb	r3, [r1, r3]
 800342c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003430:	4618      	mov	r0, r3
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40021000 	.word	0x40021000
 8003438:	08004910 	.word	0x08004910

0800343c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003444:	4b0a      	ldr	r3, [pc, #40]	@ (8003470 <RCC_Delay+0x34>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a0a      	ldr	r2, [pc, #40]	@ (8003474 <RCC_Delay+0x38>)
 800344a:	fba2 2303 	umull	r2, r3, r2, r3
 800344e:	0a5b      	lsrs	r3, r3, #9
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	fb02 f303 	mul.w	r3, r2, r3
 8003456:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003458:	bf00      	nop
  }
  while (Delay --);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	1e5a      	subs	r2, r3, #1
 800345e:	60fa      	str	r2, [r7, #12]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1f9      	bne.n	8003458 <RCC_Delay+0x1c>
}
 8003464:	bf00      	nop
 8003466:	bf00      	nop
 8003468:	3714      	adds	r7, #20
 800346a:	46bd      	mov	sp, r7
 800346c:	bc80      	pop	{r7}
 800346e:	4770      	bx	lr
 8003470:	20000008 	.word	0x20000008
 8003474:	10624dd3 	.word	0x10624dd3

08003478 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003480:	2300      	movs	r3, #0
 8003482:	613b      	str	r3, [r7, #16]
 8003484:	2300      	movs	r3, #0
 8003486:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b00      	cmp	r3, #0
 8003492:	d07d      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003494:	2300      	movs	r3, #0
 8003496:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003498:	4b4f      	ldr	r3, [pc, #316]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800349a:	69db      	ldr	r3, [r3, #28]
 800349c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10d      	bne.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034a4:	4b4c      	ldr	r3, [pc, #304]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a6:	69db      	ldr	r3, [r3, #28]
 80034a8:	4a4b      	ldr	r2, [pc, #300]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034ae:	61d3      	str	r3, [r2, #28]
 80034b0:	4b49      	ldr	r3, [pc, #292]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b2:	69db      	ldr	r3, [r3, #28]
 80034b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034b8:	60bb      	str	r3, [r7, #8]
 80034ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034bc:	2301      	movs	r3, #1
 80034be:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c0:	4b46      	ldr	r3, [pc, #280]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d118      	bne.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034cc:	4b43      	ldr	r3, [pc, #268]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a42      	ldr	r2, [pc, #264]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034d8:	f7fe fc88 	bl	8001dec <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034de:	e008      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034e0:	f7fe fc84 	bl	8001dec <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b64      	cmp	r3, #100	@ 0x64
 80034ec:	d901      	bls.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e06d      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f2:	4b3a      	ldr	r3, [pc, #232]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d0f0      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034fe:	4b36      	ldr	r3, [pc, #216]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003506:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d02e      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	429a      	cmp	r2, r3
 800351a:	d027      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800351c:	4b2e      	ldr	r3, [pc, #184]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003524:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003526:	4b2e      	ldr	r3, [pc, #184]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003528:	2201      	movs	r2, #1
 800352a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800352c:	4b2c      	ldr	r3, [pc, #176]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800352e:	2200      	movs	r2, #0
 8003530:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003532:	4a29      	ldr	r2, [pc, #164]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d014      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003542:	f7fe fc53 	bl	8001dec <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003548:	e00a      	b.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800354a:	f7fe fc4f 	bl	8001dec <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003558:	4293      	cmp	r3, r2
 800355a:	d901      	bls.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e036      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003560:	4b1d      	ldr	r3, [pc, #116]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003562:	6a1b      	ldr	r3, [r3, #32]
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0ee      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800356c:	4b1a      	ldr	r3, [pc, #104]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	4917      	ldr	r1, [pc, #92]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800357a:	4313      	orrs	r3, r2
 800357c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800357e:	7dfb      	ldrb	r3, [r7, #23]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d105      	bne.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003584:	4b14      	ldr	r3, [pc, #80]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	4a13      	ldr	r2, [pc, #76]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800358a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800358e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d008      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800359c:	4b0e      	ldr	r3, [pc, #56]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	490b      	ldr	r1, [pc, #44]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0310 	and.w	r3, r3, #16
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d008      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035ba:	4b07      	ldr	r3, [pc, #28]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	4904      	ldr	r1, [pc, #16]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3718      	adds	r7, #24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	40021000 	.word	0x40021000
 80035dc:	40007000 	.word	0x40007000
 80035e0:	42420440 	.word	0x42420440

080035e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b088      	sub	sp, #32
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80035ec:	2300      	movs	r3, #0
 80035ee:	617b      	str	r3, [r7, #20]
 80035f0:	2300      	movs	r3, #0
 80035f2:	61fb      	str	r3, [r7, #28]
 80035f4:	2300      	movs	r3, #0
 80035f6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80035f8:	2300      	movs	r3, #0
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	2300      	movs	r3, #0
 80035fe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b10      	cmp	r3, #16
 8003604:	d00a      	beq.n	800361c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2b10      	cmp	r3, #16
 800360a:	f200 808a 	bhi.w	8003722 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d045      	beq.n	80036a0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b02      	cmp	r3, #2
 8003618:	d075      	beq.n	8003706 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800361a:	e082      	b.n	8003722 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800361c:	4b46      	ldr	r3, [pc, #280]	@ (8003738 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003622:	4b45      	ldr	r3, [pc, #276]	@ (8003738 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d07b      	beq.n	8003726 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	0c9b      	lsrs	r3, r3, #18
 8003632:	f003 030f 	and.w	r3, r3, #15
 8003636:	4a41      	ldr	r2, [pc, #260]	@ (800373c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003638:	5cd3      	ldrb	r3, [r2, r3]
 800363a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d015      	beq.n	8003672 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003646:	4b3c      	ldr	r3, [pc, #240]	@ (8003738 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	0c5b      	lsrs	r3, r3, #17
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	4a3b      	ldr	r2, [pc, #236]	@ (8003740 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003652:	5cd3      	ldrb	r3, [r2, r3]
 8003654:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00d      	beq.n	800367c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003660:	4a38      	ldr	r2, [pc, #224]	@ (8003744 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	fbb2 f2f3 	udiv	r2, r2, r3
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	fb02 f303 	mul.w	r3, r2, r3
 800366e:	61fb      	str	r3, [r7, #28]
 8003670:	e004      	b.n	800367c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	4a34      	ldr	r2, [pc, #208]	@ (8003748 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003676:	fb02 f303 	mul.w	r3, r2, r3
 800367a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800367c:	4b2e      	ldr	r3, [pc, #184]	@ (8003738 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003684:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003688:	d102      	bne.n	8003690 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	61bb      	str	r3, [r7, #24]
      break;
 800368e:	e04a      	b.n	8003726 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	4a2d      	ldr	r2, [pc, #180]	@ (800374c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003696:	fba2 2303 	umull	r2, r3, r2, r3
 800369a:	085b      	lsrs	r3, r3, #1
 800369c:	61bb      	str	r3, [r7, #24]
      break;
 800369e:	e042      	b.n	8003726 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80036a0:	4b25      	ldr	r3, [pc, #148]	@ (8003738 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036b0:	d108      	bne.n	80036c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d003      	beq.n	80036c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80036bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036c0:	61bb      	str	r3, [r7, #24]
 80036c2:	e01f      	b.n	8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036ce:	d109      	bne.n	80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80036d0:	4b19      	ldr	r3, [pc, #100]	@ (8003738 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80036d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d003      	beq.n	80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80036dc:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80036e0:	61bb      	str	r3, [r7, #24]
 80036e2:	e00f      	b.n	8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036ee:	d11c      	bne.n	800372a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80036f0:	4b11      	ldr	r3, [pc, #68]	@ (8003738 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d016      	beq.n	800372a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80036fc:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003700:	61bb      	str	r3, [r7, #24]
      break;
 8003702:	e012      	b.n	800372a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003704:	e011      	b.n	800372a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003706:	f7ff fe85 	bl	8003414 <HAL_RCC_GetPCLK2Freq>
 800370a:	4602      	mov	r2, r0
 800370c:	4b0a      	ldr	r3, [pc, #40]	@ (8003738 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	0b9b      	lsrs	r3, r3, #14
 8003712:	f003 0303 	and.w	r3, r3, #3
 8003716:	3301      	adds	r3, #1
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	fbb2 f3f3 	udiv	r3, r2, r3
 800371e:	61bb      	str	r3, [r7, #24]
      break;
 8003720:	e004      	b.n	800372c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003722:	bf00      	nop
 8003724:	e002      	b.n	800372c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003726:	bf00      	nop
 8003728:	e000      	b.n	800372c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800372a:	bf00      	nop
    }
  }
  return (frequency);
 800372c:	69bb      	ldr	r3, [r7, #24]
}
 800372e:	4618      	mov	r0, r3
 8003730:	3720      	adds	r7, #32
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40021000 	.word	0x40021000
 800373c:	0800492c 	.word	0x0800492c
 8003740:	0800493c 	.word	0x0800493c
 8003744:	007a1200 	.word	0x007a1200
 8003748:	003d0900 	.word	0x003d0900
 800374c:	aaaaaaab 	.word	0xaaaaaaab

08003750 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e041      	b.n	80037e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d106      	bne.n	800377c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7fe f99a 	bl	8001ab0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2202      	movs	r2, #2
 8003780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3304      	adds	r3, #4
 800378c:	4619      	mov	r1, r3
 800378e:	4610      	mov	r0, r2
 8003790:	f000 fd5e 	bl	8004250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
	...

080037f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	2b01      	cmp	r3, #1
 8003802:	d001      	beq.n	8003808 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e03a      	b.n	800387e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2202      	movs	r2, #2
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68da      	ldr	r2, [r3, #12]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f042 0201 	orr.w	r2, r2, #1
 800381e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a18      	ldr	r2, [pc, #96]	@ (8003888 <HAL_TIM_Base_Start_IT+0x98>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d00e      	beq.n	8003848 <HAL_TIM_Base_Start_IT+0x58>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003832:	d009      	beq.n	8003848 <HAL_TIM_Base_Start_IT+0x58>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a14      	ldr	r2, [pc, #80]	@ (800388c <HAL_TIM_Base_Start_IT+0x9c>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d004      	beq.n	8003848 <HAL_TIM_Base_Start_IT+0x58>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a13      	ldr	r2, [pc, #76]	@ (8003890 <HAL_TIM_Base_Start_IT+0xa0>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d111      	bne.n	800386c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2b06      	cmp	r3, #6
 8003858:	d010      	beq.n	800387c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f042 0201 	orr.w	r2, r2, #1
 8003868:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800386a:	e007      	b.n	800387c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f042 0201 	orr.w	r2, r2, #1
 800387a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	bc80      	pop	{r7}
 8003886:	4770      	bx	lr
 8003888:	40012c00 	.word	0x40012c00
 800388c:	40000400 	.word	0x40000400
 8003890:	40000800 	.word	0x40000800

08003894 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e041      	b.n	800392a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d106      	bne.n	80038c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f839 	bl	8003932 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2202      	movs	r2, #2
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	3304      	adds	r3, #4
 80038d0:	4619      	mov	r1, r3
 80038d2:	4610      	mov	r0, r2
 80038d4:	f000 fcbc 	bl	8004250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003932:	b480      	push	{r7}
 8003934:	b083      	sub	sp, #12
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800393a:	bf00      	nop
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	bc80      	pop	{r7}
 8003942:	4770      	bx	lr

08003944 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d109      	bne.n	8003968 <HAL_TIM_PWM_Start+0x24>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b01      	cmp	r3, #1
 800395e:	bf14      	ite	ne
 8003960:	2301      	movne	r3, #1
 8003962:	2300      	moveq	r3, #0
 8003964:	b2db      	uxtb	r3, r3
 8003966:	e022      	b.n	80039ae <HAL_TIM_PWM_Start+0x6a>
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	2b04      	cmp	r3, #4
 800396c:	d109      	bne.n	8003982 <HAL_TIM_PWM_Start+0x3e>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b01      	cmp	r3, #1
 8003978:	bf14      	ite	ne
 800397a:	2301      	movne	r3, #1
 800397c:	2300      	moveq	r3, #0
 800397e:	b2db      	uxtb	r3, r3
 8003980:	e015      	b.n	80039ae <HAL_TIM_PWM_Start+0x6a>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2b08      	cmp	r3, #8
 8003986:	d109      	bne.n	800399c <HAL_TIM_PWM_Start+0x58>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b01      	cmp	r3, #1
 8003992:	bf14      	ite	ne
 8003994:	2301      	movne	r3, #1
 8003996:	2300      	moveq	r3, #0
 8003998:	b2db      	uxtb	r3, r3
 800399a:	e008      	b.n	80039ae <HAL_TIM_PWM_Start+0x6a>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	bf14      	ite	ne
 80039a8:	2301      	movne	r3, #1
 80039aa:	2300      	moveq	r3, #0
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e05e      	b.n	8003a74 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d104      	bne.n	80039c6 <HAL_TIM_PWM_Start+0x82>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2202      	movs	r2, #2
 80039c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039c4:	e013      	b.n	80039ee <HAL_TIM_PWM_Start+0xaa>
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	2b04      	cmp	r3, #4
 80039ca:	d104      	bne.n	80039d6 <HAL_TIM_PWM_Start+0x92>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2202      	movs	r2, #2
 80039d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039d4:	e00b      	b.n	80039ee <HAL_TIM_PWM_Start+0xaa>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	2b08      	cmp	r3, #8
 80039da:	d104      	bne.n	80039e6 <HAL_TIM_PWM_Start+0xa2>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2202      	movs	r2, #2
 80039e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039e4:	e003      	b.n	80039ee <HAL_TIM_PWM_Start+0xaa>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2202      	movs	r2, #2
 80039ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2201      	movs	r2, #1
 80039f4:	6839      	ldr	r1, [r7, #0]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 feb6 	bl	8004768 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a1e      	ldr	r2, [pc, #120]	@ (8003a7c <HAL_TIM_PWM_Start+0x138>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d107      	bne.n	8003a16 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a14:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a18      	ldr	r2, [pc, #96]	@ (8003a7c <HAL_TIM_PWM_Start+0x138>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d00e      	beq.n	8003a3e <HAL_TIM_PWM_Start+0xfa>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a28:	d009      	beq.n	8003a3e <HAL_TIM_PWM_Start+0xfa>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a14      	ldr	r2, [pc, #80]	@ (8003a80 <HAL_TIM_PWM_Start+0x13c>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d004      	beq.n	8003a3e <HAL_TIM_PWM_Start+0xfa>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a12      	ldr	r2, [pc, #72]	@ (8003a84 <HAL_TIM_PWM_Start+0x140>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d111      	bne.n	8003a62 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2b06      	cmp	r3, #6
 8003a4e:	d010      	beq.n	8003a72 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0201 	orr.w	r2, r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a60:	e007      	b.n	8003a72 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f042 0201 	orr.w	r2, r2, #1
 8003a70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	40012c00 	.word	0x40012c00
 8003a80:	40000400 	.word	0x40000400
 8003a84:	40000800 	.word	0x40000800

08003a88 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d101      	bne.n	8003a9c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e093      	b.n	8003bc4 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d106      	bne.n	8003ab6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f7fe f821 	bl	8001af8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2202      	movs	r2, #2
 8003aba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	6812      	ldr	r2, [r2, #0]
 8003ac8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003acc:	f023 0307 	bic.w	r3, r3, #7
 8003ad0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	3304      	adds	r3, #4
 8003ada:	4619      	mov	r1, r3
 8003adc:	4610      	mov	r0, r2
 8003ade:	f000 fbb7 	bl	8004250 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b0a:	f023 0303 	bic.w	r3, r3, #3
 8003b0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	021b      	lsls	r3, r3, #8
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003b28:	f023 030c 	bic.w	r3, r3, #12
 8003b2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003b34:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	68da      	ldr	r2, [r3, #12]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	021b      	lsls	r3, r3, #8
 8003b44:	4313      	orrs	r3, r2
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	011a      	lsls	r2, r3, #4
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	031b      	lsls	r3, r3, #12
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003b66:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	011b      	lsls	r3, r3, #4
 8003b72:	4313      	orrs	r3, r2
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3718      	adds	r7, #24
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003bdc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003be4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003bec:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003bf4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d110      	bne.n	8003c1e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003bfc:	7bfb      	ldrb	r3, [r7, #15]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d102      	bne.n	8003c08 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c02:	7b7b      	ldrb	r3, [r7, #13]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d001      	beq.n	8003c0c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e089      	b.n	8003d20 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2202      	movs	r2, #2
 8003c10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2202      	movs	r2, #2
 8003c18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c1c:	e031      	b.n	8003c82 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	2b04      	cmp	r3, #4
 8003c22:	d110      	bne.n	8003c46 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c24:	7bbb      	ldrb	r3, [r7, #14]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d102      	bne.n	8003c30 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c2a:	7b3b      	ldrb	r3, [r7, #12]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d001      	beq.n	8003c34 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e075      	b.n	8003d20 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2202      	movs	r2, #2
 8003c40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c44:	e01d      	b.n	8003c82 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c46:	7bfb      	ldrb	r3, [r7, #15]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d108      	bne.n	8003c5e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c4c:	7bbb      	ldrb	r3, [r7, #14]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d105      	bne.n	8003c5e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c52:	7b7b      	ldrb	r3, [r7, #13]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d102      	bne.n	8003c5e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c58:	7b3b      	ldrb	r3, [r7, #12]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d001      	beq.n	8003c62 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e05e      	b.n	8003d20 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2202      	movs	r2, #2
 8003c66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2202      	movs	r2, #2
 8003c76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d003      	beq.n	8003c90 <HAL_TIM_Encoder_Start_IT+0xc4>
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	d010      	beq.n	8003cb0 <HAL_TIM_Encoder_Start_IT+0xe4>
 8003c8e:	e01f      	b.n	8003cd0 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2201      	movs	r2, #1
 8003c96:	2100      	movs	r1, #0
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f000 fd65 	bl	8004768 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68da      	ldr	r2, [r3, #12]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f042 0202 	orr.w	r2, r2, #2
 8003cac:	60da      	str	r2, [r3, #12]
      break;
 8003cae:	e02e      	b.n	8003d0e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	2104      	movs	r1, #4
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 fd55 	bl	8004768 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68da      	ldr	r2, [r3, #12]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f042 0204 	orr.w	r2, r2, #4
 8003ccc:	60da      	str	r2, [r3, #12]
      break;
 8003cce:	e01e      	b.n	8003d0e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f000 fd45 	bl	8004768 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	2104      	movs	r1, #4
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 fd3e 	bl	8004768 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68da      	ldr	r2, [r3, #12]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f042 0202 	orr.w	r2, r2, #2
 8003cfa:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68da      	ldr	r2, [r3, #12]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f042 0204 	orr.w	r2, r2, #4
 8003d0a:	60da      	str	r2, [r3, #12]
      break;
 8003d0c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f042 0201 	orr.w	r2, r2, #1
 8003d1c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d020      	beq.n	8003d8c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d01b      	beq.n	8003d8c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f06f 0202 	mvn.w	r2, #2
 8003d5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	f003 0303 	and.w	r3, r3, #3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7fd f956 	bl	8001024 <HAL_TIM_IC_CaptureCallback>
 8003d78:	e005      	b.n	8003d86 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 fa4d 	bl	800421a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 fa53 	bl	800422c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	f003 0304 	and.w	r3, r3, #4
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d020      	beq.n	8003dd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d01b      	beq.n	8003dd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f06f 0204 	mvn.w	r2, #4
 8003da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2202      	movs	r2, #2
 8003dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d003      	beq.n	8003dc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f7fd f930 	bl	8001024 <HAL_TIM_IC_CaptureCallback>
 8003dc4:	e005      	b.n	8003dd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 fa27 	bl	800421a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 fa2d 	bl	800422c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	f003 0308 	and.w	r3, r3, #8
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d020      	beq.n	8003e24 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f003 0308 	and.w	r3, r3, #8
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d01b      	beq.n	8003e24 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f06f 0208 	mvn.w	r2, #8
 8003df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2204      	movs	r2, #4
 8003dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	69db      	ldr	r3, [r3, #28]
 8003e02:	f003 0303 	and.w	r3, r3, #3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7fd f90a 	bl	8001024 <HAL_TIM_IC_CaptureCallback>
 8003e10:	e005      	b.n	8003e1e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 fa01 	bl	800421a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 fa07 	bl	800422c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	f003 0310 	and.w	r3, r3, #16
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d020      	beq.n	8003e70 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f003 0310 	and.w	r3, r3, #16
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d01b      	beq.n	8003e70 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f06f 0210 	mvn.w	r2, #16
 8003e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2208      	movs	r2, #8
 8003e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d003      	beq.n	8003e5e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7fd f8e4 	bl	8001024 <HAL_TIM_IC_CaptureCallback>
 8003e5c:	e005      	b.n	8003e6a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 f9db 	bl	800421a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 f9e1 	bl	800422c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00c      	beq.n	8003e94 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d007      	beq.n	8003e94 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f06f 0201 	mvn.w	r2, #1
 8003e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7fd fc02 	bl	8001698 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00c      	beq.n	8003eb8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d007      	beq.n	8003eb8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 fce3 	bl	800487e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00c      	beq.n	8003edc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d007      	beq.n	8003edc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f9b1 	bl	800423e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	f003 0320 	and.w	r3, r3, #32
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00c      	beq.n	8003f00 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f003 0320 	and.w	r3, r3, #32
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d007      	beq.n	8003f00 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f06f 0220 	mvn.w	r2, #32
 8003ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 fcb6 	bl	800486c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f00:	bf00      	nop
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f14:	2300      	movs	r3, #0
 8003f16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d101      	bne.n	8003f26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f22:	2302      	movs	r3, #2
 8003f24:	e0ae      	b.n	8004084 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2b0c      	cmp	r3, #12
 8003f32:	f200 809f 	bhi.w	8004074 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003f36:	a201      	add	r2, pc, #4	@ (adr r2, 8003f3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3c:	08003f71 	.word	0x08003f71
 8003f40:	08004075 	.word	0x08004075
 8003f44:	08004075 	.word	0x08004075
 8003f48:	08004075 	.word	0x08004075
 8003f4c:	08003fb1 	.word	0x08003fb1
 8003f50:	08004075 	.word	0x08004075
 8003f54:	08004075 	.word	0x08004075
 8003f58:	08004075 	.word	0x08004075
 8003f5c:	08003ff3 	.word	0x08003ff3
 8003f60:	08004075 	.word	0x08004075
 8003f64:	08004075 	.word	0x08004075
 8003f68:	08004075 	.word	0x08004075
 8003f6c:	08004033 	.word	0x08004033
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68b9      	ldr	r1, [r7, #8]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 f9d8 	bl	800432c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	699a      	ldr	r2, [r3, #24]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f042 0208 	orr.w	r2, r2, #8
 8003f8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	699a      	ldr	r2, [r3, #24]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0204 	bic.w	r2, r2, #4
 8003f9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6999      	ldr	r1, [r3, #24]
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	691a      	ldr	r2, [r3, #16]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	619a      	str	r2, [r3, #24]
      break;
 8003fae:	e064      	b.n	800407a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68b9      	ldr	r1, [r7, #8]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 fa1e 	bl	80043f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	699a      	ldr	r2, [r3, #24]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	699a      	ldr	r2, [r3, #24]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6999      	ldr	r1, [r3, #24]
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	021a      	lsls	r2, r3, #8
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	430a      	orrs	r2, r1
 8003fee:	619a      	str	r2, [r3, #24]
      break;
 8003ff0:	e043      	b.n	800407a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68b9      	ldr	r1, [r7, #8]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f000 fa67 	bl	80044cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	69da      	ldr	r2, [r3, #28]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f042 0208 	orr.w	r2, r2, #8
 800400c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	69da      	ldr	r2, [r3, #28]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f022 0204 	bic.w	r2, r2, #4
 800401c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	69d9      	ldr	r1, [r3, #28]
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	691a      	ldr	r2, [r3, #16]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	61da      	str	r2, [r3, #28]
      break;
 8004030:	e023      	b.n	800407a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68b9      	ldr	r1, [r7, #8]
 8004038:	4618      	mov	r0, r3
 800403a:	f000 fab1 	bl	80045a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	69da      	ldr	r2, [r3, #28]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800404c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	69da      	ldr	r2, [r3, #28]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800405c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	69d9      	ldr	r1, [r3, #28]
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	021a      	lsls	r2, r3, #8
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	430a      	orrs	r2, r1
 8004070:	61da      	str	r2, [r3, #28]
      break;
 8004072:	e002      	b.n	800407a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	75fb      	strb	r3, [r7, #23]
      break;
 8004078:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004082:	7dfb      	ldrb	r3, [r7, #23]
}
 8004084:	4618      	mov	r0, r3
 8004086:	3718      	adds	r7, #24
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004096:	2300      	movs	r3, #0
 8004098:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d101      	bne.n	80040a8 <HAL_TIM_ConfigClockSource+0x1c>
 80040a4:	2302      	movs	r3, #2
 80040a6:	e0b4      	b.n	8004212 <HAL_TIM_ConfigClockSource+0x186>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2202      	movs	r2, #2
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80040c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80040ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68ba      	ldr	r2, [r7, #8]
 80040d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040e0:	d03e      	beq.n	8004160 <HAL_TIM_ConfigClockSource+0xd4>
 80040e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040e6:	f200 8087 	bhi.w	80041f8 <HAL_TIM_ConfigClockSource+0x16c>
 80040ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040ee:	f000 8086 	beq.w	80041fe <HAL_TIM_ConfigClockSource+0x172>
 80040f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040f6:	d87f      	bhi.n	80041f8 <HAL_TIM_ConfigClockSource+0x16c>
 80040f8:	2b70      	cmp	r3, #112	@ 0x70
 80040fa:	d01a      	beq.n	8004132 <HAL_TIM_ConfigClockSource+0xa6>
 80040fc:	2b70      	cmp	r3, #112	@ 0x70
 80040fe:	d87b      	bhi.n	80041f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004100:	2b60      	cmp	r3, #96	@ 0x60
 8004102:	d050      	beq.n	80041a6 <HAL_TIM_ConfigClockSource+0x11a>
 8004104:	2b60      	cmp	r3, #96	@ 0x60
 8004106:	d877      	bhi.n	80041f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004108:	2b50      	cmp	r3, #80	@ 0x50
 800410a:	d03c      	beq.n	8004186 <HAL_TIM_ConfigClockSource+0xfa>
 800410c:	2b50      	cmp	r3, #80	@ 0x50
 800410e:	d873      	bhi.n	80041f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004110:	2b40      	cmp	r3, #64	@ 0x40
 8004112:	d058      	beq.n	80041c6 <HAL_TIM_ConfigClockSource+0x13a>
 8004114:	2b40      	cmp	r3, #64	@ 0x40
 8004116:	d86f      	bhi.n	80041f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004118:	2b30      	cmp	r3, #48	@ 0x30
 800411a:	d064      	beq.n	80041e6 <HAL_TIM_ConfigClockSource+0x15a>
 800411c:	2b30      	cmp	r3, #48	@ 0x30
 800411e:	d86b      	bhi.n	80041f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004120:	2b20      	cmp	r3, #32
 8004122:	d060      	beq.n	80041e6 <HAL_TIM_ConfigClockSource+0x15a>
 8004124:	2b20      	cmp	r3, #32
 8004126:	d867      	bhi.n	80041f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004128:	2b00      	cmp	r3, #0
 800412a:	d05c      	beq.n	80041e6 <HAL_TIM_ConfigClockSource+0x15a>
 800412c:	2b10      	cmp	r3, #16
 800412e:	d05a      	beq.n	80041e6 <HAL_TIM_ConfigClockSource+0x15a>
 8004130:	e062      	b.n	80041f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004142:	f000 faf2 	bl	800472a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004154:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68ba      	ldr	r2, [r7, #8]
 800415c:	609a      	str	r2, [r3, #8]
      break;
 800415e:	e04f      	b.n	8004200 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004170:	f000 fadb 	bl	800472a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	689a      	ldr	r2, [r3, #8]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004182:	609a      	str	r2, [r3, #8]
      break;
 8004184:	e03c      	b.n	8004200 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004192:	461a      	mov	r2, r3
 8004194:	f000 fa52 	bl	800463c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2150      	movs	r1, #80	@ 0x50
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 faa9 	bl	80046f6 <TIM_ITRx_SetConfig>
      break;
 80041a4:	e02c      	b.n	8004200 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041b2:	461a      	mov	r2, r3
 80041b4:	f000 fa70 	bl	8004698 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2160      	movs	r1, #96	@ 0x60
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 fa99 	bl	80046f6 <TIM_ITRx_SetConfig>
      break;
 80041c4:	e01c      	b.n	8004200 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041d2:	461a      	mov	r2, r3
 80041d4:	f000 fa32 	bl	800463c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2140      	movs	r1, #64	@ 0x40
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 fa89 	bl	80046f6 <TIM_ITRx_SetConfig>
      break;
 80041e4:	e00c      	b.n	8004200 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4619      	mov	r1, r3
 80041f0:	4610      	mov	r0, r2
 80041f2:	f000 fa80 	bl	80046f6 <TIM_ITRx_SetConfig>
      break;
 80041f6:	e003      	b.n	8004200 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	73fb      	strb	r3, [r7, #15]
      break;
 80041fc:	e000      	b.n	8004200 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80041fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004210:	7bfb      	ldrb	r3, [r7, #15]
}
 8004212:	4618      	mov	r0, r3
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800421a:	b480      	push	{r7}
 800421c:	b083      	sub	sp, #12
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004222:	bf00      	nop
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	bc80      	pop	{r7}
 800422a:	4770      	bx	lr

0800422c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	bc80      	pop	{r7}
 800423c:	4770      	bx	lr

0800423e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800423e:	b480      	push	{r7}
 8004240:	b083      	sub	sp, #12
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004246:	bf00      	nop
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	bc80      	pop	{r7}
 800424e:	4770      	bx	lr

08004250 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a2f      	ldr	r2, [pc, #188]	@ (8004320 <TIM_Base_SetConfig+0xd0>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d00b      	beq.n	8004280 <TIM_Base_SetConfig+0x30>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800426e:	d007      	beq.n	8004280 <TIM_Base_SetConfig+0x30>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a2c      	ldr	r2, [pc, #176]	@ (8004324 <TIM_Base_SetConfig+0xd4>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d003      	beq.n	8004280 <TIM_Base_SetConfig+0x30>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a2b      	ldr	r2, [pc, #172]	@ (8004328 <TIM_Base_SetConfig+0xd8>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d108      	bne.n	8004292 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004286:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	4313      	orrs	r3, r2
 8004290:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a22      	ldr	r2, [pc, #136]	@ (8004320 <TIM_Base_SetConfig+0xd0>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d00b      	beq.n	80042b2 <TIM_Base_SetConfig+0x62>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042a0:	d007      	beq.n	80042b2 <TIM_Base_SetConfig+0x62>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a1f      	ldr	r2, [pc, #124]	@ (8004324 <TIM_Base_SetConfig+0xd4>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d003      	beq.n	80042b2 <TIM_Base_SetConfig+0x62>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a1e      	ldr	r2, [pc, #120]	@ (8004328 <TIM_Base_SetConfig+0xd8>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d108      	bne.n	80042c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	689a      	ldr	r2, [r3, #8]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a0d      	ldr	r2, [pc, #52]	@ (8004320 <TIM_Base_SetConfig+0xd0>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d103      	bne.n	80042f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	691a      	ldr	r2, [r3, #16]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	d005      	beq.n	8004316 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	f023 0201 	bic.w	r2, r3, #1
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	611a      	str	r2, [r3, #16]
  }
}
 8004316:	bf00      	nop
 8004318:	3714      	adds	r7, #20
 800431a:	46bd      	mov	sp, r7
 800431c:	bc80      	pop	{r7}
 800431e:	4770      	bx	lr
 8004320:	40012c00 	.word	0x40012c00
 8004324:	40000400 	.word	0x40000400
 8004328:	40000800 	.word	0x40000800

0800432c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800432c:	b480      	push	{r7}
 800432e:	b087      	sub	sp, #28
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	f023 0201 	bic.w	r2, r3, #1
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800435a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f023 0303 	bic.w	r3, r3, #3
 8004362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	4313      	orrs	r3, r2
 800436c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	f023 0302 	bic.w	r3, r3, #2
 8004374:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	4313      	orrs	r3, r2
 800437e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a1c      	ldr	r2, [pc, #112]	@ (80043f4 <TIM_OC1_SetConfig+0xc8>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d10c      	bne.n	80043a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	f023 0308 	bic.w	r3, r3, #8
 800438e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	697a      	ldr	r2, [r7, #20]
 8004396:	4313      	orrs	r3, r2
 8004398:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	f023 0304 	bic.w	r3, r3, #4
 80043a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a13      	ldr	r2, [pc, #76]	@ (80043f4 <TIM_OC1_SetConfig+0xc8>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d111      	bne.n	80043ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685a      	ldr	r2, [r3, #4]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	621a      	str	r2, [r3, #32]
}
 80043e8:	bf00      	nop
 80043ea:	371c      	adds	r7, #28
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bc80      	pop	{r7}
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	40012c00 	.word	0x40012c00

080043f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b087      	sub	sp, #28
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	f023 0210 	bic.w	r2, r3, #16
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800442e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	021b      	lsls	r3, r3, #8
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	4313      	orrs	r3, r2
 800443a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	f023 0320 	bic.w	r3, r3, #32
 8004442:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	4313      	orrs	r3, r2
 800444e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a1d      	ldr	r2, [pc, #116]	@ (80044c8 <TIM_OC2_SetConfig+0xd0>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d10d      	bne.n	8004474 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800445e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	011b      	lsls	r3, r3, #4
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	4313      	orrs	r3, r2
 800446a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004472:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a14      	ldr	r2, [pc, #80]	@ (80044c8 <TIM_OC2_SetConfig+0xd0>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d113      	bne.n	80044a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004482:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800448a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	695b      	ldr	r3, [r3, #20]
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	4313      	orrs	r3, r2
 8004496:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685a      	ldr	r2, [r3, #4]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	621a      	str	r2, [r3, #32]
}
 80044be:	bf00      	nop
 80044c0:	371c      	adds	r7, #28
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bc80      	pop	{r7}
 80044c6:	4770      	bx	lr
 80044c8:	40012c00 	.word	0x40012c00

080044cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	69db      	ldr	r3, [r3, #28]
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f023 0303 	bic.w	r3, r3, #3
 8004502:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	4313      	orrs	r3, r2
 800450c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004514:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	021b      	lsls	r3, r3, #8
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	4313      	orrs	r3, r2
 8004520:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a1d      	ldr	r2, [pc, #116]	@ (800459c <TIM_OC3_SetConfig+0xd0>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d10d      	bne.n	8004546 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004530:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	021b      	lsls	r3, r3, #8
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	4313      	orrs	r3, r2
 800453c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004544:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a14      	ldr	r2, [pc, #80]	@ (800459c <TIM_OC3_SetConfig+0xd0>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d113      	bne.n	8004576 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004554:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800455c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	011b      	lsls	r3, r3, #4
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	4313      	orrs	r3, r2
 8004568:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	011b      	lsls	r3, r3, #4
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	4313      	orrs	r3, r2
 8004574:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685a      	ldr	r2, [r3, #4]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	621a      	str	r2, [r3, #32]
}
 8004590:	bf00      	nop
 8004592:	371c      	adds	r7, #28
 8004594:	46bd      	mov	sp, r7
 8004596:	bc80      	pop	{r7}
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	40012c00 	.word	0x40012c00

080045a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b087      	sub	sp, #28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	021b      	lsls	r3, r3, #8
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80045ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	031b      	lsls	r3, r3, #12
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a0f      	ldr	r2, [pc, #60]	@ (8004638 <TIM_OC4_SetConfig+0x98>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d109      	bne.n	8004614 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004606:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	019b      	lsls	r3, r3, #6
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	4313      	orrs	r3, r2
 8004612:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	621a      	str	r2, [r3, #32]
}
 800462e:	bf00      	nop
 8004630:	371c      	adds	r7, #28
 8004632:	46bd      	mov	sp, r7
 8004634:	bc80      	pop	{r7}
 8004636:	4770      	bx	lr
 8004638:	40012c00 	.word	0x40012c00

0800463c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800463c:	b480      	push	{r7}
 800463e:	b087      	sub	sp, #28
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6a1b      	ldr	r3, [r3, #32]
 800464c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	f023 0201 	bic.w	r2, r3, #1
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004666:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	011b      	lsls	r3, r3, #4
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	4313      	orrs	r3, r2
 8004670:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	f023 030a 	bic.w	r3, r3, #10
 8004678:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	4313      	orrs	r3, r2
 8004680:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	621a      	str	r2, [r3, #32]
}
 800468e:	bf00      	nop
 8004690:	371c      	adds	r7, #28
 8004692:	46bd      	mov	sp, r7
 8004694:	bc80      	pop	{r7}
 8004696:	4770      	bx	lr

08004698 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004698:	b480      	push	{r7}
 800469a:	b087      	sub	sp, #28
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	f023 0210 	bic.w	r2, r3, #16
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80046c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	031b      	lsls	r3, r3, #12
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80046d4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	011b      	lsls	r3, r3, #4
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	4313      	orrs	r3, r2
 80046de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	621a      	str	r2, [r3, #32]
}
 80046ec:	bf00      	nop
 80046ee:	371c      	adds	r7, #28
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bc80      	pop	{r7}
 80046f4:	4770      	bx	lr

080046f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046f6:	b480      	push	{r7}
 80046f8:	b085      	sub	sp, #20
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
 80046fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800470c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	4313      	orrs	r3, r2
 8004714:	f043 0307 	orr.w	r3, r3, #7
 8004718:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	609a      	str	r2, [r3, #8]
}
 8004720:	bf00      	nop
 8004722:	3714      	adds	r7, #20
 8004724:	46bd      	mov	sp, r7
 8004726:	bc80      	pop	{r7}
 8004728:	4770      	bx	lr

0800472a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800472a:	b480      	push	{r7}
 800472c:	b087      	sub	sp, #28
 800472e:	af00      	add	r7, sp, #0
 8004730:	60f8      	str	r0, [r7, #12]
 8004732:	60b9      	str	r1, [r7, #8]
 8004734:	607a      	str	r2, [r7, #4]
 8004736:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004744:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	021a      	lsls	r2, r3, #8
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	431a      	orrs	r2, r3
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	4313      	orrs	r3, r2
 8004752:	697a      	ldr	r2, [r7, #20]
 8004754:	4313      	orrs	r3, r2
 8004756:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	609a      	str	r2, [r3, #8]
}
 800475e:	bf00      	nop
 8004760:	371c      	adds	r7, #28
 8004762:	46bd      	mov	sp, r7
 8004764:	bc80      	pop	{r7}
 8004766:	4770      	bx	lr

08004768 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004768:	b480      	push	{r7}
 800476a:	b087      	sub	sp, #28
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f003 031f 	and.w	r3, r3, #31
 800477a:	2201      	movs	r2, #1
 800477c:	fa02 f303 	lsl.w	r3, r2, r3
 8004780:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6a1a      	ldr	r2, [r3, #32]
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	43db      	mvns	r3, r3
 800478a:	401a      	ands	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6a1a      	ldr	r2, [r3, #32]
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	f003 031f 	and.w	r3, r3, #31
 800479a:	6879      	ldr	r1, [r7, #4]
 800479c:	fa01 f303 	lsl.w	r3, r1, r3
 80047a0:	431a      	orrs	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	621a      	str	r2, [r3, #32]
}
 80047a6:	bf00      	nop
 80047a8:	371c      	adds	r7, #28
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bc80      	pop	{r7}
 80047ae:	4770      	bx	lr

080047b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d101      	bne.n	80047c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047c4:	2302      	movs	r3, #2
 80047c6:	e046      	b.n	8004856 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2202      	movs	r2, #2
 80047d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a16      	ldr	r2, [pc, #88]	@ (8004860 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d00e      	beq.n	800482a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004814:	d009      	beq.n	800482a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a12      	ldr	r2, [pc, #72]	@ (8004864 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d004      	beq.n	800482a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a10      	ldr	r2, [pc, #64]	@ (8004868 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d10c      	bne.n	8004844 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004830:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	4313      	orrs	r3, r2
 800483a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68ba      	ldr	r2, [r7, #8]
 8004842:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3714      	adds	r7, #20
 800485a:	46bd      	mov	sp, r7
 800485c:	bc80      	pop	{r7}
 800485e:	4770      	bx	lr
 8004860:	40012c00 	.word	0x40012c00
 8004864:	40000400 	.word	0x40000400
 8004868:	40000800 	.word	0x40000800

0800486c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	bc80      	pop	{r7}
 800487c:	4770      	bx	lr

0800487e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800487e:	b480      	push	{r7}
 8004880:	b083      	sub	sp, #12
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004886:	bf00      	nop
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	bc80      	pop	{r7}
 800488e:	4770      	bx	lr

08004890 <memset>:
 8004890:	4603      	mov	r3, r0
 8004892:	4402      	add	r2, r0
 8004894:	4293      	cmp	r3, r2
 8004896:	d100      	bne.n	800489a <memset+0xa>
 8004898:	4770      	bx	lr
 800489a:	f803 1b01 	strb.w	r1, [r3], #1
 800489e:	e7f9      	b.n	8004894 <memset+0x4>

080048a0 <__libc_init_array>:
 80048a0:	b570      	push	{r4, r5, r6, lr}
 80048a2:	2600      	movs	r6, #0
 80048a4:	4d0c      	ldr	r5, [pc, #48]	@ (80048d8 <__libc_init_array+0x38>)
 80048a6:	4c0d      	ldr	r4, [pc, #52]	@ (80048dc <__libc_init_array+0x3c>)
 80048a8:	1b64      	subs	r4, r4, r5
 80048aa:	10a4      	asrs	r4, r4, #2
 80048ac:	42a6      	cmp	r6, r4
 80048ae:	d109      	bne.n	80048c4 <__libc_init_array+0x24>
 80048b0:	f000 f81a 	bl	80048e8 <_init>
 80048b4:	2600      	movs	r6, #0
 80048b6:	4d0a      	ldr	r5, [pc, #40]	@ (80048e0 <__libc_init_array+0x40>)
 80048b8:	4c0a      	ldr	r4, [pc, #40]	@ (80048e4 <__libc_init_array+0x44>)
 80048ba:	1b64      	subs	r4, r4, r5
 80048bc:	10a4      	asrs	r4, r4, #2
 80048be:	42a6      	cmp	r6, r4
 80048c0:	d105      	bne.n	80048ce <__libc_init_array+0x2e>
 80048c2:	bd70      	pop	{r4, r5, r6, pc}
 80048c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80048c8:	4798      	blx	r3
 80048ca:	3601      	adds	r6, #1
 80048cc:	e7ee      	b.n	80048ac <__libc_init_array+0xc>
 80048ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80048d2:	4798      	blx	r3
 80048d4:	3601      	adds	r6, #1
 80048d6:	e7f2      	b.n	80048be <__libc_init_array+0x1e>
 80048d8:	08004940 	.word	0x08004940
 80048dc:	08004940 	.word	0x08004940
 80048e0:	08004940 	.word	0x08004940
 80048e4:	08004944 	.word	0x08004944

080048e8 <_init>:
 80048e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ea:	bf00      	nop
 80048ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ee:	bc08      	pop	{r3}
 80048f0:	469e      	mov	lr, r3
 80048f2:	4770      	bx	lr

080048f4 <_fini>:
 80048f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048f6:	bf00      	nop
 80048f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048fa:	bc08      	pop	{r3}
 80048fc:	469e      	mov	lr, r3
 80048fe:	4770      	bx	lr
